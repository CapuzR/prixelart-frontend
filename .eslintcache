[{"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\index.js":"1","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\theme.js":"2","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\App.js":"3","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\serviceWorker.js":"4","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\expire.js":"5","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\register\\userRegistration.jsx":"6","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\register\\prixerRegistration.jsx":"7","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\home\\home.jsx":"8","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\adminLogin\\adminLoginPage.jsx":"9","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\prixerProfile.jsx":"10","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\login\\loginPage.jsx":"11","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\fullscreenPhoto\\fullscreenPhoto.jsx":"12","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\gallery\\gallery.jsx":"13","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\productsCatalog.jsx":"14","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordChange\\passwordChange.jsx":"15","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordReset\\forgotPassword.jsx":"16","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordReset\\passwordReset.jsx":"17","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\adminMain.jsx":"18","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\validations.js":"19","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\Copyright\\copyright.jsx":"20","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\Preferences.jsx":"21","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\orders.jsx":"22","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\paymentMethods.jsx":"23","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\products\\products.jsx":"24","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\consumers\\consumers.jsx":"25","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\adminUser\\adminUser.jsx":"26","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\utils.js":"27","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\listItems.jsx":"28","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\productsGrid.jsx":"29","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\dashboard.jsx":"30","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\artUploader.jsx":"31","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\floatingAddButton\\floatingAddButton.jsx":"32","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\grid\\grid.jsx":"33","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\appBar\\appBar.jsx":"34","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\prixerOptions\\prixerOptions.jsx":"35","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\services.js":"36","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\userData\\userData.jsx":"37","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\tabPreferences.jsx":"38","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\orderServices.js":"39","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\searchBar\\searchBar.jsx":"40","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\prixerGrid\\prixerGrid.jsx":"41","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\simpleDialog\\simpleDialog.jsx":"42","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\updateAdmin.jsx":"43","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\readAdmins.jsx":"44","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\disableAdmin.jsx":"45","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\createAdmin.jsx":"46","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\createConsumer.jsx":"47","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\readProducts.jsx":"48","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\createProduct.jsx":"49","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\updateProduct.jsx":"50","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\disableProduct.jsx":"51","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\readConsumers.jsx":"52","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\updateConsumer.jsx":"53","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\createPaymentMethod.jsx":"54","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\readPaymentMethods.jsx":"55","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\updatePaymentMethod.jsx":"56","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\createOrder.jsx":"57","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\updateOrder.jsx":"58","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\chart.jsx":"59","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\deposits.jsx":"60","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\orders.jsx":"61","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\aspectRatioSelector.jsx":"62","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\preferenceTerms.jsx":"63","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\preferencesCarousel.jsx":"64","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\consumerServices.js":"65","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\Title.jsx":"66","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\products\\variants.jsx":"67","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\orderBasicInfo.jsx":"68","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\orderDetails.jsx":"69","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\cropImage.js":"70","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\easyCropper.jsx":"71","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\variants\\readVariants.jsx":"72","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\variants\\createVariant.jsx":"73","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\TestimonialsCrud\\Testimonials.jsx":"74","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\TestimonialsCrud\\TestimonialsFeed.jsx":"75"},{"size":958,"mtime":1661179060799,"results":"76","hashOfConfig":"77"},{"size":419,"mtime":1661179060827,"results":"78","hashOfConfig":"77"},{"size":3390,"mtime":1661179060773,"results":"79","hashOfConfig":"77"},{"size":5227,"mtime":1661179060817,"results":"80","hashOfConfig":"77"},{"size":418,"mtime":1661179060829,"results":"81","hashOfConfig":"77"},{"size":12312,"mtime":1663699657897,"results":"82","hashOfConfig":"77"},{"size":15093,"mtime":1663699657896,"results":"83","hashOfConfig":"77"},{"size":16733,"mtime":1663699657892,"results":"84","hashOfConfig":"77"},{"size":9100,"mtime":1661179060796,"results":"85","hashOfConfig":"77"},{"size":2419,"mtime":1661263262650,"results":"86","hashOfConfig":"77"},{"size":9855,"mtime":1661179060801,"results":"87","hashOfConfig":"77"},{"size":25203,"mtime":1661179060804,"results":"88","hashOfConfig":"77"},{"size":2585,"mtime":1663699657891,"results":"89","hashOfConfig":"77"},{"size":2405,"mtime":1661179060812,"results":"90","hashOfConfig":"77"},{"size":8779,"mtime":1661179060807,"results":"91","hashOfConfig":"77"},{"size":4822,"mtime":1661179060807,"results":"92","hashOfConfig":"77"},{"size":7383,"mtime":1661179060808,"results":"93","hashOfConfig":"77"},{"size":7609,"mtime":1663699657881,"results":"94","hashOfConfig":"77"},{"size":608,"mtime":1661179060831,"results":"95","hashOfConfig":"77"},{"size":501,"mtime":1661179060818,"results":"96","hashOfConfig":"77"},{"size":207,"mtime":1662066599218,"results":"97","hashOfConfig":"77"},{"size":5443,"mtime":1661179060781,"results":"98","hashOfConfig":"77"},{"size":5222,"mtime":1661179060782,"results":"99","hashOfConfig":"77"},{"size":5371,"mtime":1663699657885,"results":"100","hashOfConfig":"77"},{"size":4996,"mtime":1661179060778,"results":"101","hashOfConfig":"77"},{"size":4595,"mtime":1661263262645,"results":"102","hashOfConfig":"77"},{"size":2792,"mtime":1661179060831,"results":"103","hashOfConfig":"77"},{"size":5426,"mtime":1663700186953,"results":"104","hashOfConfig":"77"},{"size":13340,"mtime":1663699657896,"results":"105","hashOfConfig":"77"},{"size":3304,"mtime":1661179060779,"results":"106","hashOfConfig":"77"},{"size":27092,"mtime":1661179060821,"results":"107","hashOfConfig":"77"},{"size":1500,"mtime":1661179060825,"results":"108","hashOfConfig":"77"},{"size":6024,"mtime":1663699657893,"results":"109","hashOfConfig":"77"},{"size":4802,"mtime":1661263262652,"results":"110","hashOfConfig":"77"},{"size":959,"mtime":1663699657894,"results":"111","hashOfConfig":"77"},{"size":2851,"mtime":1661179060813,"results":"112","hashOfConfig":"77"},{"size":18366,"mtime":1663699657895,"results":"113","hashOfConfig":"77"},{"size":1661,"mtime":1663699657884,"results":"114","hashOfConfig":"77"},{"size":2794,"mtime":1661179060781,"results":"115","hashOfConfig":"77"},{"size":1796,"mtime":1661179060826,"results":"116","hashOfConfig":"77"},{"size":8948,"mtime":1663699657898,"results":"117","hashOfConfig":"77"},{"size":1862,"mtime":1661179060826,"results":"118","hashOfConfig":"77"},{"size":0,"mtime":1661179060776,"results":"119","hashOfConfig":"77"},{"size":2157,"mtime":1661179060776,"results":"120","hashOfConfig":"77"},{"size":0,"mtime":1661179060775,"results":"121","hashOfConfig":"77"},{"size":8892,"mtime":1661179060775,"results":"122","hashOfConfig":"77"},{"size":15971,"mtime":1663699657887,"results":"123","hashOfConfig":"77"},{"size":4539,"mtime":1663699657889,"results":"124","hashOfConfig":"77"},{"size":24823,"mtime":1663699657888,"results":"125","hashOfConfig":"77"},{"size":20996,"mtime":1663699657889,"results":"126","hashOfConfig":"77"},{"size":0,"mtime":1661179060793,"results":"127","hashOfConfig":"77"},{"size":3002,"mtime":1661179060785,"results":"128","hashOfConfig":"77"},{"size":17561,"mtime":1661179060785,"results":"129","hashOfConfig":"77"},{"size":6547,"mtime":1661179060790,"results":"130","hashOfConfig":"77"},{"size":3081,"mtime":1661179060791,"results":"131","hashOfConfig":"77"},{"size":6964,"mtime":1661179060791,"results":"132","hashOfConfig":"77"},{"size":12883,"mtime":1661179060787,"results":"133","hashOfConfig":"77"},{"size":8857,"mtime":1661179060790,"results":"134","hashOfConfig":"77"},{"size":1482,"mtime":1661179060779,"results":"135","hashOfConfig":"77"},{"size":881,"mtime":1661179060779,"results":"136","hashOfConfig":"77"},{"size":2418,"mtime":1661179060780,"results":"137","hashOfConfig":"77"},{"size":6918,"mtime":1661179060821,"results":"138","hashOfConfig":"77"},{"size":3617,"mtime":1663697191178,"results":"139","hashOfConfig":"77"},{"size":16437,"mtime":1663699657884,"results":"140","hashOfConfig":"77"},{"size":1082,"mtime":1661179060784,"results":"141","hashOfConfig":"77"},{"size":356,"mtime":1661179060776,"results":"142","hashOfConfig":"77"},{"size":5293,"mtime":1661179060783,"results":"143","hashOfConfig":"77"},{"size":15989,"mtime":1661179060787,"results":"144","hashOfConfig":"77"},{"size":39777,"mtime":1661179060788,"results":"145","hashOfConfig":"77"},{"size":2393,"mtime":1661179060829,"results":"146","hashOfConfig":"77"},{"size":1353,"mtime":1661179060822,"results":"147","hashOfConfig":"77"},{"size":3748,"mtime":1661179060795,"results":"148","hashOfConfig":"77"},{"size":19566,"mtime":1661179060795,"results":"149","hashOfConfig":"77"},{"size":18542,"mtime":1663709791080,"results":"150","hashOfConfig":"77"},{"size":4500,"mtime":1663699657880,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12dukld",{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"165"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"165"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"165"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"165"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"165"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"165"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"165"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"165"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"165"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"165"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"165"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"307","messages":"308","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"309","messages":"310","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"313","messages":"314","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"165"},"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\index.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\theme.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\App.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\serviceWorker.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\expire.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\register\\userRegistration.jsx",["316","317","318","319","320","321","322","323","324"],"//Llevar el Password a un componente propio.\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport validations from \"../utils/validations\";\r\nimport Copyright from \"../sharedComponents/Copyright/copyright\";\r\n\r\n//material-ui\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport { FormControlLabel } from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\n// import Terms from \"./Terms\";     //Anterior Términos y condiciones\r\nimport clsx from \"clsx\";\r\nimport jwt from \"jwt-decode\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    position: \"absolute\",\r\n    maxHeight: 450,\r\n    overflowY: \"auto\",\r\n    backgroundColor: \"white\",\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"16px 32px 24px\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    textAlign: \"justify\",\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  snackbar: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      bottom: 90,\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [buttonState, setButtonState] = useState(true);\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [termsAgree, setTermsAgree] = useState(false);\r\n  const theme = useTheme();\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"md\"));\r\n\r\n  const handleOnChange = () => {\r\n    setIsChecked(!isChecked);\r\n    setTermsAgree(!isChecked);\r\n  };\r\n  const styles = useStyles();\r\n  const [modal, setModal] = useState(false);\r\n  const openModal = () => {\r\n    setModal(!modal);\r\n  };\r\n  const body = (\r\n    <div className={styles.modal}>\r\n      <div>{value}</div>\r\n      {/* <Terms /> */}\r\n      <div align=\"center\">\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => openModal()}>\r\n          Aceptar\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n  //Error states.\r\n  const [usernameError, setUsernameError] = useState();\r\n  const [emailError, setEmailError] = useState();\r\n  const [passwordError, setPasswordError] = useState();\r\n  const [errorMessage, setErrorMessage] = useState();\r\n  const [snackBarError, setSnackBarError] = useState(false);\r\n\r\n  const now = new Date();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!username || !email || !firstName || !lastName || !email || !password) {\r\n      setErrorMessage(\"Por favor completa todos los campos requeridos.\");\r\n      setSnackBarError(true);\r\n    } else {\r\n      const base_url = process.env.REACT_APP_BACKEND_URL + \"/register\";\r\n      const data = {\r\n        username: username,\r\n        email: email,\r\n        password: password,\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        termsAgree: termsAgree,\r\n      };\r\n      setButtonState(true);\r\n      axios\r\n        .post(base_url, data)\r\n        .then((response) => {\r\n          if (response.data.info === \"error_username\") {\r\n            setUsernameError(true);\r\n            setErrorMessage(response.data.message);\r\n            setSnackBarError(true);\r\n          } else if (response.data.info === \"error_email\") {\r\n            setEmailError(true);\r\n            setErrorMessage(response.data.message);\r\n            setSnackBarError(true);\r\n          } else {\r\n            setPasswordError(true);\r\n            setErrorMessage(\"Registro de usuario exitoso.\");\r\n            setSnackBarError(true);\r\n            const token = jwt(response.data.token);\r\n            localStorage.setItem(\"token\", JSON.stringify(token));\r\n            localStorage.setItem(\r\n              \"tokenExpire\",\r\n              JSON.stringify(now.getTime() + 21600000)\r\n            );\r\n            history.push({ pathname: \"/registrar/prixer\" });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setButtonState(false);\r\n          console.log(error.response);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (email && username && password) {\r\n      if (\r\n        validations.isAValidEmail(email) &&\r\n        validations.isAValidUsername(username) &&\r\n        validations.isAValidPassword(password)\r\n      ) {\r\n        setButtonState(false);\r\n      } else {\r\n        setButtonState(true);\r\n      }\r\n    } else {\r\n      setButtonState(true);\r\n    }\r\n  });\r\n\r\n  const handleEmailChange = (e) => {\r\n    if (validations.isAValidEmail(e.target.value)) {\r\n      setEmail(e.target.value);\r\n      setEmailError(false);\r\n      setSnackBarError(false);\r\n    } else {\r\n      setEmail(e.target.value);\r\n      setErrorMessage(\"Por favor introduce un correo electrónico válido.\");\r\n      setSnackBarError(true);\r\n      setEmailError(true);\r\n    }\r\n  };\r\n\r\n  const handleUsernameChange = (e) => {\r\n    if (validations.isAValidUsername(e.target.value)) {\r\n      setUsername(e.target.value);\r\n      setUsernameError(false);\r\n      setSnackBarError(false);\r\n    } else {\r\n      setUsername(e.target.value);\r\n      setErrorMessage(\r\n        \"Por favor introduce un nombre de usuario que solo incluya letras en minúscula y números.\"\r\n      );\r\n      setSnackBarError(true);\r\n      setUsernameError(true);\r\n    }\r\n  };\r\n\r\n  //Password\r\n  const handlePasswordChange = (e) => {\r\n    if (validations.isAValidPassword(e.target.value)) {\r\n      setPassword(e.target.value);\r\n      setPasswordError(false);\r\n      setSnackBarError(false);\r\n    } else {\r\n      setPassword(e.target.value);\r\n      setPasswordError(true);\r\n      setErrorMessage(\r\n        \"Disculpa, tu contraseña debe tener entre 8 y 15 caracteres, incluyendo al menos: una minúscula, una mayúscula, un número y un caracter especial.\"\r\n      );\r\n      setSnackBarError(true);\r\n    }\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Registrar\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                error={usernameError}\r\n                id=\"username\"\r\n                label=\"Usuario\"\r\n                name=\"username\"\r\n                autoComplete=\"username\"\r\n                value={username}\r\n                onChange={handleUsernameChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"Nombre\"\r\n                autoFocus\r\n                value={firstName}\r\n                onChange={(e) => setFirstName(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label=\"Apellido\"\r\n                name=\"lastName\"\r\n                autoComplete=\"lname\"\r\n                value={lastName}\r\n                onChange={(e) => setLastName(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                error={emailError}\r\n                id=\"email\"\r\n                label=\"Correo electrónico\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                value={email}\r\n                onChange={handleEmailChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                xs={12}\r\n                fullWidth={true}\r\n              >\r\n                <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                  Contraseña\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type={showPassword ? \"text\" : \"password\"}\r\n                  value={password}\r\n                  label=\"Contraseña\"\r\n                  error={passwordError}\r\n                  onChange={handlePasswordChange}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                        edge=\"end\"\r\n                      >\r\n                        {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={100}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            {/* <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                display: \"flex\",\r\n                paddingTop: \"24px\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <FormControlLabel\r\n                style={{ margin: 0 }}\r\n                control={<Checkbox color=\"primary\" />}\r\n                label=\"Acepto los\"\r\n                onChange={handleOnChange}\r\n                value={termsAgree}\r\n              />\r\n\r\n              <Button\r\n                style={{ textTransform: \"lowercase\", fontSize: \"1rem\" }}\r\n                onClick={() => openModal()}\r\n              >\r\n                Términos y condiciones\r\n              </Button>\r\n              <Modal\r\n                open={modal}\r\n                onClose={openModal}\r\n                width={isDesktop ? 800 : 420}\r\n              >\r\n                {body}\r\n              </Modal>\r\n            </Grid> */}\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            value=\"submit\"\r\n          >\r\n            Registrarme\r\n          </Button>\r\n          <Grid container style={{ justifyContent: \"center\" }}>\r\n            <Grid item>\r\n              <Link\r\n                href=\"#\"\r\n                onClick={() => {\r\n                  history.push({ pathname: \"/iniciar\" });\r\n                }}\r\n                variant=\"body2\"\r\n              >\r\n                ¿Ya tienes una cuenta? Inicia sesión.\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n      <Snackbar\r\n        open={snackBarError}\r\n        autoHideDuration={6000}\r\n        message={errorMessage}\r\n        className={classes.snackbar}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n",["325","326"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\register\\prixerRegistration.jsx",["327","328","329","330","331","332","333","334","335","336","337","338"],"import React, { useEffect } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { useState } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nimport Terms from \"./Terms\"; //Anterior Términos y condiciones\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" href=\"https://prixelart.com/\">\r\n        prixelart.com\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    borderStyle: \"solid\",\r\n    borderWidth: 1,\r\n    borderColor: \"#000\",\r\n    backgroundColor: \"#fff\",\r\n    width: \"160px\",\r\n    height: \"160px\",\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  snackbar: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      bottom: 90,\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  loading: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(0),\r\n    },\r\n    marginLeft: \"50%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    maxWidth: 300,\r\n  },\r\n  modal: {\r\n    position: \"absolute\",\r\n    width: \"80%\",\r\n    maxHeight: 450,\r\n    overflowY: \"auto\",\r\n    backgroundColor: \"white\",\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"16px 32px 24px\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    textAlign: \"justify\",\r\n  },\r\n  button: {\r\n    textAlign: \"center\",\r\n  },\r\n  root: {\r\n    height: 300,\r\n    flexGrow: 1,\r\n    minWidth: 300,\r\n  },\r\n}));\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\nconst specialties = [\"Fotografía\", \"Diseño\", \"Artes plásticas\"];\r\nfunction getStyles(specialty, theme) {\r\n  return {\r\n    fontWeight:\r\n      specialty.indexOf(specialty) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\nexport default function PrixerRegistration() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [instagram, setInstagram] = useState(\"\");\r\n  const [facebook, setFacebook] = useState(\"\");\r\n  const [twitter, setTwitter] = useState(\"\");\r\n  const [dateOfBirth, setDateOfBirth] = useState();\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [avatar, setAvatar] = useState(\"\");\r\n  const [avatarObj, setAvatarObj] = useState(\"\");\r\n  const [buttonState, setButtonState] = useState(true);\r\n  const [termsAgree, setTermsAgree] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [isChecked, setIsChecked] = React.useState(false);\r\n  const theme = useTheme();\r\n  const [specialty, setSpecialty] = React.useState([]);\r\n  const [change, setChange] = useState(false);\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n\r\n  const handleOnChange = () => {\r\n    setIsChecked(!isChecked);\r\n  };\r\n  const setCheckedBox = () => {\r\n    setIsChecked(!Checkbox);\r\n  };\r\n  const styles = useStyles();\r\n  const [modal, setModal] = useState(false);\r\n  const openModal = () => {\r\n    setModal(!modal);\r\n  };\r\n  const acceptTerms = () => {\r\n    setIsChecked(!isChecked);\r\n    openModal();\r\n  };\r\n  const body = (\r\n    <div className={styles.modal}>\r\n      {/* <Terms /> */}\r\n      <div>{value}</div>\r\n\r\n      <div align=\"center\">\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            setIsChecked(true);\r\n            setModal(false);\r\n          }}\r\n        >\r\n          Aceptar\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  //Error states.\r\n  const [errorMessage, setErrorMessage] = useState();\r\n  const [snackBarError, setSnackBarError] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      !instagram ||\r\n      !dateOfBirth ||\r\n      !specialty ||\r\n      !phone ||\r\n      !country ||\r\n      !city ||\r\n      !description ||\r\n      !isChecked\r\n    ) {\r\n      // ||(!avatar)) {\r\n      setErrorMessage(\"Por favor completa todos los campos requeridos.\");\r\n      setSnackBarError(true);\r\n      setIsChecked(true);\r\n    } else {\r\n      setLoading(true);\r\n      setButtonState(true);\r\n      const base_url =\r\n        process.env.REACT_APP_BACKEND_URL + \"/prixer-registration\";\r\n      // const cldAvatarUrl = await uploadToCld();\r\n      const data = {\r\n        specialtyArt: specialty,\r\n        instagram: instagram,\r\n        facebook: facebook,\r\n        twitter: twitter,\r\n        dateOfBirth: dateOfBirth,\r\n        phone: phone,\r\n        country: country,\r\n        city: city,\r\n        description: description,\r\n        termsAgree: termsAgree,\r\n        // 'avatar': cldAvatarUrl,\r\n        username: JSON.parse(localStorage.getItem(\"token\")).username,\r\n      };\r\n\r\n      axios\r\n        .post(base_url, data)\r\n        .then((response) => {\r\n          if (response.data.success === false) {\r\n            setLoading(false);\r\n            setButtonState(false);\r\n            setErrorMessage(response.data.message);\r\n            setSnackBarError(true);\r\n          } else {\r\n            setErrorMessage(\"Registro de Prixer exitoso.\");\r\n            setSnackBarError(true);\r\n            history.push({ pathname: \"/\" + response.data.prixerData.username });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setLoading(false);\r\n          setButtonState(false);\r\n          console.log(error.response);\r\n        });\r\n    }\r\n  };\r\n  const handleChange = (event) => {\r\n    setSpecialty(event.target.value);\r\n  };\r\n  const getTerms = () => {\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/termsAndConditions/read\";\r\n    axios\r\n      .get(base_url)\r\n      .then((response) => {\r\n        setValue(response.data.terms.termsAndConditions);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getTerms();\r\n  }, []);\r\n  console.log(isChecked);\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Comparte con tus futuros clientes\r\n        </Typography>\r\n        <form onSubmit={handleSubmit} className={classes.form} noValidate>\r\n          <Grid container spacing={3}>\r\n            {loading && (\r\n              <div className={classes.loading}>\r\n                <CircularProgress />\r\n              </div>\r\n            )}\r\n            <Grid item xs={6}>\r\n              <FormControl\r\n                className={classes.formControl}\r\n                style={{ width: \"100%\" }}\r\n              >\r\n                <InputLabel id=\"demo-mutiple-name-label\">\r\n                  Especialidad\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-mutiple-name-label\"\r\n                  id=\"demo-mutiple-name\"\r\n                  multiple\r\n                  value={specialty}\r\n                  onChange={handleChange}\r\n                  input={<Input />}\r\n                  MenuProps={MenuProps}\r\n                >\r\n                  {specialties.map((specialty) => (\r\n                    <MenuItem\r\n                      key={specialty}\r\n                      value={specialty}\r\n                      style={getStyles(specialty, theme)}\r\n                    >\r\n                      {specialty}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={6}\r\n              sm={6}\r\n              style={{ display: \"flex\", alignItems: \"center\" }}\r\n            >\r\n              <TextField\r\n                style={{\r\n                  width: \"100%\",\r\n                }}\r\n                id=\"dateOfBirth\"\r\n                label=\"Fecha de Nacimiento\"\r\n                type=\"date\"\r\n                required\r\n                format=\"dd-MM-yyyy\"\r\n                defaultValue=\"06-07-2016\"\r\n                className={classes.textField}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                onChange={(e) => {\r\n                  setDateOfBirth(new Date(e.target.value));\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"instagram\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                value={instagram}\r\n                id=\"instagram\"\r\n                label=\"Instagram\"\r\n                autoFocus\r\n                onChange={(e) => {\r\n                  setInstagram(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"facebook\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={facebook}\r\n                id=\"facebook\"\r\n                label=\"Facebook\"\r\n                autoFocus\r\n                onChange={(e) => {\r\n                  setFacebook(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"twitter\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={twitter}\r\n                id=\"twitter\"\r\n                label=\"Twitter\"\r\n                autoFocus\r\n                onChange={(e) => {\r\n                  setTwitter(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"phone\"\r\n                label=\"Teléfono\"\r\n                value={phone}\r\n                onChange={(e) => {\r\n                  setPhone(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"country\"\r\n                label=\"País\"\r\n                value={country}\r\n                type=\"country\"\r\n                id=\"country\"\r\n                autoComplete=\"current-password\"\r\n                onChange={(e) => {\r\n                  setCountry(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"city\"\r\n                label=\"Ciudad\"\r\n                value={city}\r\n                type=\"city\"\r\n                id=\"city\"\r\n                autoComplete=\"current-password\"\r\n                onChange={(e) => {\r\n                  setCity(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                name=\"description\"\r\n                label=\"Descripción\"\r\n                value={description}\r\n                type=\"description\"\r\n                id=\"description\"\r\n                autoComplete=\"current-password\"\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            style={{\r\n              display: \"flex\",\r\n              paddingTop: \"24px\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <FormControlLabel\r\n              style={{ margin: 0, paddingRight: 8 }}\r\n              control={\r\n                <Checkbox\r\n                  color=\"primary\"\r\n                  value={isChecked}\r\n                  checked={isChecked ? true : false}\r\n                />\r\n              }\r\n              label=\"Acepto los\"\r\n              onChange={handleOnChange}\r\n              required\r\n            />\r\n\r\n            <a\r\n              style={{\r\n                textTransform: \"lowercase\",\r\n                fontSize: \"1rem\",\r\n                textDecoration: \"underline\",\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={openModal}\r\n            >\r\n              Términos y condiciones\r\n            </a>\r\n            <Modal\r\n              open={modal}\r\n              onClose={openModal}\r\n              xl={800}\r\n              lg={800}\r\n              md={480}\r\n              sm={360}\r\n              xs={360}\r\n            >\r\n              {body}\r\n            </Modal>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            value=\"submit\"\r\n            required\r\n            disabled={!isChecked}\r\n          >\r\n            Guardar e ir a mi perfil\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n      <Snackbar\r\n        open={snackBarError}\r\n        autoHideDuration={1000}\r\n        message={errorMessage}\r\n        className={classes.snackbar}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\home\\home.jsx",["339","340"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\adminLogin\\adminLoginPage.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\prixerProfile.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\login\\loginPage.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\fullscreenPhoto\\fullscreenPhoto.jsx",["341","342","343","344","345"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\gallery\\gallery.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\productsCatalog.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordChange\\passwordChange.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordReset\\forgotPassword.jsx",["346","347","348","349","350","351","352","353"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordReset\\passwordReset.jsx",["354"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\adminMain.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\validations.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\Copyright\\copyright.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\Preferences.jsx",["355","356"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\orders.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\paymentMethods.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\products\\products.jsx",["357"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport clsx from 'clsx';\r\n\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport CreateProduct from '../../productCrud/createProduct';\r\nimport UpdateProduct from '../../productCrud/updateProduct';\r\nimport DisableProduct from '../../productCrud/disableProduct';\r\nimport ReadProducts from '../../productCrud/readProducts';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    toolbar: {\r\n      paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: '0 8px',\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n      display: 'none',\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n      position: 'relative',\r\n      whiteSpace: 'nowrap',\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerPaperClose: {\r\n      overflowX: 'hidden',\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      width: theme.spacing(7),\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9),\r\n      },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n      flexGrow: 1,\r\n      height: '100vh',\r\n      overflow: 'auto',\r\n    },\r\n    container: {\r\n      paddingTop: theme.spacing(4),\r\n      paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      display: 'flex',\r\n      overflow: 'none',\r\n      flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n      height: 'auto',\r\n      overflow: 'none'\r\n    },\r\n    fab: {\r\n      right: 0,\r\n      position: 'absolute'\r\n    },\r\n  }));\r\n\r\nexport default function Products(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [ activeCrud, setActiveCrud ] = useState('read');\r\n  const [ product, setProduct ] = useState();\r\n  const [ productEdit, setProductEdit ] = useState(true);\r\n\r\n  const handleProductAction = (action)=> {\r\n    history.push({pathname:\"/admin/product/\"+action});\r\n  }\r\n\r\n  useEffect(()=>{\r\n    location.pathname.split('/').length === 5 ?\r\n      setActiveCrud(location.pathname.split('/')[location.pathname.split('/').length-2])\r\n    : location.pathname.split('/').length === 4 &&\r\n      setActiveCrud(location.pathname.split('/')[location.pathname.split('/').length-1])\r\n  },[location.pathname]);\r\n\r\n  return (\r\n    <div style={{position:'relative'}}>\r\n      {\r\n        productEdit &&\r\n        <div style={{position:'absolute', right:0}}>\r\n          <Fab color=\"default\" aria-label=\"edit\" onClick={()=>{handleProductAction('read')}}>\r\n            <ViewListIcon />\r\n          </Fab>\r\n          {/* <Fab color=\"secondary\" aria-label=\"edit\" onClick={()=>{handleUserAction('update')}}>\r\n            <EditIcon />\r\n          </Fab> */}\r\n          <Fab color=\"primary\" aria-label=\"add\" onClick={()=>{handleProductAction('create')}}>\r\n            <AddIcon />\r\n          </Fab>\r\n        </div>\r\n      }\r\n      <Grid container spacing={3}>\r\n          {/* Chart */}\r\n          <Grid item xs={12} md={12} lg={12}>\r\n              <Paper className={fixedHeightPaper}>\r\n                {\r\n                  activeCrud === 'create' ?\r\n                    <CreateProduct />\r\n                  : activeCrud === 'read' ?\r\n                    <ReadProducts setProduct={setProduct}/>\r\n                  : activeCrud === 'update' ?\r\n                    <div>\r\n                      <UpdateProduct product={product} setProductEdit={setProductEdit}/>\r\n                    </div>\r\n                  :\r\n                    <DisableProduct />\r\n                }\r\n              </Paper>\r\n          </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n    ","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\consumers\\consumers.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\adminUser\\adminUser.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\utils.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\listItems.jsx",["358","359"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\productsGrid.jsx",["360","361","362","363","364","365"],"//[]      17. Búsqueda de Prixers.\r\n//[]      21. Términos y condiciones.\r\n//[]      16. Filtros para las búsquedas (Por etiqueta).\r\n//[]      25. Editar datos de la imagen en la tarjeta del grid grande.\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport { isWidthUp } from '@material-ui/core/withWidth';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport WhatsAppIcon from '@material-ui/icons/WhatsApp';\r\nimport utils from '../utils/utils';\r\nimport axios from 'axios';\r\n\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { setProductAtts, getAttributes, getEquation } from './services.js';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    overflow: 'hidden',\r\n    alignContent: \"space-between\",\r\n    padding: 10,\r\n    marginTop: 10,\r\n    width: '50%',\r\n    backgroundColor: theme.palette.background.paper,\r\n    [theme.breakpoints.down('sm')]: {\r\n      maxWidth: 300\r\n    },\r\n    [theme.breakpoints.up('sm')]: {\r\n      maxWidth: 330\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      maxWidth: 330\r\n    },\r\n    [theme.breakpoints.up('xl')]: {\r\n      maxWidth: 330\r\n    }\r\n  },\r\n  gridList: {\r\n    overflow: 'hidden',\r\n    padding: 10,\r\n    width: '100%',\r\n    height: '100%',\r\n    justifyContent: 'space-around',\r\n  },\r\n  img: {\r\n    width: '100%'\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n  form: {\r\n    width: '100%'\r\n  }\r\n}));\r\n\r\nconst getGridListCols = () => {\r\n  if (isWidthUp('md', 200)) {\r\n    return 4;\r\n  }\r\n\r\n  return 1;\r\n}\r\n\r\nexport default function ProductGrid(props) {\r\n  const classes = useStyles();\r\n  const [tiles, setTiles] = useState();\r\n  const [width, setWidth] = useState([]);\r\n  const [height, setHeight] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const base_url = process.env.REACT_APP_BACKEND_URL + \"/product/read-all\";\r\n    axios.get(base_url)\r\n      .then(async (response) => {\r\n        let productsAttTemp1 = response.data.products\r\n        await productsAttTemp1.map(async (p, iProd, pArr) => {\r\n          productsAttTemp1 = await getEquation(p, iProd, pArr);\r\n        });\r\n        setTiles(getAttributes(productsAttTemp1));\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <GridList cellHeight={'auto'} className={classes.gridList} cols={getGridListCols()}>\r\n      {tiles ?\r\n        tiles.map((tile, iProd, productsArr) => (\r\n          <Card className={classes.root}>\r\n            <CardActionArea style={{ alignContent: \"space-between\" }}>\r\n              <CardMedia>\r\n                <img src={tile.thumbUrl} className={classes.img} alt=\"product thumbnail\" />\r\n              </CardMedia>\r\n              <CardContent>\r\n                <Typography gutterBottom style={{ padding: 0, marginBotom: 12, width: 10 }} variant=\"h5\" component=\"h2\">\r\n                  {tile.name}\r\n                </Typography>\r\n                <Typography gutterBottom style={{ fontSize: 15, padding: 0, marginBottom: 15 }} variant=\"h5\" component=\"h2\">\r\n                  {\r\n                    (JSON.parse(localStorage.getItem('token')) &&\r\n                      JSON.parse(localStorage.getItem('token')).username) ?\r\n                      (tile.needsEquation && tile.prixerEquation && tile.prixerEquation != 0) ?\r\n                        \"PVP: $\" + Math.round(parseFloat(tile.publicEquation)) + \" \\n PVM: $\" + Math.round(parseFloat(tile.prixerEquation)) :\r\n                        \"PVP: $\" + tile.publicPrice.from + \" - \" + tile.publicPrice.to + \" \\n PVM: $\" + tile.prixerPrice.from + \" - \" + tile.prixerPrice.to\r\n                      :\r\n                      (tile.needsEquation && tile.publicEquation && tile.publicEquation != 0) ?\r\n                        \"PVP: $\" + Math.round(parseFloat(tile.publicEquation)) :\r\n                        \"PVP: \" + tile.publicPrice.from + \" - \" + tile.publicPrice.to\r\n                  }\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                  {tile.description}\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActionArea>\r\n            {\r\n              tile.hasSpecialVar &&\r\n              <>\r\n                <CardActions style={{ width: '25%' }}>\r\n                  {/* <Grid container xs={12} md={12} spacing={2}> */}\r\n                  <Grid item xs={12} md={12}>\r\n                    <FormControl variant=\"outlined\" className={classes.form}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        display=\"inline\"\r\n                        id=\"width\"\r\n                        label=\"Ancho\"\r\n                        name=\"width\"\r\n                        autoComplete=\"width\"\r\n                        value={width[iProd]}\r\n                        onChange={async (e) => {\r\n                          if (!e.target.value) {\r\n                            let w = width;\r\n                            w[iProd] = e.target.value;\r\n                            setWidth([...w]);\r\n                            let l = await getEquation(tile, iProd, tiles, width, height);\r\n                            setTiles([...l]);\r\n                          } else {\r\n                            if (/^\\d+$/.test(e.target.value) && e.target.value[0] !== \"0\") {\r\n                              if (e.target.value && e.target.value != 0) {\r\n                                let w = width;\r\n                                w[iProd] = e.target.value;\r\n                                setWidth([...w]);\r\n                                let l = await getEquation(tile, iProd, tiles, width, height);\r\n                                setTiles([...l]);\r\n                              } else {\r\n                                let w = width;\r\n                                w[iProd] = e.target.value;\r\n                                setWidth([...w]);\r\n                                let l = await getEquation(tile, iProd, tiles, width, height);\r\n                                setTiles([...l]);\r\n                              }\r\n                            }\r\n                          }\r\n                        }}\r\n                      />\r\n                    </FormControl>\r\n                  </Grid>\r\n                </CardActions>\r\n                <CardActions style={{ width: '25%' }}>\r\n                  <Grid item xs={12} md={12}>\r\n                    <FormControl variant=\"outlined\" className={classes.form}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        display=\"inline\"\r\n                        id=\"height\"\r\n                        label=\"Alto\"\r\n                        name=\"height\"\r\n                        autoComplete=\"height\"\r\n                        value={height[iProd]}\r\n                        onChange={async (e) => {\r\n                          if (!e.target.value) {\r\n                            let h = height;\r\n                            h[iProd] = e.target.value;\r\n                            setHeight([...h]);\r\n                            let l = await getEquation(tile, iProd, tiles, width, height);\r\n                            setTiles([...l]);\r\n                          } else {\r\n                            if (/^\\d+$/.test(e.target.value) && e.target.value[0] !== \"0\") {\r\n                              if (e.target.value && e.target.value != 0) {\r\n                                let h = height;\r\n                                h[iProd] = e.target.value;\r\n                                setHeight([...h]);\r\n                                let l = await getEquation(tile, iProd, tiles, width, height);\r\n                                setTiles([...l]);\r\n                              } else {\r\n                                let h = height;\r\n                                h[iProd] = e.target.value;\r\n                                setHeight([...h]);\r\n                                let l = await getEquation(tile, iProd, tiles, width, height);\r\n                                setTiles([...l]);\r\n                              }\r\n                            }\r\n                          }\r\n                        }}\r\n                      />\r\n                    </FormControl>\r\n                  </Grid>\r\n                  {/* </Grid> */}\r\n                </CardActions>\r\n              </>\r\n            }\r\n            {\r\n              tile.attributes &&\r\n              tile.attributes.map((att, iAtt, attributesArr) => (\r\n                <CardActions key={iAtt} style={{ width: '50%' }}>\r\n                  <Grid item xs={12} sm={12} md={12}>\r\n                    <FormControl variant=\"outlined\" className={classes.form} xs={12} sm={12} md={12}>\r\n                      <InputLabel required id=\"att.name\">{att.name}</InputLabel>\r\n                      <Select\r\n                        labelId=\"artTypeLabel\"\r\n                        id=\"artType\"\r\n                        value={tile.selection && tile.selection[iAtt]}\r\n                        onChange={\r\n                          async (e) => {\r\n                            const pAtts = await setProductAtts(e.target.value, attributesArr, iProd, iAtt, productsArr, width, height);\r\n\r\n                            if (pAtts) {\r\n                              setTiles(pAtts.pAtt ? [...pAtts.pAtt] : [...pAtts.att]);\r\n                            }\r\n                          }\r\n                        }\r\n                        label={att.selection}\r\n                      >\r\n                        <MenuItem value=\"\">\r\n                          <em></em>\r\n                        </MenuItem>\r\n                        {\r\n                          att.value &&\r\n                          att.value.map((n, i) => (\r\n                            <MenuItem key={n} value={n}>{n}</MenuItem>\r\n                          ))\r\n                        }\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                </CardActions>\r\n              ))\r\n            }\r\n            <CardActions>\r\n              <Button size=\"small\" color=\"primary\" onClick={(e) => { window.open(utils.generateWaProductMessage(tile), '_blank'); }}>\r\n                Información <WhatsAppIcon />\r\n              </Button>\r\n            </CardActions>\r\n            <CardActions>\r\n              {\r\n                tile.variants &&\r\n                tile.variants.map((v) => {\r\n                  if (v.attributes) {\r\n                    const test = v.attributes.reduce((r, a) => {\r\n                      return (a.name in tile.attributes) === true\r\n                    }, true)\r\n                  }\r\n                })\r\n              }\r\n            </CardActions>\r\n          </Card>\r\n        )\r\n        )\r\n        :\r\n        <h1>Pronto encontrarás los productos ideales para ti.</h1>\r\n      }\r\n    </GridList>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\dashboard.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\artUploader.jsx",["366","367","368","369","370","371","372","373","374","375","376"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\floatingAddButton\\floatingAddButton.jsx",["377"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\grid\\grid.jsx",["378"],"//[]      17. Búsqueda de Prixers.\r\n//[]      21. Términos y condiciones.\r\n//[]      16. Filtros para las búsquedas (Por etiqueta).\r\n//[]      25. Editar datos de la imagen en la tarjeta del grid grande.\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Img from \"react-cool-img\";\r\n\r\nimport utils from '../../utils/utils';\r\nimport SearchBar from '../../sharedComponents/searchBar/searchBar.jsx';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    // maxWidth: 850,\r\n    paddingTop: 15\r\n  },\r\n  img: {\r\n    [theme.breakpoints.down('sm')]: {\r\n      maxHeight: 180\r\n    },\r\n    [theme.breakpoints.up('sm')]: {\r\n      minHeight: 300,\r\n      maxHeight: 450\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      minHeight: 350,\r\n      maxHeight: 450\r\n    },\r\n    [theme.breakpoints.up('xl')]: {\r\n      minHeight: 450,\r\n      maxHeight: 450\r\n    }\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default function Grid(props) {\r\n  const classes = useStyles();\r\n  const [tiles, setTiles] = useState([]);\r\n  const history = useHistory();\r\n  let globalParams = new URLSearchParams(window.location.search);\r\n  const [searchValue, setSearchValue] = useState(globalParams.get('name') || null);\r\n  const [backdrop, setBackdrop] = useState(true);\r\n  const theme = useTheme();\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n  useEffect(()=> {\r\n    if(props.prixerUsername || globalParams.get('prixer')) {\r\n      if(searchValue) {\r\n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/art/read-by-username-by-query\";\r\n        const params = {\r\n          text: searchValue,\r\n          username: props.prixerUsername || globalParams.get('prixer')\r\n        }\r\n        axios.get(base_url, {params})\r\n        .then(response =>{\r\n          setTiles(utils.shuffle(response.data.arts));\r\n          setBackdrop(false);\r\n        });\r\n      } else {\r\n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/art/read-by-prixer\";\r\n        const body = {\r\n          username: props.prixerUsername || globalParams.get('prixer')\r\n        }\r\n        axios.post(base_url, body)\r\n        .then(response =>{\r\n          setTiles(utils.shuffle(response.data.arts));\r\n          setBackdrop(false);\r\n        });\r\n      }\r\n    } else if(searchValue){\r\n      const base_url= process.env.REACT_APP_BACKEND_URL + \"/art/read-by-query\";\r\n      const params = {\r\n        text: searchValue\r\n      }\r\n      axios.get(base_url, {params})\r\n      .then(response =>{\r\n        setTiles(utils.shuffle(response.data.arts));\r\n        setBackdrop(false);\r\n      });\r\n    } else {\r\n      const base_url= process.env.REACT_APP_BACKEND_URL + \"/art/read-all\";\r\n      axios.get(base_url)\r\n      .then(response =>{\r\n        setTiles(utils.shuffle(response.data.arts));\r\n        setBackdrop(false);\r\n      });\r\n    }\r\n  }, [searchValue]);\r\n\r\nconst handleFullImage = (e, tile)=> {\r\n  history.push({pathname:\"/\"+tile.prixerUsername+'/art/'+e.target.id});\r\n}\r\n\r\nconst searchPhotos = (e, queryValue) => {\r\n  setSearchValue(queryValue);\r\n  if(props.prixerUsername || globalParams.get('prixer')){\r\n    if(globalParams.get('prixer')){\r\n      history.push({pathname:'/galeria/s?prixer='+globalParams.get('prixer')+'&name='+queryValue});\r\n    } else {\r\n      history.push({pathname:'/galeria/s?prixer='+props.prixerUsername+'&name='+queryValue});\r\n    }\r\n  } else {\r\n    history.push({pathname:'/galeria/s?name='+queryValue});\r\n  }\r\n  e.preventDefault();\r\n};\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <Backdrop className={classes.backdrop} open={backdrop}>\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n        <SearchBar searchPhotos={searchPhotos} searchValue={searchValue} setSearchValue={setSearchValue}/>\r\n      <GridList cellSize={\"auto\"}  className={classes.gridList} cols={isDesktop ? 4 : 2 } >\r\n         {tiles ?\r\n         tiles.map((tile) => (\r\n          <GridListTile key={tile.artId} cols={1} onClick={(e)=>{handleFullImage(e, tile)}} className={classes.img}>\r\n            <Img\r\n            placeholder=\"/imgLoading.svg\"\r\n            style={{ backgroundColor: \"#eeeeee\", height: '100%' }}\r\n            src={tile.squareThumbUrl}\r\n            debounce={1000}\r\n            cache\r\n            error='/imgError.svg'\r\n            // srcSet={tile.smallThumbUrl + ' 600w, ' + tile.mediumThumbUrl + ' 850w, ' + tile.largeThumbUrl + ' 1300w'}\r\n            // sizes=\"(min-width: 1600px) 850px, (min-width: 960px) 450px, (min-width: 640px) 400px, 200px\"\r\n            sizes=\"(min-width: 1600px) 850px, (min-width: 960px) 450px, (min-width: 640px) 200px, (min-width: 375px) 80px\"\r\n            alt={tile.title}\r\n            id={tile.artId}\r\n            />\r\n          </GridListTile>\r\n        ))\r\n        :\r\n        <h1>Pronto encontrarás todo el arte que buscas.</h1>\r\n      }\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\appBar\\appBar.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\prixerOptions\\prixerOptions.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\services.js",["379","380","381","382","383","384","385","386","387","388","389","390"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\userData\\userData.jsx",["391","392"],"// Debo hacer los unit y functional tests.\r\n// Debo migrar los states a Redux.\r\n\r\nimport React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useState, useEffect } from \"react\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport axios from \"axios\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport InstagramIcon from \"@material-ui/icons/Instagram\";\r\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  loading: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n    marginLeft: \"50vw\",\r\n    marginTop: \"50vh\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    paddingTop: 73,\r\n    width: \"100%\",\r\n    display: \"grid\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: \"auto\",\r\n  },\r\n  image: {\r\n    width: 128,\r\n    height: 128,\r\n  },\r\n  snackbar: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      bottom: 90,\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  img: {\r\n    margin: \"auto\",\r\n    display: \"block\",\r\n    maxWidth: \"100%\",\r\n    maxHeight: \"100%\",\r\n  },\r\n  avatar: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    borderStyle: \"solid\",\r\n    borderWidth: 1,\r\n    borderColor: \"#000\",\r\n    backgroundColor: \"#fff\",\r\n    width: \"160px\",\r\n    height: \"160px\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nexport default function UserData(props) {\r\n  const classes = useStyles();\r\n  const [prixerDataState, setPrixerDataState] = useState(\"read\");\r\n  const [username, setUsername] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [firstName, setFirstName] = useState();\r\n  const [lastName, setLastName] = useState();\r\n  const [specialtyArt, setSpecialtyArt] = useState();\r\n  const [instagram, setInstagram] = useState();\r\n  const [facebook, setFacebook] = useState();\r\n  const [twitter, setTwitter] = useState();\r\n  const [description, setDescription] = useState();\r\n  const [dateOfBirth, setDateOfBirth] = useState();\r\n  const [phone, setPhone] = useState();\r\n  const [country, setCountry] = useState();\r\n  const [city, setCity] = useState(\"\");\r\n  const [ready, setReady] = useState(false);\r\n  const [prixerExists, setPrixerExists] = useState(false);\r\n  const [avatarObj, setAvatarObj] = useState(\"\");\r\n  const [profilePic, setProfilePic] = useState(\"\");\r\n  const [inputChange, setInputChange] = useState(false);\r\n  const [backdrop, setBackdrop] = useState(true);\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"md\"));\r\n\r\n  function getStyles(specialty, specialtyArt, theme) {\r\n    return {\r\n      fontWeight:\r\n        specialty.indexOf(specialty) === -1\r\n          ? theme.typography.fontWeightRegular\r\n          : theme.typography.fontWeightMedium,\r\n    };\r\n  }\r\n\r\n  useEffect(() => {\r\n    const base_url = process.env.REACT_APP_BACKEND_URL + \"/prixer/read\";\r\n    const data = {\r\n      username: props.prixerUsername,\r\n    };\r\n\r\n    axios\r\n      .post(base_url, data)\r\n      .then((response) => {\r\n        setUsername(response.data.username);\r\n        setEmail(response.data.email);\r\n        setFirstName(response.data.firstName);\r\n        setLastName(response.data.lastName);\r\n        setSpecialtyArt(response.data.specialtyArt);\r\n        setInstagram(response.data.instagram);\r\n        setFacebook(response.data.facebook);\r\n        setTwitter(response.data.twitter);\r\n        setDescription(response.data.description);\r\n        setDateOfBirth(response.data.dateOfBirth);\r\n        setPhone(response.data.phone);\r\n        setCountry(response.data.country);\r\n        setCity(response.data.city);\r\n        setAvatarObj(response.data.avatar);\r\n        setProfilePic(response.data.avatar);\r\n        setReady(true);\r\n        setBackdrop(false);\r\n        setPrixerExists(true);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, [props.prixerUsername]);\r\n\r\n  const handleProfileDataEdit = async () => {\r\n    if (prixerDataState === \"edit\") {\r\n      setBackdrop(true);\r\n      var formData = new FormData();\r\n      if (inputChange) {\r\n        formData.append(\"avatar\", profilePic);\r\n      }\r\n      formData.append(\"username\", username);\r\n      formData.append(\"firstName\", firstName);\r\n      formData.append(\"email\", email);\r\n      formData.append(\"lastName\", lastName);\r\n      formData.append(\"specialtyArt\", specialtyArt);\r\n      formData.append(\"instagram\", instagram);\r\n      formData.append(\"facebook\", facebook);\r\n      formData.append(\"twitter\", twitter);\r\n      formData.append(\"description\", description);\r\n      formData.append(\"dateOfBirth\", dateOfBirth);\r\n      formData.append(\"phone\", phone);\r\n      formData.append(\"country\", country);\r\n      formData.append(\"city\", city);\r\n\r\n      const base_url = process.env.REACT_APP_BACKEND_URL + \"/prixer/update\";\r\n      const response = await axios.post(base_url, formData, {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      });\r\n      if (response.data) {\r\n        setUsername(response.data.username);\r\n        setEmail(response.data.email);\r\n        setFirstName(response.data.firstName);\r\n        setLastName(response.data.lastName);\r\n        setSpecialtyArt(response.data.specialtyArt);\r\n        setInstagram(response.data.instagram);\r\n        setFacebook(response.data.facebook);\r\n        setTwitter(response.data.twitter);\r\n        setDescription(response.data.description);\r\n        setDateOfBirth(response.data.dateOfBirth);\r\n        setPhone(response.data.phone);\r\n        setCountry(response.data.country);\r\n        setCity(response.data.city);\r\n        setAvatarObj(response.data.avatar);\r\n        setProfilePic(response.data.avatar);\r\n        setReady(true);\r\n        setBackdrop(false);\r\n        setPrixerExists(true);\r\n        setPrixerDataState(\"read\");\r\n      } else {\r\n        setReady(true);\r\n        setBackdrop(false);\r\n      }\r\n    } else {\r\n      setPrixerDataState(\"edit\");\r\n    }\r\n  };\r\n\r\n  const onImageChange = async (e) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      setInputChange(true);\r\n      setAvatarObj(URL.createObjectURL(e.target.files[0]));\r\n      setProfilePic(e.target.files[0]);\r\n    }\r\n  };\r\n  const handleChange = (e) => {\r\n    setSpecialtyArt(e.target.value);\r\n  };\r\n  return prixerExists ? (\r\n    <div className={classes.root}>\r\n      <Backdrop className={classes.backdrop} open={backdrop}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Paper\r\n        className={classes.paper}\r\n        style={{ width: isDesktop ? \"50%\" : \"100%\" }}\r\n      >\r\n        {prixerDataState === \"read\" && (\r\n          <>\r\n            <Box style={{ textAlign: \"end\", marginBottom: \"4px\" }}>\r\n              {JSON.parse(localStorage.getItem(\"token\")) &&\r\n                JSON.parse(localStorage.getItem(\"token\")).username ===\r\n                  username && (\r\n                  <IconButton\r\n                    title=\"Profile Edit\"\r\n                    color=\"primary\"\r\n                    component=\"span\"\r\n                    onClick={handleProfileDataEdit}\r\n                  >\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                )}\r\n            </Box>\r\n            <Grid container spacing={2}>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                sm={4}\r\n                md={4}\r\n                lg={4}\r\n                xl={4}\r\n                style={{ marginLeft: 15 }}\r\n              >\r\n                <Box\r\n                  style={{\r\n                    marginBottom: \"4px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                  }}\r\n                >\r\n                  {avatarObj ? (\r\n                    <Avatar className={classes.avatar}>\r\n                      <label htmlFor=\"file-input\">\r\n                        <img\r\n                          src={profilePic}\r\n                          alt=\"Prixer profile avatar\"\r\n                          style={{ maxHeight: 200 }}\r\n                        />\r\n                      </label>\r\n                    </Avatar>\r\n                  ) : (\r\n                    JSON.parse(localStorage.getItem(\"token\")) &&\r\n                    JSON.parse(localStorage.getItem(\"token\")).username ===\r\n                      username && (\r\n                      <Avatar className={classes.avatar}>\r\n                        <label htmlFor=\"file-input\">\r\n                          <img\r\n                            src=\"/PrixLogo.png\"\r\n                            alt=\"Prixer profile avatar\"\r\n                            style={{ maxHeight: 200, height: 120 }}\r\n                            onClick={handleProfileDataEdit}\r\n                          />\r\n                        </label>\r\n                      </Avatar>\r\n                    )\r\n                  )}\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6} md={6} lg={6} xl={6}>\r\n                <Box\r\n                  display={\"flex\"}\r\n                  style={{\r\n                    marginBottom: \"4px\",\r\n                    justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                  }}\r\n                >\r\n                  <Typography variant=\"body1\">\r\n                    {specialtyArt?.map((specialty, index) =>\r\n                      specialtyArt?.length === index + 1\r\n                        ? specialty\r\n                        : `${specialty}, `\r\n                    )}\r\n                  </Typography>\r\n                </Box>\r\n                <Box\r\n                  display={\"flex\"}\r\n                  style={{\r\n                    marginBottom: \"4px\",\r\n                    justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                  }}\r\n                >\r\n                  <Typography variant=\"body1\" color=\"textSecondary\">\r\n                    {username}\r\n                  </Typography>\r\n                </Box>\r\n                <Box\r\n                  display={\"flex\"}\r\n                  style={{\r\n                    marginBottom: \"4px\",\r\n                    justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                  }}\r\n                >\r\n                  <Typography>{description}</Typography>\r\n                </Box>\r\n                <Box\r\n                  display={\"flex\"}\r\n                  style={{\r\n                    marginBottom: \"4px\",\r\n                    justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <InstagramIcon style={{ marginRight: \"4px\" }} />\r\n                  <a\r\n                    href={\"https://www.instagram.com/\" + instagram}\r\n                    style={{ textDecoration: \"none\", color: \"#d33f49\" }}\r\n                    target=\"_blank\"\r\n                  >\r\n                    {instagram}\r\n                  </a>\r\n                </Box>\r\n                <Box\r\n                  display={\"flex\"}\r\n                  style={{\r\n                    marginBottom: \"4px\",\r\n                    justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  {facebook && (\r\n                    <>\r\n                      <FacebookIcon style={{ marginRight: \"4px\" }} />\r\n                      <a\r\n                        href={\"https://www.facebook.com/\" + facebook}\r\n                        style={{ textDecoration: \"none\", color: \"#d33f49\" }}\r\n                      >\r\n                        {facebook}\r\n                      </a>\r\n                    </>\r\n                  )}\r\n                </Box>\r\n                <Box\r\n                  display={\"flex\"}\r\n                  style={{\r\n                    marginBottom: \"4px\",\r\n                    justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  {twitter && (\r\n                    <>\r\n                      <TwitterIcon style={{ marginRight: \"4px\" }} />\r\n                      <a\r\n                        href={\"https://www.twitter.com/\" + twitter}\r\n                        style={{ textDecoration: \"none\", color: \"#d33f49\" }}\r\n                      >\r\n                        {twitter}\r\n                      </a>\r\n                    </>\r\n                  )}\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </>\r\n        )}\r\n        {prixerDataState === \"edit\" && (\r\n          <>\r\n            <Box style={{ textAlign: \"end\", marginBottom: \"4px\" }}>\r\n              {JSON.parse(localStorage.getItem(\"token\")) &&\r\n                JSON.parse(localStorage.getItem(\"token\")).username ===\r\n                  username && (\r\n                  <Button\r\n                    color=\"primary\"\r\n                    onClick={handleProfileDataEdit}\r\n                    variant=\"contained\"\r\n                    style={{ marginBottom: \"8px\" }}\r\n                  >\r\n                    Editar\r\n                  </Button>\r\n                )}\r\n            </Box>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n                <Box>\r\n                  <Box\r\n                    marginBottom={2}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    {avatarObj ? (\r\n                      <Avatar className={classes.avatar}>\r\n                        <label htmlFor=\"file-input\">\r\n                          <img\r\n                            src={avatarObj}\r\n                            alt=\"Prixer profile avatar\"\r\n                            style={{ maxHeight: 200 }}\r\n                          />\r\n                        </label>\r\n                        <input\r\n                          style={{ display: \"none\" }}\r\n                          accept=\"image/*\"\r\n                          id=\"file-input\"\r\n                          type=\"file\"\r\n                          onChange={onImageChange}\r\n                          required\r\n                        />\r\n                      </Avatar>\r\n                    ) : (\r\n                      <Avatar className={classes.avatar}>\r\n                        <label htmlFor=\"file-input\">\r\n                          <AddIcon\r\n                            style={{ width: 60, height: 60, color: \"#d33f49\" }}\r\n                          />\r\n                        </label>\r\n                        <input\r\n                          style={{ display: \"none\" }}\r\n                          accept=\"image/*\"\r\n                          id=\"file-input\"\r\n                          type=\"file\"\r\n                          onChange={onImageChange}\r\n                        />\r\n                      </Avatar>\r\n                    )}\r\n                  </Box>\r\n                  <Box style={{ marginBottom: \"8px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      label=\"Nombre\"\r\n                      value={firstName}\r\n                      onChange={(e) => {\r\n                        setFirstName(e.target.value);\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                  <Box style={{ marginBottom: \"8px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      variant=\"outlined\"\r\n                      label=\"Apellido\"\r\n                      value={lastName}\r\n                      onChange={(e) => {\r\n                        setLastName(e.target.value);\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                  <Box>\r\n                    <FormControl\r\n                      className={classes.formControl}\r\n                      style={{ width: \"100%\", marginBottom: 20 }}\r\n                    >\r\n                      <InputLabel id=\"demo-mutiple-name-label\">\r\n                        Especialidad\r\n                      </InputLabel>\r\n                      <Select\r\n                        labelId=\"demo-multiple-name-label\"\r\n                        id=\"demo-multiple-name\"\r\n                        multiple\r\n                        value={specialtyArt}\r\n                        onChange={(e) => handleChange(e)}\r\n                        MenuProps={MenuProps}\r\n                      >\r\n                        {[\"Fotografía\", \"Diseño\", \"Artes plásticas\"].map(\r\n                          (specialty) => (\r\n                            <MenuItem\r\n                              key={specialty}\r\n                              value={specialty}\r\n                              style={getStyles(specialty, specialtyArt, theme)}\r\n                            >\r\n                              {specialty}\r\n                            </MenuItem>\r\n                          )\r\n                        )}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box style={{ marginBottom: \"8px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"instagram\"\r\n                      variant=\"outlined\"\r\n                      label=\"Instagram\"\r\n                      onChange={(e) => {\r\n                        setInstagram(e.target.value);\r\n                      }}\r\n                      value={instagram}\r\n                    />\r\n                  </Box>\r\n                  <Box style={{ marginBottom: \"8px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"facebook\"\r\n                      variant=\"outlined\"\r\n                      label=\"Facebook\"\r\n                      onChange={(e) => {\r\n                        setFacebook(e.target.value);\r\n                      }}\r\n                      value={facebook}\r\n                    />\r\n                  </Box>\r\n                  <Box style={{ marginBottom: \"8px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"twitter\"\r\n                      variant=\"outlined\"\r\n                      label=\"Twitter\"\r\n                      onChange={(e) => {\r\n                        setTwitter(e.target.value);\r\n                      }}\r\n                      value={twitter}\r\n                    />\r\n                  </Box>\r\n                  <Box>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"description\"\r\n                      label=\"Descripción\"\r\n                      onChange={(e) => {\r\n                        setDescription(e.target.value);\r\n                      }}\r\n                      value={description}\r\n                      multiline\r\n                      item\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Paper>\r\n    </div>\r\n  ) : (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Backdrop className={classes.backdrop} open={backdrop}>\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} container>\r\n            <Grid item xs container direction=\"column\" spacing={2}>\r\n              <Grid item xs>\r\n                <Typography gutterBottom variant=\"subtitle1\">\r\n                  Increíble, pero cierto\r\n                </Typography>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  Este usuario no existe\r\n                </Typography>\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                  Inténtalo de nuevo | ig: Wrong\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\tabPreferences.jsx",["393"],"import { React, useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport CarouselAdmin from \"./preferencesCarousel\";\r\nimport Terms from \"./preferenceTerms\";\r\nimport TermsAndConditions from \"./preferenceTerms\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    \"margin-left\": \"60px\",\r\n  },\r\n}));\r\n\r\nexport default function SimpleTabs() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs value={value} onChange={handleChange}>\r\n          <Tab label=\"Carrusel\" />\r\n          <Tab label=\"Términos y condiciones\" />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <CarouselAdmin />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <TermsAndConditions />\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\orderServices.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\searchBar\\searchBar.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\prixerGrid\\prixerGrid.jsx",["394"],"import React, { useState, useEffect } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport utils from '../../utils/utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    // maxWidth: \"70%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: '100%',\r\n    height: 'auto'\r\n  },\r\n  img: {\r\n    width: '100%',\r\n    height: '100%'\r\n  },\r\n  icon: {\r\n    color: 'rgba(255, 255, 255, 0.54)',\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(8)\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '81.25%',\r\n    borderRadius: '50%',\r\n    margin: '28px'\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\n\r\nexport default function PrixerGrid(props) {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up('md'));\r\n  const isDeskTop = useMediaQuery(theme.breakpoints.up('sm'));\r\n  const [tiles, setTiles] = useState([]);\r\n  const history = useHistory();\r\n  const [backdrop, setBackdrop] = useState(true);\r\n\r\n\r\n  useEffect(()=> {\r\n    const base_url= process.env.REACT_APP_BACKEND_URL + \"/prixer/read-all-full\";\r\n\r\n    axios.get(base_url)\r\n      .then(response =>{\r\n        setTiles(utils.shuffle(response.data.prixers));\r\n        setBackdrop(false);\r\n    });\r\n}, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n    <Backdrop className={classes.backdrop} open={backdrop}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n    <Grid container spacing={1}>\r\n    {tiles &&\r\n    tiles.filter(tile => tile.avatar).map((tile) =>\r\n      (\r\n        isDesktop ?\r\n       <Grid item key={tile._id} xs={6} sm={6} md={3}>\r\n            <Card className={classes.card}>\r\n            <CardMedia\r\n                alt={tile.title}\r\n                height= '100'\r\n                image={tile.avatar}\r\n                className={classes.cardMedia}\r\n                title={tile.title}\r\n            />\r\n            <CardContent className={classes.cardContent}>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {tile.firstName} {tile.lastName}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h6\" component=\"h6\" style={{fontSize: 16}}>\r\n                  {tile.username} - {tile.specialty}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\" onClick={e => history.push({pathname:\"/\"+tile.username})}>\r\n                Explorar\r\n                </Button>\r\n            </CardActions>\r\n            </Card>\r\n        </Grid>\r\n        :\r\n         <Grid item key={tile._id} xs={12} sm={1} md={2}>\r\n              <Card className={classes.card}>\r\n              <CardMedia\r\n                  alt={tile.title}\r\n                  height= '100'\r\n                  image={tile.avatar}\r\n                  className={classes.cardMedia}\r\n                  title={tile.title}\r\n              />\r\n              <CardContent className={classes.cardContent}>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    {tile.firstName} {tile.lastName}\r\n                  </Typography>\r\n                  <Typography gutterBottom variant=\"h6\" component=\"h6\" style={{fontSize: 16}}>\r\n                    {tile.username} - {tile.specialty}\r\n                  </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                  <Button size=\"small\" color=\"primary\" onClick={e => history.push({pathname:\"/\"+tile.username})}>\r\n                  Explorar\r\n                  </Button>\r\n              </CardActions>\r\n              </Card>\r\n          </Grid>\r\n          ,\r\n        isDeskTop ?\r\n        <Grid item key={tile._id} xs={6} sm={6} md={3}>\r\n             <Card className={classes.card}>\r\n             <CardMedia\r\n                 alt={tile.title}\r\n                 height= '100'\r\n                 image={tile.avatar}\r\n                 className={classes.cardMedia}\r\n                 title={tile.title}\r\n             />\r\n             <CardContent className={classes.cardContent}>\r\n                 <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                   {tile.firstName} {tile.lastName}\r\n                 </Typography>\r\n                 <Typography gutterBottom variant=\"h6\" component=\"h6\" style={{fontSize: 16}}>\r\n                   {tile.username} - {tile.specialty}\r\n                 </Typography>\r\n             </CardContent>\r\n             <CardActions>\r\n                 <Button size=\"small\" color=\"primary\" onClick={e => history.push({pathname:\"/\"+tile.username})}>\r\n                 Explorar\r\n                 </Button>\r\n             </CardActions>\r\n             </Card>\r\n         </Grid>\r\n         :\r\n         <Grid item key={tile._id} xs={12} sm={1} md={6}>\r\n              <Card className={classes.card}>\r\n              <CardMedia\r\n                  alt={tile.title}\r\n                  height= '100'\r\n                  image={tile.avatar}\r\n                  className={classes.cardMedia}\r\n                  title={tile.title}\r\n              />\r\n              <CardContent className={classes.cardContent}>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    {tile.firstName} {tile.lastName}\r\n                  </Typography>\r\n                  <Typography gutterBottom variant=\"h6\" component=\"h6\" style={{fontSize: 16}}>\r\n                    {tile.username} - {tile.specialty}\r\n                  </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                  <Button size=\"small\" color=\"primary\" onClick={e => history.push({pathname:\"/\"+tile.username})}>\r\n                  Explorar\r\n                  </Button>\r\n              </CardActions>\r\n              </Card>\r\n          </Grid>\r\n\r\n    ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\simpleDialog\\simpleDialog.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\updateAdmin.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\readAdmins.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\disableAdmin.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\createAdmin.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\createConsumer.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\readProducts.jsx",["395","396"],"import React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from '../adminMain/Title';\r\nimport axios from 'axios';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nexport default function ReadProducts(props) {\r\n    const history = useHistory();\r\n    const [rows, setRows] = useState();\r\n\r\nuseEffect(()=> {\r\n  const base_url= process.env.REACT_APP_BACKEND_URL + \"/admin/product/read-all\";\r\n    axios.get(base_url)\r\n    .then(response =>{\r\n        setRows(response.data.products);\r\n    })\r\n    .catch(error =>{\r\n        console.log(error);\r\n    })\r\n},[]);\r\n\r\n  const handleActive = (product, action)=> {\r\n    props.setProduct(product);\r\n    history.push('/admin/product/'+action+'/'+product._id);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Productos</Title>\r\n        {\r\n        rows &&\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\"></TableCell>\r\n            <TableCell align=\"center\">Imagen</TableCell>\r\n            <TableCell align=\"center\">Nombre</TableCell>\r\n            <TableCell align=\"center\">Activo</TableCell>\r\n            <TableCell align=\"center\">Categoría</TableCell>\r\n            <TableCell align=\"center\">PVP desde-hasta</TableCell>\r\n            <TableCell align=\"center\">PVM desde-hasta</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n        {\r\n        rows &&\r\n          rows.map((row) => (\r\n            <TableRow key={row._id}>\r\n              <TableCell align=\"center\">\r\n                <Fab color=\"default\" style={{width: 35, height: 35}} aria-label=\"edit\" onClick={(e)=>{handleActive(row, 'update')}}>\r\n                  <EditIcon/>\r\n                </Fab>\r\n              </TableCell>\r\n              <TableCell align=\"center\"><img alt=\"thumb\" src={row.thumbUrl} style={{width: 50, height: 'auto'}}/></TableCell>\r\n              <TableCell align=\"center\">{row.name}</TableCell>\r\n              <TableCell align=\"center\">\r\n                <Checkbox \r\n                  disabled\r\n                  checked={row.active}\r\n                  color=\"primary\" \r\n                  inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                />\r\n              </TableCell>\r\n              <TableCell align=\"center\">{row.category}</TableCell>\r\n              <TableCell align=\"center\">{row.publicPrice.from}-{row.publicPrice.to}</TableCell>\r\n              <TableCell align=\"center\">{row.prixerPrice.from}-{row.prixerPrice.to}</TableCell>\r\n            </TableRow>\r\n          ))\r\n        }\r\n        </TableBody>\r\n      </Table>\r\n} \r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\createProduct.jsx",["397","398"],"import React from 'react';\r\nimport {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Title from '../adminMain/Title';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import OutlinedInput from '@material-ui/core/OutlinedInput';\r\n// import InputLabel from '@material-ui/core/InputLabel';\r\n// import InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n// import Visibility from '@material-ui/icons/Visibility';\r\n// import VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport clsx from 'clsx';\r\n// import validations from '../../utils/validations';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default function CreateProduct() {\r\n    const classes = useStyles();\r\n    const [ active, setActive ] = useState(false);\r\n    const [ productName, setProductName ] = useState('');\r\n    const [ description, setDescription ] = useState('');\r\n    const [ category, setCategory ] = useState('');\r\n    const [ considerations, setConsiderations ] = useState('');\r\n    // const [fixedPublicPrice, setFixedPublicPrice] = useState('');\r\n    const [fromPublicPrice, setFromPublicPrice] = useState('');\r\n    const [ toPublicPrice, setToPublicPrice ] = useState('');\r\n    // const [ fixedPrixerPrice, setFixedPrixerPrice ] = useState('');\r\n    const [ fromPrixerPrice, setFromPrixerPrice ] = useState('');\r\n    const [ toPrixerPrice, setToPrixerPrice ] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [buttonState, setButtonState] = useState(false);\r\n    const [ hasSpecialVar, setHasSpecialVar ] = useState(false);\r\n    const [ specialVars, setSpecialVars ] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const [ thumbUrl, setThumbUrl ] = useState('');\r\n\r\n    //Error states.\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    const [snackBarError, setSnackBarError] = useState(false);\r\n\r\n\r\n    const handleSubmit = async (e)=> {\r\n      e.preventDefault();\r\n      if(!active &&\r\n        !productName &&\r\n        !description &&\r\n        !category &&\r\n        !considerations &&\r\n        // !fixedPublicPrice &&\r\n        !fromPublicPrice &&\r\n        !toPublicPrice &&\r\n        // !fixedPrixerPrice &&\r\n        !fromPrixerPrice &&\r\n        !toPrixerPrice &&\r\n        !thumbUrl){\r\n        setErrorMessage('Por favor completa todos los campos requeridos.');\r\n        setSnackBarError(true);\r\n        e.preventDefault();\r\n      } else {\r\n        setLoading(true);\r\n        setButtonState(true);\r\n        \r\n        const data = {\r\n            'thumbUrl': thumbUrl,\r\n            'active' : active,\r\n            'name' : productName,\r\n            'description' : description,\r\n            'category' : category,\r\n            'considerations' : considerations,\r\n            publicPrice: {\r\n                'from': fromPublicPrice,\r\n                'to': toPublicPrice,\r\n            },\r\n            prixerPrice: {\r\n                'from': fromPrixerPrice,\r\n                'to': toPrixerPrice,\r\n            },\r\n            hasSpecialVar: hasSpecialVar,\r\n            specialVars: [\r\n              {\r\n                'name': '',\r\n                'isSpecialVarVisible': ''\r\n              }\r\n            ]\r\n        }\r\n        \r\n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/product/create\";\r\n        const response = await axios.post(base_url,data)\r\n        if(response.data.success === false){\r\n          setLoading(false);\r\n          setButtonState(false);\r\n          setErrorMessage(response.data.message);\r\n          setSnackBarError(true);\r\n        } else {\r\n          setErrorMessage('Registro de producto exitoso.');\r\n          setSnackBarError(true);\r\n          setActive('');\r\n          setThumbUrl('');\r\n          setProductName('');\r\n          setDescription('');\r\n          setCategory('');\r\n          setConsiderations('');\r\n        //   setFixedPublicPrice('');\r\n          setFromPublicPrice('');\r\n          setToPublicPrice('');\r\n        //   setFixedPrixerPrice('');\r\n          setFromPrixerPrice('');\r\n          setToPrixerPrice('');\r\n          history.push('/admin/product/read');\r\n        }\r\n      }\r\n    }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    {\r\n        <Backdrop className={classes.backdrop} open={loading}>\r\n            <CircularProgress />\r\n        </Backdrop>\r\n    }\r\n      <Title>Productos</Title>\r\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n            <Grid container spacing={2}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            display=\"inline\"\r\n                            id=\"thumbUrl\"\r\n                            label=\"ThumbUrl\"\r\n                            name=\"thumbUrl\"\r\n                            autoComplete=\"thumbUrl\"\r\n                            value={thumbUrl}\r\n                            onChange={(e) => {setThumbUrl(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid container xs={6}>\r\n                      <Grid item xs={6}>\r\n                          <Checkbox \r\n                              checked={active}\r\n                              color=\"primary\" \r\n                              inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                              onChange={()=>{active?setActive(false):setActive(true)}}\r\n                          /> Habilitado / Visible\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                          <Checkbox\r\n                              checked={hasSpecialVar}\r\n                              color=\"primary\" \r\n                              inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                              onChange={()=>{hasSpecialVar?setHasSpecialVar(false):setHasSpecialVar(true)}}\r\n                          /> ¿Tiene variables especiales?\r\n                      </Grid>\r\n                    </Grid>\r\n                    {\r\n                    hasSpecialVar &&\r\n                    <Grid container xs={12} spacing={2}>\r\n                        <Grid container style={{marginTop: 20}}>\r\n                            <h3>Variables especiales</h3>\r\n                        </Grid>\r\n                        <>\r\n                        {   \r\n                        specialVars &&\r\n                            specialVars.map((specialVar, i)=>(\r\n                            <Grid container spacing={2} xs={12} style={{marginBottom: 10}}>\r\n                                <Grid item xs={12} md={5}>\r\n                                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        fullWidth\r\n                                        id={specialVar}\r\n                                        label=\"Nombre\"\r\n                                        name=\"specialVar\"\r\n                                        autoComplete=\"specialVar\"\r\n                                        value={specialVar.name}\r\n                                        onChange={(e) => {\r\n                                            setSpecialVars(specialVar.slice(0,i).concat({'name': e.target.value, 'isSpecialVarVisible': specialVars.isSpecialVarVisible}).concat(specialVars.slice(i+1,)));\r\n                                        }}\r\n                                    />\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={5}>\r\n                                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                                    <Checkbox\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        fullWidth\r\n                                        id=\"isSpecialVarVisible\"\r\n                                        label=\"Visible\"\r\n                                        name=\"isSpecialVarVisible\"\r\n                                        autoComplete=\"isSpecialVarVisible\"\r\n                                        value={specialVar.isSpecialVarVisible}\r\n                                        onChange={(e) => {\r\n                                          setSpecialVars(specialVars.slice(0,i).concat({'name': specialVars.name, 'isSpecialVarVisible': e.target.value}).concat(specialVars.slice(i+1,)));\r\n                                        }}\r\n                                    />\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={2}>\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={()=>{ setSpecialVars(specialVars.slice(0, i).concat(specialVars.slice(i+1,)))}} disabled={buttonState} style={{ marginTop: 20}}>\r\n                                    -\r\n                                </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                            ))\r\n                            }\r\n                            <Button variant=\"contained\" color=\"default\" onClick={()=>{setSpecialVars(specialVars.concat({ name:'', isSpecialVarVisible:'' }))}} disabled={buttonState} style={{ marginTop: 20}}>\r\n                                +\r\n                            </Button>\r\n                          </>\r\n                    </Grid>\r\n                    }\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            display=\"inline\"\r\n                            id=\"productName\"\r\n                            label=\"Nombre\"\r\n                            name=\"productName\"\r\n                            autoComplete=\"productName\"\r\n                            value={productName}\r\n                            onChange={(e) => {setProductName(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            display=\"inline\"\r\n                            fullWidth\r\n                            id=\"category\"\r\n                            label=\"Categoría\"\r\n                            name=\"category\"\r\n                            autoComplete=\"category\"\r\n                            value={category}\r\n                            onChange={(e) => {setCategory(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            multiline\r\n                            fullWidth\r\n                            rows={2}\r\n                            id=\"description\"\r\n                            label=\"Descripción\"\r\n                            name=\"description\"\r\n                            autoComplete=\"description\"\r\n                            value={description}\r\n                            onChange={(e) => {setDescription(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            multiline\r\n                            rows={2}\r\n                            id=\"considerations\"\r\n                            label=\"Consideraciones\"\r\n                            name=\"considerations\"\r\n                            autoComplete=\"considerations\"\r\n                            value={considerations}\r\n                            onChange={(e) => {setConsiderations(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container style={{marginTop: 20}}>\r\n                    <Title>PVP</Title>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                {/* <Grid item xs={4} md={4}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fixedPublicPrice\"\r\n                        label=\"Fijo\"\r\n                        name=\"fixedPublicPrice\"\r\n                        autoComplete=\"fixedPublicPrice\"\r\n                        value={fixedPublicPrice}\r\n                        onChange={(e) => {setFixedPublicPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid> */}\r\n                <Grid item xs={4} md={5}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fromPublicPrice\"\r\n                        label=\"Desde\"\r\n                        name=\"fromPublicPrice\"\r\n                        autoComplete=\"fromPublicPrice\"\r\n                        value={fromPublicPrice}\r\n                        onChange={(e) => {setFromPublicPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={4} md={5}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"toPublicPrice\"\r\n                        label=\"Hasta\"\r\n                        name=\"toPublicPrice\"\r\n                        autoComplete=\"toPublicPrice\"\r\n                        value={toPublicPrice}\r\n                        onChange={(e) => {setToPublicPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                </Grid>\r\n                <Grid container style={{marginTop: 20}}>\r\n                    <Title>PVM</Title>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                {/* <Grid item xs={4} md={4}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fixedPrixerPrice\"\r\n                        label=\"Fijo\"\r\n                        name=\"fixedPrixerPrice\"\r\n                        autoComplete=\"fixedPrixerPrice\"\r\n                        value={fixedPrixerPrice}\r\n                        onChange={(e) => {setFixedPrixerPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid> */}\r\n                <Grid item xs={4} md={5}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fromPrixerPrice\"\r\n                        label=\"Desde\"\r\n                        name=\"fromPrixerPrice\"\r\n                        autoComplete=\"fromPrixerPrice\"\r\n                        value={fromPrixerPrice}\r\n                        onChange={(e) => {setFromPrixerPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={4} md={5}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"toPrixerPrice\"\r\n                        label=\"Hasta\"\r\n                        name=\"toPrixerPrice\"\r\n                        autoComplete=\"toPrixerPrice\"\r\n                        value={toPrixerPrice}\r\n                        onChange={(e) => {setToPrixerPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                </Grid>\r\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={buttonState} style={{ marginTop: 20}}>\r\n                Crear\r\n              </Button>\r\n            </Grid>\r\n        </form>\r\n        <Snackbar\r\n          open={snackBarError}\r\n          autoHideDuration={1000}\r\n          message={errorMessage}\r\n          className={classes.snackbar}\r\n        />\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\updateProduct.jsx",["399","400","401","402","403"],"import React from 'react';\r\nimport {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Title from '../adminMain/Title';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport clsx from 'clsx';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Variants from '../adminMain/products/variants';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  form: {\r\n      height: 550\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default function UpdateAdmin(props) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [ active, setActive ] = useState(props.product.active);\r\n    const [ productName, setProductName ] = useState(props.product.name);\r\n    const [ description, setDescription ] = useState(props.product.description);\r\n    const [ category, setCategory ] = useState(props.product.category);\r\n    const [ considerations, setConsiderations ] = useState(props.product.considerations);\r\n    // const [fixedPublicPrice, setFixedPublicPrice] = useState('');\r\n    const [fromPublicPrice, setFromPublicPrice] = useState(props.product.publicPrice.from);\r\n    const [ toPublicPrice, setToPublicPrice ] = useState(props.product.publicPrice.to);\r\n    // const [ fixedPrixerPrice, setFixedPrixerPrice ] = useState('');\r\n    const [ fromPrixerPrice, setFromPrixerPrice ] = useState(props.product.prixerPrice.from);\r\n    const [ toPrixerPrice, setToPrixerPrice ] = useState(props.product.prixerPrice.to);\r\n    const [loading, setLoading] = useState(false);\r\n    const [buttonState, setButtonState] = useState(false);\r\n    const [showVariants, setShowVariants] = useState(false);\r\n    const [ activeVCrud, setActiveVCrud ] = useState('read');\r\n    const [ hasSpecialVar, setHasSpecialVar ] = useState(props.product.hasSpecialVar || false);\r\n    \r\n    const [ thumbUrl, setThumbUrl ] = useState(props.product.thumbUrl);\r\n\r\n    //Error states.\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    const [snackBarError, setSnackBarError] = useState(false);\r\n\r\n\r\n    const handleSubmit = async (e)=> {\r\n      e.preventDefault();\r\n      if(!active && \r\n        !productName && \r\n        !description && \r\n        !category && \r\n        !considerations && \r\n        // !fixedPublicPrice &&\r\n        !fromPublicPrice &&\r\n        !toPublicPrice && \r\n        // !fixedPrixerPrice &&\r\n        !fromPrixerPrice &&\r\n        !toPrixerPrice &&\r\n        !thumbUrl){\r\n        setErrorMessage('Por favor completa todos los campos requeridos.');\r\n        setSnackBarError(true);\r\n        e.preventDefault();\r\n      } else {\r\n        setLoading(true);\r\n        setButtonState(true);\r\n        \r\n        const data = {\r\n            '_id': props.product._id,\r\n            'thumbUrl': thumbUrl,\r\n            'active' : active || false,\r\n            'name' : productName,\r\n            'description' : description,\r\n            'category' : category,\r\n            'considerations' : considerations,\r\n            publicPrice: {\r\n                'from': fromPublicPrice,\r\n                'to': toPublicPrice,\r\n            },\r\n            prixerPrice: {\r\n                'from': fromPrixerPrice,\r\n                'to': toPrixerPrice,\r\n            },\r\n            hasSpecialVar: hasSpecialVar\r\n        }\r\n        \r\n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/product/update\";\r\n        const response = await axios.post(base_url,data);\r\n        if(response.data.success === false){\r\n          setLoading(false);\r\n          setButtonState(false);\r\n          setErrorMessage(response.data.message);\r\n          setSnackBarError(true);\r\n        } else {\r\n          setErrorMessage('Actualización de producto exitosa.');\r\n          setSnackBarError(true);\r\n          history.push('/admin/product/read');\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    const handleVariantsClick = ()=> {\r\n        history.push({pathname:\"/admin/product/\"+props.product._id+\"/variant/read\"});\r\n        setShowVariants(true); \r\n        props.setProductEdit(false);\r\n    }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    {\r\n        <Backdrop className={classes.backdrop} open={loading}>\r\n            <CircularProgress />\r\n        </Backdrop>\r\n    }\r\n        {\r\n        showVariants ?\r\n        <>\r\n        <Grid container justify=\"left\">\r\n            <Grid item xs={2}>\r\n                <button href=\"#\" onClick={()=>{setShowVariants(false); props.setProductEdit(true);}}><h2 style={{color:\"rgba(191, 191, 191, 0.5)\", marginTop:0}}>Productos </h2></button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <button href=\"#\" onClick={()=>{setShowVariants(true); setActiveVCrud('read');}}><h2 style={{color:'#d33f49', marginTop:0}}>Variantes</h2></button>\r\n            </Grid>\r\n        </Grid>\r\n        <Variants product={props.product} activeVCrud={activeVCrud} setActiveVCrud={setActiveVCrud}/>\r\n        </>\r\n        :\r\n        <div>\r\n        <Grid container justify=\"left\">\r\n            <Grid item xs={2} style={{color:\"rgba(191, 191, 191, 0.5)\"}}>\r\n                <Title>Productos </Title>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <a onClick={handleVariantsClick}><h2 style={{color:\"rgba(191, 191, 191, 0.5)\", marginTop:0}}>Variantes</h2></a>\r\n            </Grid>\r\n        </Grid>\r\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n            <Grid container spacing={2}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            display=\"inline\"\r\n                            id=\"thumbUrl\"\r\n                            label=\"ThumbUrl\"\r\n                            name=\"thumbUrl\"\r\n                            autoComplete=\"thumbUrl\"\r\n                            value={thumbUrl}\r\n                            onChange={(e) => {setThumbUrl(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid container xs={6}>\r\n                      <Grid item xs={6}>\r\n                          <Checkbox \r\n                              checked={active}\r\n                              color=\"primary\" \r\n                              inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                              onChange={()=>{active?setActive(false):setActive(true)}}\r\n                          /> Habilitado / Visible\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                          <Checkbox\r\n                              checked={hasSpecialVar}\r\n                              color=\"primary\" \r\n                              inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                              onChange={()=>{hasSpecialVar?setHasSpecialVar(false):setHasSpecialVar(true)}}\r\n                          /> ¿Tiene variables especiales?\r\n                      </Grid>\r\n                    </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            display=\"inline\"\r\n                            id=\"productName\"\r\n                            label=\"Nombre\"\r\n                            name=\"productName\"\r\n                            autoComplete=\"productName\"\r\n                            value={productName}\r\n                            onChange={(e) => {setProductName(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            display=\"inline\"\r\n                            fullWidth\r\n                            id=\"category\"\r\n                            label=\"Categoría\"\r\n                            name=\"category\"\r\n                            autoComplete=\"category\"\r\n                            value={category}\r\n                            onChange={(e) => {setCategory(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            multiline\r\n                            fullWidth\r\n                            rows={2}\r\n                            id=\"description\"\r\n                            label=\"Descripción\"\r\n                            name=\"description\"\r\n                            autoComplete=\"description\"\r\n                            value={description}\r\n                            onChange={(e) => {setDescription(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            multiline\r\n                            rows={2}\r\n                            id=\"considerations\"\r\n                            label=\"Consideraciones\"\r\n                            name=\"considerations\"\r\n                            autoComplete=\"considerations\"\r\n                            value={considerations}\r\n                            onChange={(e) => {setConsiderations(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container style={{marginTop: 20}}>\r\n                    <Title>PVP</Title>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                {/* <Grid item xs={4} md={4}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fixedPublicPrice\"\r\n                        label=\"Fijo\"\r\n                        name=\"fixedPublicPrice\"\r\n                        autoComplete=\"fixedPublicPrice\"\r\n                        value={fixedPublicPrice}\r\n                        onChange={(e) => {setFixedPublicPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid> */}\r\n                <Grid item xs={4} md={5}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fromPublicPrice\"\r\n                        label=\"Desde\"\r\n                        name=\"fromPublicPrice\"\r\n                        autoComplete=\"fromPublicPrice\"\r\n                        value={fromPublicPrice}\r\n                        onChange={(e) => {setFromPublicPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={4} md={5}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"toPublicPrice\"\r\n                        label=\"Hasta\"\r\n                        name=\"toPublicPrice\"\r\n                        autoComplete=\"toPublicPrice\"\r\n                        value={toPublicPrice}\r\n                        onChange={(e) => {setToPublicPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                </Grid>\r\n                <Grid container style={{marginTop: 20}}>\r\n                    <Title>PVM</Title>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                {/* <Grid item xs={4} md={4}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fixedPrixerPrice\"\r\n                        label=\"Fijo\"\r\n                        name=\"fixedPrixerPrice\"\r\n                        autoComplete=\"fixedPrixerPrice\"\r\n                        value={fixedPrixerPrice}\r\n                        onChange={(e) => {setFixedPrixerPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid> */}\r\n                <Grid item xs={4} md={5}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fromPrixerPrice\"\r\n                        label=\"Desde\"\r\n                        name=\"fromPrixerPrice\"\r\n                        autoComplete=\"fromPrixerPrice\"\r\n                        value={fromPrixerPrice}\r\n                        onChange={(e) => {setFromPrixerPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={4} md={5}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"toPrixerPrice\"\r\n                        label=\"Hasta\"\r\n                        name=\"toPrixerPrice\"\r\n                        autoComplete=\"toPrixerPrice\"\r\n                        value={toPrixerPrice}\r\n                        onChange={(e) => {setToPrixerPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                </Grid>\r\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={buttonState} style={{ marginTop: 20}}>\r\n                Actualizar\r\n              </Button>\r\n            </Grid>\r\n        </form>\r\n        </div>\r\n        }\r\n        <Snackbar\r\n          open={snackBarError}\r\n          autoHideDuration={1000}\r\n          message={errorMessage}\r\n          className={classes.snackbar}\r\n        />\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\disableProduct.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\readConsumers.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\updateConsumer.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\createPaymentMethod.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\readPaymentMethods.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\updatePaymentMethod.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\createOrder.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\updateOrder.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\chart.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\deposits.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\orders.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\aspectRatioSelector.jsx",["404","405","406","407","408","409","410","411","412","413"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\preferenceTerms.jsx",["414","415"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\preferencesCarousel.jsx",["416","417","418","419","420","421","422","423","424","425","426","427","428","429"],"import { React, useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ViewCarouselIcon from \"@material-ui/icons/ViewCarousel\";\r\nimport { Button, InputLabel, Typography } from \"@material-ui/core\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  FilledInput,\r\n  Input,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport ImageListItem from \"@material-ui/core/ImageListItem\";\r\nimport ImageList from \"@material-ui/core/ImageList\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport HighlightOffOutlinedIcon from \"@material-ui/icons/HighlightOffOutlined\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  images: {\r\n    width: \"500px\",\r\n    height: \"300px\",\r\n    borderRadius: \"10px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  buttons: {\r\n    position: \"absolute\",\r\n    color: \"#ccc\",\r\n    display: \"flex\",\r\n    cursor: \"pointer\",\r\n    padding: \"10px\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    width: \"37vw\",\r\n  },\r\n  nameFile: {\r\n    width: \"300px\",\r\n    whiteSpace: \"nowrap\",\r\n    overflow: \"hidden\",\r\n    textOverflow: \"ellipsis\",\r\n    padding: \"10px\",\r\n    fontSize: \"1rem\",\r\n    margin: \"0\",\r\n    background: \"#cccc\",\r\n  },\r\n  loaderImage: {\r\n    width: \"50vw\",\r\n    height: \"60vh\",\r\n    marginLeft: \"220px\",\r\n    backgroundColor: \"#cccc\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  imageLoad: {\r\n    width: \"50vw\",\r\n    height: \"60vh\",\r\n  },\r\n  buttonImgLoader: {\r\n    color: \"#ccc\",\r\n    width: \"50vw\",\r\n    height: \"60vh\",\r\n    cursor: \"pointer\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    padding: \"10px\",\r\n    position: \"absolute\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nfunction CarouselAdmin(props) {\r\n  const [image, newImage] = useState({ file: \"\", _id: \"\" }); //enviar\r\n  const [imageLoader, setLoadImage] = useState({\r\n    loader: \"\",\r\n    filename: \"Subir imagenes\",\r\n  }); //loader de imagenes\r\n  const [images, newImages] = useState({ images: [] }); // lista de imagenes para renderizar\r\n  const [update, setUpdate] = useState(0); // modal de update\r\n  const [open, setOpen] = useState(false); //modal de eliminar -> confirm\r\n  const [Open, setOpenI] = useState(false); // Toast para imagen eliminada exitosamente\r\n  const [maxImage, setMaxImages] = useState(false); //Toast para maximo de 6 imagenes\r\n  const [create, setCreate] = useState(false); // toast para imagen creada y listada\r\n  const [createF, setCreateF] = useState(false);\r\n  const [loading, setLoading] = useState(false); // Loading\r\n\r\n  const classes = useStyle();\r\n\r\n  const maxImageOpen = () => {\r\n    setMaxImages(true);\r\n  };\r\n\r\n  const maxImageClose = () => {\r\n    setMaxImages(false);\r\n  };\r\n\r\n  const createOpen = () => {\r\n    setCreate(true);\r\n  };\r\n\r\n  const createClose = () => {\r\n    setCreate(false);\r\n  };\r\n\r\n  const createOpenF = () => {\r\n    setCreateF(true);\r\n  };\r\n\r\n  const createCloseF = () => {\r\n    setCreateF(false);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClickOpenI = () => {\r\n    setOpenI(true);\r\n  };\r\n\r\n  const handleCloseI = () => {\r\n    setOpenI(false);\r\n  };\r\n\r\n  const openUpdate = () => {\r\n    setUpdate(true);\r\n  };\r\n\r\n  const closeUpdate = () => {\r\n    setUpdate(false);\r\n  };\r\n\r\n  // CRUD\r\n  //Editar imagen:\r\n  const handleUpdate = async (x) => {\r\n    x.preventDefault();\r\n    setLoading(true);\r\n    const URI =\r\n      process.env.REACT_APP_BACKEND_URL +\r\n      \"/admin/preferences/carousel/\" +\r\n      image._id;\r\n    const formData = new FormData();\r\n    formData.append(\"newBannerImages\", image.file);\r\n    let res = await axios.put(URI, formData);\r\n    setLoadImage({\r\n      loader: \"\",\r\n      filename: \"Subir imagenes\",\r\n    });\r\n    newImage({\r\n      _id: \"\",\r\n      file: \"\",\r\n    });\r\n    setLoadImage(false);\r\n    openUpdate();\r\n    getImagesForTheCarousel();\r\n    closeUpdate();\r\n  };\r\n\r\n  // Crear imagen:\r\n  const handleSubmit = async (a) => {\r\n    a.preventDefault();\r\n    if (images.images[0].length >= 6) {\r\n      maxImageOpen();\r\n      setLoadImage({\r\n        loader: \"\",\r\n        filename: \"Subir imagenes\",\r\n      });\r\n    } else {\r\n      setLoading(true);\r\n      setLoadImage({\r\n        loader: \"\",\r\n        filename: \"Subir imagenes\",\r\n      });\r\n      const URI =\r\n        process.env.REACT_APP_BACKEND_URL + \"/admin/preferences/carousel\";\r\n      const newFormData = new FormData();\r\n      newFormData.append(\"bannerImages\", image.file);\r\n      let res = await axios.post(URI, newFormData);\r\n      createOpen();\r\n      newImage({\r\n        _id: \"\",\r\n        file: \"\",\r\n      });\r\n      setLoadImage(false);\r\n      createOpen();\r\n      getImagesForTheCarousel();\r\n    }\r\n  };\r\n\r\n  const deleteImage = async (d) => {\r\n    d.preventDefault();\r\n    handleClose();\r\n    setLoading(true);\r\n    const URI =\r\n      process.env.REACT_APP_BACKEND_URL +\r\n      \"/admin/preferences/carousel/\" +\r\n      image._id;\r\n    let res = await axios.delete(URI);\r\n    getImagesForTheCarousel();\r\n    handleClickOpenI();\r\n    setLoading(false);\r\n    handleCloseI();\r\n  };\r\n  //Preview de imagen antes de enviar\r\n  const convertToBase64 = (blob) => {\r\n    return new Promise((resolve) => {\r\n      var reader = new FileReader();\r\n      reader.onload = function () {\r\n        resolve(reader.result);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  };\r\n  // Actualizacion del estado para preview de imagen\r\n  const loadImage = async (e) => {\r\n    const file = e.target.files[0];\r\n    const resizedString = await convertToBase64(file);\r\n    setLoadImage({ loader: resizedString, filename: file.name });\r\n  };\r\n\r\n  //Cancelar subida de imagen\r\n  const cancelUploadImage = () => {\r\n    setLoadImage({ loader: \"\", filename: \"Subir imagenes\" });\r\n    newImage({ _id: \"\", file: \"\" });\r\n  };\r\n  //Tomar imagenes en array para ser listadas y renderizadas\r\n  const getImagesForTheCarousel = () => {\r\n    setLoading(true);\r\n    const URI = \"http://localhost:8000/admin/preferences/carousel\";\r\n    fetch(URI)\r\n      .then((res) =>\r\n        res\r\n          .json()\r\n          .then((data) => {\r\n            newImages({ images: [data.imagesCarousels] });\r\n          })\r\n          .catch((err) => console.error(`Your request is wrong: ${err}`))\r\n      )\r\n      .catch((err) => console.error(err));\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getImagesForTheCarousel();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Backdrop className={classes.backdrop} open={loading}>\r\n        <CircularProgress value={loading} style={{ marginTop: \"-250px\" }} />\r\n      </Backdrop>\r\n      <Grid>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            color: \"#bababa\",\r\n          }}\r\n        >\r\n          <ViewCarouselIcon />\r\n          <Typography style={{ fontSize: \"1.5rem\", padding: \"10px\" }}>\r\n            Edit carousel\r\n          </Typography>\r\n        </div>\r\n\r\n        <div className={classes.loaderImage}>\r\n          <Box className={classes.buttonImgLoader}>\r\n            {imageLoader.loader ? (\r\n              <HighlightOffOutlinedIcon\r\n                style={{ width: \"2rem\" }}\r\n                onClick={cancelUploadImage}\r\n              />\r\n            ) : (\r\n              <HighlightOffOutlinedIcon hidden />\r\n            )}\r\n          </Box>\r\n          {imageLoader.loader && (\r\n            <img\r\n              className={classes.imageLoad}\r\n              src={imageLoader.loader}\r\n              alt=\"+\"\r\n            ></img>\r\n          )}\r\n          {imageLoader.loader ? (\r\n            \"\"\r\n          ) : (\r\n            <h1 style={{ color: \"#e0e0e0\" }}>1300x700px</h1>\r\n          )}\r\n        </div>\r\n\r\n        <Box style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <FormControl>\r\n            <form\r\n              onSubmit={(s) => {\r\n                if (image._id != \"\") {\r\n                  handleUpdate(s);\r\n                } else {\r\n                  handleSubmit(s);\r\n                }\r\n              }}\r\n              encType=\"multipart/form-data\"\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-evenly\",\r\n                flexDirection: \"row\",\r\n                alignItems: \"center\",\r\n                width: \"80vw\",\r\n                padding: \"40px\",\r\n              }}\r\n            >\r\n              <Typography className={classes.nameFile} id=\"uploadImage\">\r\n                {imageLoader.filename}\r\n              </Typography>\r\n              <Button variant=\"contained\" component=\"label\">\r\n                Upload File\r\n                <input\r\n                  name=\"bannerImages\"\r\n                  type=\"file\"\r\n                  hidden\r\n                  onChange={(a) => {\r\n                    a.preventDefault();\r\n                    loadImage(a);\r\n                    newImage({\r\n                      _id: image._id,\r\n                      file: a.target.files[0],\r\n                    });\r\n                  }}\r\n                />\r\n              </Button>\r\n              <Button variant=\"outlined\" color=\"primary\" type=\"submit\">\r\n                Enviar\r\n              </Button>\r\n            </form>\r\n          </FormControl>\r\n\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"right\",\r\n            }}\r\n            open={create}\r\n            onClose={createClose}\r\n            autoHideDuration={5000}\r\n            message=\"Process sucessfull\"\r\n          />\r\n\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"right\",\r\n            }}\r\n            open={create}\r\n            onClose={createClose}\r\n            autoHideDuration={5000}\r\n            message=\"Process sucessfull\"\r\n          />\r\n\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"right\",\r\n            }}\r\n            open={createF}\r\n            onClose={createCloseF}\r\n            autoHideDuration={5000}\r\n            message=\"You must send a image\"\r\n          />\r\n\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"right\",\r\n            }}\r\n            open={update}\r\n            onClose={closeUpdate}\r\n            autoHideDuration={5000}\r\n            message=\"Process sucessfull\"\r\n          />\r\n        </Box>\r\n        <div>\r\n          <ImageList cols={2} rowHeight={300}>\r\n            {images.images[0] ? (\r\n              images.images[0].map((img, key_id) => (\r\n                <ImageListItem key={key_id}>\r\n                  <Box>\r\n                    <Box className={classes.buttons}>\r\n                      <Button\r\n                        variant=\"text\"\r\n                        style={{ color: \"white\" }}\r\n                        component=\"label\"\r\n                      >\r\n                        <input\r\n                          type=\"file\"\r\n                          name=\"newBannerImages\"\r\n                          hidden\r\n                          onChange={(a) => {\r\n                            a.preventDefault();\r\n                            loadImage(a);\r\n                            newImage({\r\n                              _id: img._id,\r\n                              file: a.target.files[0],\r\n                            });\r\n                          }}\r\n                        />\r\n                        <EditIcon />\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"text\"\r\n                        style={{ color: \"white\" }}\r\n                        onClick={handleClickOpen}\r\n                      >\r\n                        <HighlightOffOutlinedIcon\r\n                          onClick={() => {\r\n                            newImage({\r\n                              _id: img._id,\r\n                              file: image.file,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Button>\r\n                      <Dialog\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                        aria-labelledby=\"alert-dialog-title\"\r\n                        aria-describedby=\"alert-dialog-description\"\r\n                      >\r\n                        <DialogTitle id=\"alert-dialog-title\">\r\n                          {\"Estas seguro de eliminar esta imagen del carrusel?\"}\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                          <DialogContentText id=\"alert-dialog-description\">\r\n                            Esta imagen ya no se vera en el carrusel del banner\r\n                            principal\r\n                          </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                          <Button onClick={handleClose} color=\"primary\">\r\n                            Cancelar\r\n                          </Button>\r\n                          <Button\r\n                            onClick={(d) => {\r\n                              deleteImage(d);\r\n                            }}\r\n                            color=\"primary\"\r\n                          >\r\n                            Aceptar\r\n                          </Button>\r\n                        </DialogActions>\r\n                      </Dialog>\r\n\r\n                      <Snackbar\r\n                        anchorOrigin={{\r\n                          vertical: \"top\",\r\n                          horizontal: \"right\",\r\n                        }}\r\n                        open={update}\r\n                        onClose={closeUpdate}\r\n                        autoHideDuration={5000}\r\n                        message=\"Imagen borrada exitosamente\"\r\n                      />\r\n                    </Box>\r\n                    <a href={img.carouselImages[0]} target=\"_BLANK\">\r\n                      <img\r\n                        className={classes.images}\r\n                        title={img.carouselImages[0]}\r\n                        src={img.carouselImages[0]}\r\n                      ></img>\r\n                    </a>\r\n                  </Box>\r\n                </ImageListItem>\r\n              ))\r\n            ) : (\r\n              <Typography>\r\n                Que mal, parece que no tienes imagenes en el carrusel\r\n              </Typography>\r\n            )}\r\n          </ImageList>\r\n        </div>\r\n      </Grid>\r\n      <Dialog\r\n        open={maxImage}\r\n        onClose={maxImageClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Limite alcanzado\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Solo puedes agregar 6 imagenes al carrusel, procura eliminar algunas\r\n            imagenes o reemplazar\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={maxImageClose}>Aceptar</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CarouselAdmin;\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\consumerServices.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\Title.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\products\\variants.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\orderBasicInfo.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\orderDetails.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\cropImage.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\easyCropper.jsx",["430","431","432","433","434"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\variants\\readVariants.jsx",["435","436","437","438","439","440","441","442","443","444","445","446","447","448"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\variants\\createVariant.jsx",["449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\TestimonialsCrud\\Testimonials.jsx",["493","494","495","496","497","498","499","500","501","502","503","504"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\TestimonialsCrud\\TestimonialsFeed.jsx",["505","506","507"],"import { React, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardMedia: {\r\n    paddingTop: \"81.25%\",\r\n    borderRadius: \"50%\",\r\n    margin: \"28px\",\r\n  },\r\n  loading: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n    marginLeft: \"50vw\",\r\n    marginTop: \"50vh\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: \"15px\",\r\n    // marginBottom: \"20px\",\r\n  },\r\n  input: {\r\n    padding: \"2\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  avatar: {\r\n    width: 80,\r\n    height: 80,\r\n  },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nexport default function TestimonialsFeed() {\r\n  const classes = useStyles();\r\n  const [tiles, setTiles] = useState([]);\r\n  const theme = useTheme();\r\n\r\n  const readTestimonial = async () => {\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/testimonial/read-all\";\r\n    const res = await axios\r\n      .get(base_url)\r\n      .then((response) => {\r\n        setTiles(response.data.testimonials);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  useEffect(() => {\r\n    readTestimonial();\r\n  }, []);\r\n\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={2}\r\n      xs={12}\r\n      style={{\r\n        width: \"100%\",\r\n        padding: isMobile ? \"0px\" : \"18px\",\r\n        display: \"flex\",\r\n        textAlign: \"start\",\r\n      }}\r\n    >\r\n      {tiles.map(\r\n        (tile) =>\r\n          tile.status && (\r\n            <Grid item xs={12} sm={12} md={6} lg={4} xl={4}>\r\n              <Paper\r\n                className={classes.paper}\r\n                style={{\r\n                  padding: \"15px\",\r\n                }}\r\n              >\r\n                <Grid key={tile._id} style={{ width: \"100%\" }}>\r\n                  <Grid container spacing={1}>\r\n                    {/* {loading && (\r\n                  <div className={classes.loading}>\r\n                    <CircularProgress />\r\n                  </div>\r\n                )} */}\r\n                    <Grid marginBottom={2} style={{ width: \"100%\" }}>\r\n                      <Box style={{ display: \"flex\", paddingLeft: \"20px\" }}>\r\n                        <Avatar className={classes.avatar} src={tile.avatar} />\r\n                        <Box\r\n                          style={{\r\n                            paddingLeft:\r\n                              \"30px\" /*  Agregar padding para desktop  */,\r\n                          }}\r\n                        >\r\n                          <Typography>{tile.name}</Typography>\r\n                          <Typography variant={\"p\"} color={\"secondary\"}>\r\n                            {tile.type}\r\n                          </Typography>\r\n                        </Box>\r\n                      </Box>\r\n                      <Box\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          paddingTop: \"10px\",\r\n                        }}\r\n                      >\r\n                        <Typography variant={\"body2\"}>{tile.value}</Typography>\r\n                      </Box>\r\n                      <Box\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          paddingTop: \"8px\",\r\n                        }}\r\n                      >\r\n                        <Typography variant={\"body2\"} color=\"secondary\">\r\n                          {tile.footer}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n            </Grid>\r\n          )\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n",{"ruleId":"508","severity":1,"message":"509","line":31,"column":10,"nodeType":"510","messageId":"511","endLine":31,"endColumn":26},{"ruleId":"508","severity":1,"message":"512","line":32,"column":8,"nodeType":"510","messageId":"511","endLine":32,"endColumn":16},{"ruleId":"508","severity":1,"message":"513","line":33,"column":8,"nodeType":"510","messageId":"511","endLine":33,"endColumn":13},{"ruleId":"508","severity":1,"message":"514","line":96,"column":10,"nodeType":"510","messageId":"511","endLine":96,"endColumn":21},{"ruleId":"508","severity":1,"message":"515","line":100,"column":17,"nodeType":"510","messageId":"511","endLine":100,"endColumn":25},{"ruleId":"508","severity":1,"message":"516","line":102,"column":9,"nodeType":"510","messageId":"511","endLine":102,"endColumn":18},{"ruleId":"508","severity":1,"message":"517","line":104,"column":9,"nodeType":"510","messageId":"511","endLine":104,"endColumn":23},{"ruleId":"508","severity":1,"message":"518","line":113,"column":9,"nodeType":"510","messageId":"511","endLine":113,"endColumn":13},{"ruleId":"519","severity":1,"message":"520","line":179,"column":3,"nodeType":"510","endLine":179,"endColumn":12,"suggestions":"521"},{"ruleId":"522","replacedBy":"523"},{"ruleId":"524","replacedBy":"525"},{"ruleId":"508","severity":1,"message":"526","line":2,"column":8,"nodeType":"510","messageId":"511","endLine":2,"endColumn":14},{"ruleId":"508","severity":1,"message":"527","line":13,"column":8,"nodeType":"510","messageId":"511","endLine":13,"endColumn":15},{"ruleId":"508","severity":1,"message":"528","line":146,"column":10,"nodeType":"510","messageId":"511","endLine":146,"endColumn":16},{"ruleId":"508","severity":1,"message":"529","line":146,"column":18,"nodeType":"510","messageId":"511","endLine":146,"endColumn":27},{"ruleId":"508","severity":1,"message":"530","line":147,"column":10,"nodeType":"510","messageId":"511","endLine":147,"endColumn":19},{"ruleId":"508","severity":1,"message":"531","line":147,"column":21,"nodeType":"510","messageId":"511","endLine":147,"endColumn":33},{"ruleId":"508","severity":1,"message":"514","line":148,"column":10,"nodeType":"510","messageId":"511","endLine":148,"endColumn":21},{"ruleId":"508","severity":1,"message":"532","line":149,"column":22,"nodeType":"510","messageId":"511","endLine":149,"endColumn":35},{"ruleId":"508","severity":1,"message":"533","line":155,"column":10,"nodeType":"510","messageId":"511","endLine":155,"endColumn":16},{"ruleId":"508","severity":1,"message":"534","line":155,"column":18,"nodeType":"510","messageId":"511","endLine":155,"endColumn":27},{"ruleId":"508","severity":1,"message":"516","line":156,"column":9,"nodeType":"510","messageId":"511","endLine":156,"endColumn":18},{"ruleId":"535","severity":1,"message":"536","line":468,"column":13,"nodeType":"537","endLine":476,"endColumn":14},{"ruleId":"508","severity":1,"message":"538","line":1,"column":27,"nodeType":"510","messageId":"511","endLine":1,"endColumn":35},{"ruleId":"539","severity":1,"message":"540","line":240,"column":15,"nodeType":"541","messageId":"542","endLine":240,"endColumn":25},{"ruleId":"508","severity":1,"message":"543","line":8,"column":8,"nodeType":"510","messageId":"511","endLine":8,"endColumn":17},{"ruleId":"508","severity":1,"message":"544","line":63,"column":9,"nodeType":"510","messageId":"511","endLine":63,"endColumn":16},{"ruleId":"519","severity":1,"message":"545","line":251,"column":6,"nodeType":"546","endLine":251,"endColumn":8,"suggestions":"547"},{"ruleId":"519","severity":1,"message":"548","line":292,"column":6,"nodeType":"546","endLine":292,"endColumn":20,"suggestions":"549"},{"ruleId":"550","severity":1,"message":"551","line":375,"column":68,"nodeType":"552","messageId":"542","endLine":375,"endColumn":70},{"ruleId":"508","severity":1,"message":"553","line":22,"column":8,"nodeType":"510","messageId":"511","endLine":22,"endColumn":18},{"ruleId":"508","severity":1,"message":"554","line":23,"column":8,"nodeType":"510","messageId":"511","endLine":23,"endColumn":21},{"ruleId":"508","severity":1,"message":"555","line":24,"column":8,"nodeType":"510","messageId":"511","endLine":24,"endColumn":18},{"ruleId":"508","severity":1,"message":"556","line":25,"column":8,"nodeType":"510","messageId":"511","endLine":25,"endColumn":22},{"ruleId":"508","severity":1,"message":"557","line":26,"column":8,"nodeType":"510","messageId":"511","endLine":26,"endColumn":19},{"ruleId":"508","severity":1,"message":"558","line":27,"column":8,"nodeType":"510","messageId":"511","endLine":27,"endColumn":18},{"ruleId":"508","severity":1,"message":"559","line":28,"column":8,"nodeType":"510","messageId":"511","endLine":28,"endColumn":21},{"ruleId":"508","severity":1,"message":"560","line":29,"column":8,"nodeType":"510","messageId":"511","endLine":29,"endColumn":12},{"ruleId":"519","severity":1,"message":"561","line":85,"column":3,"nodeType":"510","endLine":85,"endColumn":12,"suggestions":"562"},{"ruleId":"508","severity":1,"message":"563","line":1,"column":17,"nodeType":"510","messageId":"511","endLine":1,"endColumn":25},{"ruleId":"508","severity":1,"message":"564","line":1,"column":27,"nodeType":"510","messageId":"511","endLine":1,"endColumn":36},{"ruleId":"508","severity":1,"message":"565","line":113,"column":9,"nodeType":"510","messageId":"511","endLine":113,"endColumn":18},{"ruleId":"508","severity":1,"message":"566","line":17,"column":8,"nodeType":"510","messageId":"511","endLine":17,"endColumn":19},{"ruleId":"508","severity":1,"message":"567","line":18,"column":8,"nodeType":"510","messageId":"511","endLine":18,"endColumn":20},{"ruleId":"550","severity":1,"message":"568","line":168,"column":89,"nodeType":"552","messageId":"542","endLine":168,"endColumn":91},{"ruleId":"550","severity":1,"message":"568","line":172,"column":89,"nodeType":"552","messageId":"542","endLine":172,"endColumn":91},{"ruleId":"550","severity":1,"message":"568","line":206,"column":68,"nodeType":"552","messageId":"542","endLine":206,"endColumn":70},{"ruleId":"550","severity":1,"message":"568","line":246,"column":68,"nodeType":"552","messageId":"542","endLine":246,"endColumn":70},{"ruleId":"569","severity":1,"message":"570","line":314,"column":39,"nodeType":"571","messageId":"572","endLine":314,"endColumn":41},{"ruleId":"508","severity":1,"message":"573","line":316,"column":27,"nodeType":"510","messageId":"511","endLine":316,"endColumn":31},{"ruleId":"508","severity":1,"message":"574","line":1,"column":28,"nodeType":"510","messageId":"511","endLine":1,"endColumn":39},{"ruleId":"508","severity":1,"message":"575","line":19,"column":8,"nodeType":"510","messageId":"511","endLine":19,"endColumn":15},{"ruleId":"508","severity":1,"message":"576","line":150,"column":10,"nodeType":"510","messageId":"511","endLine":150,"endColumn":22},{"ruleId":"508","severity":1,"message":"577","line":150,"column":24,"nodeType":"510","messageId":"511","endLine":150,"endColumn":39},{"ruleId":"508","severity":1,"message":"578","line":154,"column":20,"nodeType":"510","messageId":"511","endLine":154,"endColumn":31},{"ruleId":"519","severity":1,"message":"579","line":179,"column":6,"nodeType":"546","endLine":179,"endColumn":83,"suggestions":"580"},{"ruleId":"550","severity":1,"message":"551","line":240,"column":12,"nodeType":"552","messageId":"542","endLine":240,"endColumn":14},{"ruleId":"550","severity":1,"message":"551","line":252,"column":25,"nodeType":"552","messageId":"542","endLine":252,"endColumn":27},{"ruleId":"508","severity":1,"message":"581","line":307,"column":12,"nodeType":"510","messageId":"511","endLine":307,"endColumn":22},{"ruleId":"508","severity":1,"message":"582","line":354,"column":9,"nodeType":"510","messageId":"511","endLine":354,"endColumn":20},{"ruleId":"569","severity":1,"message":"570","line":355,"column":23,"nodeType":"571","messageId":"572","endLine":355,"endColumn":25},{"ruleId":"508","severity":1,"message":"583","line":4,"column":8,"nodeType":"510","messageId":"511","endLine":4,"endColumn":13},{"ruleId":"519","severity":1,"message":"584","line":108,"column":6,"nodeType":"546","endLine":108,"endColumn":19,"suggestions":"585"},{"ruleId":"569","severity":1,"message":"570","line":19,"column":23,"nodeType":"571","messageId":"572","endLine":19,"endColumn":25},{"ruleId":"550","severity":1,"message":"551","line":21,"column":23,"nodeType":"552","messageId":"542","endLine":21,"endColumn":25},{"ruleId":"569","severity":1,"message":"586","line":33,"column":39,"nodeType":"571","messageId":"587","endLine":33,"endColumn":41},{"ruleId":"550","severity":1,"message":"551","line":34,"column":25,"nodeType":"552","messageId":"542","endLine":34,"endColumn":27},{"ruleId":"569","severity":1,"message":"570","line":53,"column":45,"nodeType":"571","messageId":"572","endLine":53,"endColumn":47},{"ruleId":"550","severity":1,"message":"551","line":54,"column":9,"nodeType":"552","messageId":"542","endLine":54,"endColumn":11},{"ruleId":"550","severity":1,"message":"551","line":56,"column":16,"nodeType":"552","messageId":"542","endLine":56,"endColumn":18},{"ruleId":"550","severity":1,"message":"568","line":70,"column":47,"nodeType":"552","messageId":"542","endLine":70,"endColumn":49},{"ruleId":"550","severity":1,"message":"551","line":70,"column":75,"nodeType":"552","messageId":"542","endLine":70,"endColumn":77},{"ruleId":"550","severity":1,"message":"568","line":76,"column":28,"nodeType":"552","messageId":"542","endLine":76,"endColumn":30},{"ruleId":"588","severity":1,"message":"589","line":79,"column":44,"nodeType":"590","messageId":"542","endLine":79,"endColumn":48},{"ruleId":"588","severity":1,"message":"589","line":80,"column":44,"nodeType":"590","messageId":"542","endLine":80,"endColumn":48},{"ruleId":"508","severity":1,"message":"591","line":116,"column":10,"nodeType":"510","messageId":"511","endLine":116,"endColumn":15},{"ruleId":"592","severity":1,"message":"593","line":347,"column":19,"nodeType":"537","endLine":351,"endColumn":20},{"ruleId":"508","severity":1,"message":"564","line":1,"column":27,"nodeType":"510","messageId":"511","endLine":1,"endColumn":36},{"ruleId":"594","severity":1,"message":"595","line":163,"column":18,"nodeType":"596","messageId":"597","endLine":163,"endColumn":19},{"ruleId":"508","severity":1,"message":"598","line":4,"column":10,"nodeType":"510","messageId":"511","endLine":4,"endColumn":20},{"ruleId":"508","severity":1,"message":"513","line":15,"column":8,"nodeType":"510","messageId":"511","endLine":15,"endColumn":13},{"ruleId":"508","severity":1,"message":"599","line":24,"column":8,"nodeType":"510","messageId":"511","endLine":24,"endColumn":11},{"ruleId":"508","severity":1,"message":"565","line":77,"column":11,"nodeType":"510","messageId":"511","endLine":77,"endColumn":20},{"ruleId":"508","severity":1,"message":"599","line":18,"column":8,"nodeType":"510","messageId":"511","endLine":18,"endColumn":11},{"ruleId":"508","severity":1,"message":"565","line":68,"column":11,"nodeType":"510","messageId":"511","endLine":68,"endColumn":20},{"ruleId":"508","severity":1,"message":"600","line":69,"column":23,"nodeType":"510","messageId":"511","endLine":69,"endColumn":35},{"ruleId":"508","severity":1,"message":"601","line":87,"column":23,"nodeType":"510","messageId":"511","endLine":87,"endColumn":34},{"ruleId":"535","severity":1,"message":"536","line":225,"column":17,"nodeType":"537","endLine":225,"endColumn":50},{"ruleId":"508","severity":1,"message":"602","line":1,"column":28,"nodeType":"510","messageId":"511","endLine":1,"endColumn":47},{"ruleId":"508","severity":1,"message":"603","line":70,"column":12,"nodeType":"510","messageId":"511","endLine":70,"endColumn":24},{"ruleId":"508","severity":1,"message":"604","line":70,"column":26,"nodeType":"510","messageId":"511","endLine":70,"endColumn":41},{"ruleId":"508","severity":1,"message":"605","line":71,"column":12,"nodeType":"510","messageId":"511","endLine":71,"endColumn":26},{"ruleId":"508","severity":1,"message":"606","line":71,"column":28,"nodeType":"510","messageId":"511","endLine":71,"endColumn":45},{"ruleId":"508","severity":1,"message":"607","line":72,"column":12,"nodeType":"510","messageId":"511","endLine":72,"endColumn":25},{"ruleId":"508","severity":1,"message":"608","line":72,"column":27,"nodeType":"510","messageId":"511","endLine":72,"endColumn":43},{"ruleId":"519","severity":1,"message":"609","line":100,"column":6,"nodeType":"546","endLine":100,"endColumn":25,"suggestions":"610"},{"ruleId":"550","severity":1,"message":"551","line":120,"column":41,"nodeType":"552","messageId":"542","endLine":120,"endColumn":43},{"ruleId":"611","severity":1,"message":"612","line":166,"column":21,"nodeType":"613","endLine":166,"endColumn":41},{"ruleId":"508","severity":1,"message":"563","line":2,"column":10,"nodeType":"510","messageId":"511","endLine":2,"endColumn":18},{"ruleId":"508","severity":1,"message":"614","line":39,"column":11,"nodeType":"510","messageId":"511","endLine":39,"endColumn":19},{"ruleId":"508","severity":1,"message":"555","line":5,"column":18,"nodeType":"510","messageId":"511","endLine":5,"endColumn":28},{"ruleId":"508","severity":1,"message":"615","line":10,"column":3,"nodeType":"510","messageId":"511","endLine":10,"endColumn":12},{"ruleId":"508","severity":1,"message":"616","line":11,"column":3,"nodeType":"510","messageId":"511","endLine":11,"endColumn":14},{"ruleId":"508","severity":1,"message":"617","line":12,"column":3,"nodeType":"510","messageId":"511","endLine":12,"endColumn":8},{"ruleId":"508","severity":1,"message":"618","line":13,"column":3,"nodeType":"510","messageId":"511","endLine":13,"endColumn":12},{"ruleId":"508","severity":1,"message":"565","line":88,"column":9,"nodeType":"510","messageId":"511","endLine":88,"endColumn":18},{"ruleId":"508","severity":1,"message":"619","line":97,"column":10,"nodeType":"510","messageId":"511","endLine":97,"endColumn":14},{"ruleId":"508","severity":1,"message":"620","line":121,"column":9,"nodeType":"510","messageId":"511","endLine":121,"endColumn":20},{"ruleId":"508","severity":1,"message":"621","line":164,"column":9,"nodeType":"510","messageId":"511","endLine":164,"endColumn":12},{"ruleId":"508","severity":1,"message":"621","line":199,"column":9,"nodeType":"510","messageId":"511","endLine":199,"endColumn":12},{"ruleId":"508","severity":1,"message":"621","line":218,"column":9,"nodeType":"510","messageId":"511","endLine":218,"endColumn":12},{"ruleId":"550","severity":1,"message":"568","line":317,"column":31,"nodeType":"552","messageId":"542","endLine":317,"endColumn":33},{"ruleId":"592","severity":1,"message":"593","line":500,"column":19,"nodeType":"537","endLine":500,"endColumn":67},{"ruleId":"622","severity":1,"message":"623","line":501,"column":21,"nodeType":"537","endLine":505,"endColumn":22},{"ruleId":"508","severity":1,"message":"564","line":1,"column":17,"nodeType":"510","messageId":"511","endLine":1,"endColumn":26},{"ruleId":"508","severity":1,"message":"624","line":10,"column":19,"nodeType":"510","messageId":"511","endLine":10,"endColumn":21},{"ruleId":"508","severity":1,"message":"625","line":11,"column":11,"nodeType":"510","messageId":"511","endLine":11,"endColumn":18},{"ruleId":"508","severity":1,"message":"626","line":12,"column":20,"nodeType":"510","messageId":"511","endLine":12,"endColumn":29},{"ruleId":"519","severity":1,"message":"627","line":17,"column":28,"nodeType":"510","endLine":17,"endColumn":39},{"ruleId":"508","severity":1,"message":"628","line":4,"column":8,"nodeType":"510","messageId":"511","endLine":4,"endColumn":12},{"ruleId":"508","severity":1,"message":"629","line":11,"column":8,"nodeType":"510","messageId":"511","endLine":11,"endColumn":13},{"ruleId":"508","severity":1,"message":"630","line":13,"column":8,"nodeType":"510","messageId":"511","endLine":13,"endColumn":24},{"ruleId":"508","severity":1,"message":"631","line":14,"column":8,"nodeType":"510","messageId":"511","endLine":14,"endColumn":16},{"ruleId":"508","severity":1,"message":"632","line":18,"column":8,"nodeType":"510","messageId":"511","endLine":18,"endColumn":14},{"ruleId":"508","severity":1,"message":"625","line":27,"column":11,"nodeType":"510","messageId":"511","endLine":27,"endColumn":18},{"ruleId":"519","severity":1,"message":"633","line":41,"column":3,"nodeType":"546","endLine":41,"endColumn":5,"suggestions":"634"},{"ruleId":"550","severity":1,"message":"551","line":45,"column":12,"nodeType":"552","messageId":"542","endLine":45,"endColumn":14},{"ruleId":"635","severity":1,"message":"636","line":46,"column":34,"nodeType":"552","messageId":"637","endLine":46,"endColumn":35},{"ruleId":"550","severity":1,"message":"551","line":47,"column":12,"nodeType":"552","messageId":"542","endLine":47,"endColumn":14},{"ruleId":"635","severity":1,"message":"636","line":48,"column":34,"nodeType":"552","messageId":"637","endLine":48,"endColumn":35},{"ruleId":"550","severity":1,"message":"551","line":49,"column":12,"nodeType":"552","messageId":"542","endLine":49,"endColumn":14},{"ruleId":"635","severity":1,"message":"636","line":50,"column":34,"nodeType":"552","messageId":"637","endLine":50,"endColumn":35},{"ruleId":"622","severity":1,"message":"623","line":79,"column":41,"nodeType":"537","endLine":79,"endColumn":102},{"ruleId":"508","severity":1,"message":"553","line":13,"column":8,"nodeType":"510","messageId":"511","endLine":13,"endColumn":18},{"ruleId":"508","severity":1,"message":"554","line":14,"column":8,"nodeType":"510","messageId":"511","endLine":14,"endColumn":21},{"ruleId":"508","severity":1,"message":"555","line":15,"column":8,"nodeType":"510","messageId":"511","endLine":15,"endColumn":18},{"ruleId":"508","severity":1,"message":"556","line":16,"column":8,"nodeType":"510","messageId":"511","endLine":16,"endColumn":22},{"ruleId":"508","severity":1,"message":"558","line":18,"column":8,"nodeType":"510","messageId":"511","endLine":18,"endColumn":18},{"ruleId":"508","severity":1,"message":"559","line":19,"column":8,"nodeType":"510","messageId":"511","endLine":19,"endColumn":21},{"ruleId":"638","severity":1,"message":"639","line":36,"column":58,"nodeType":"640","messageId":"641","endLine":36,"endColumn":60},{"ruleId":"638","severity":1,"message":"639","line":36,"column":82,"nodeType":"640","messageId":"641","endLine":36,"endColumn":84},{"ruleId":"638","severity":1,"message":"639","line":37,"column":66,"nodeType":"640","messageId":"641","endLine":37,"endColumn":68},{"ruleId":"638","severity":1,"message":"639","line":37,"column":94,"nodeType":"640","messageId":"641","endLine":37,"endColumn":96},{"ruleId":"508","severity":1,"message":"642","line":38,"column":13,"nodeType":"510","messageId":"511","endLine":38,"endColumn":27},{"ruleId":"508","severity":1,"message":"643","line":38,"column":29,"nodeType":"510","messageId":"511","endLine":38,"endColumn":46},{"ruleId":"638","severity":1,"message":"639","line":39,"column":68,"nodeType":"640","messageId":"641","endLine":39,"endColumn":70},{"ruleId":"638","severity":1,"message":"639","line":39,"column":90,"nodeType":"640","messageId":"641","endLine":39,"endColumn":92},{"ruleId":"638","severity":1,"message":"639","line":40,"column":68,"nodeType":"640","messageId":"641","endLine":40,"endColumn":70},{"ruleId":"638","severity":1,"message":"639","line":40,"column":97,"nodeType":"640","messageId":"641","endLine":40,"endColumn":99},{"ruleId":"638","severity":1,"message":"639","line":41,"column":62,"nodeType":"640","messageId":"641","endLine":41,"endColumn":64},{"ruleId":"638","severity":1,"message":"639","line":41,"column":88,"nodeType":"640","messageId":"641","endLine":41,"endColumn":90},{"ruleId":"638","severity":1,"message":"639","line":42,"column":74,"nodeType":"640","messageId":"641","endLine":42,"endColumn":76},{"ruleId":"638","severity":1,"message":"639","line":42,"column":106,"nodeType":"640","messageId":"641","endLine":42,"endColumn":108},{"ruleId":"638","severity":1,"message":"639","line":43,"column":70,"nodeType":"640","messageId":"641","endLine":43,"endColumn":72},{"ruleId":"638","severity":1,"message":"639","line":43,"column":108,"nodeType":"640","messageId":"641","endLine":43,"endColumn":110},{"ruleId":"638","severity":1,"message":"639","line":44,"column":74,"nodeType":"640","messageId":"641","endLine":44,"endColumn":76},{"ruleId":"638","severity":1,"message":"639","line":44,"column":108,"nodeType":"640","messageId":"641","endLine":44,"endColumn":110},{"ruleId":"638","severity":1,"message":"639","line":45,"column":72,"nodeType":"640","messageId":"641","endLine":45,"endColumn":74},{"ruleId":"638","severity":1,"message":"639","line":45,"column":104,"nodeType":"640","messageId":"641","endLine":45,"endColumn":106},{"ruleId":"638","severity":1,"message":"639","line":46,"column":72,"nodeType":"640","messageId":"641","endLine":46,"endColumn":74},{"ruleId":"638","severity":1,"message":"639","line":46,"column":110,"nodeType":"640","messageId":"641","endLine":46,"endColumn":112},{"ruleId":"638","severity":1,"message":"639","line":47,"column":76,"nodeType":"640","messageId":"641","endLine":47,"endColumn":78},{"ruleId":"638","severity":1,"message":"639","line":47,"column":110,"nodeType":"640","messageId":"641","endLine":47,"endColumn":112},{"ruleId":"638","severity":1,"message":"639","line":48,"column":72,"nodeType":"640","messageId":"641","endLine":48,"endColumn":74},{"ruleId":"638","severity":1,"message":"639","line":48,"column":104,"nodeType":"640","messageId":"641","endLine":48,"endColumn":106},{"ruleId":"638","severity":1,"message":"639","line":53,"column":62,"nodeType":"640","messageId":"641","endLine":53,"endColumn":64},{"ruleId":"638","severity":1,"message":"639","line":53,"column":88,"nodeType":"640","messageId":"641","endLine":53,"endColumn":90},{"ruleId":"508","severity":1,"message":"644","line":58,"column":12,"nodeType":"510","messageId":"511","endLine":58,"endColumn":25},{"ruleId":"508","severity":1,"message":"645","line":58,"column":27,"nodeType":"510","messageId":"511","endLine":58,"endColumn":43},{"ruleId":"508","severity":1,"message":"646","line":59,"column":12,"nodeType":"510","messageId":"511","endLine":59,"endColumn":22},{"ruleId":"508","severity":1,"message":"647","line":59,"column":24,"nodeType":"510","messageId":"511","endLine":59,"endColumn":37},{"ruleId":"569","severity":1,"message":"648","line":63,"column":67,"nodeType":"571","messageId":"587","endLine":63,"endColumn":69},{"ruleId":"550","severity":1,"message":"568","line":63,"column":80,"nodeType":"552","messageId":"542","endLine":63,"endColumn":82},{"ruleId":"638","severity":1,"message":"639","line":95,"column":34,"nodeType":"640","messageId":"641","endLine":95,"endColumn":36},{"ruleId":"638","severity":1,"message":"639","line":95,"column":55,"nodeType":"640","messageId":"641","endLine":95,"endColumn":57},{"ruleId":"638","severity":1,"message":"639","line":401,"column":36,"nodeType":"640","messageId":"641","endLine":401,"endColumn":38},{"ruleId":"638","severity":1,"message":"639","line":401,"column":52,"nodeType":"640","messageId":"641","endLine":401,"endColumn":54},{"ruleId":"508","severity":1,"message":"649","line":81,"column":10,"nodeType":"510","messageId":"511","endLine":81,"endColumn":30},{"ruleId":"508","severity":1,"message":"650","line":81,"column":32,"nodeType":"510","messageId":"511","endLine":81,"endColumn":55},{"ruleId":"508","severity":1,"message":"529","line":82,"column":18,"nodeType":"510","messageId":"511","endLine":82,"endColumn":27},{"ruleId":"508","severity":1,"message":"651","line":88,"column":10,"nodeType":"510","messageId":"511","endLine":88,"endColumn":18},{"ruleId":"508","severity":1,"message":"652","line":92,"column":10,"nodeType":"510","messageId":"511","endLine":92,"endColumn":21},{"ruleId":"508","severity":1,"message":"603","line":102,"column":10,"nodeType":"510","messageId":"511","endLine":102,"endColumn":22},{"ruleId":"508","severity":1,"message":"607","line":103,"column":10,"nodeType":"510","messageId":"511","endLine":103,"endColumn":23},{"ruleId":"508","severity":1,"message":"621","line":108,"column":11,"nodeType":"510","messageId":"511","endLine":108,"endColumn":14},{"ruleId":"508","severity":1,"message":"614","line":138,"column":13,"nodeType":"510","messageId":"511","endLine":138,"endColumn":21},{"ruleId":"508","severity":1,"message":"621","line":177,"column":9,"nodeType":"510","messageId":"511","endLine":177,"endColumn":12},{"ruleId":"508","severity":1,"message":"653","line":182,"column":9,"nodeType":"510","messageId":"511","endLine":182,"endColumn":21},{"ruleId":"508","severity":1,"message":"614","line":212,"column":11,"nodeType":"510","messageId":"511","endLine":212,"endColumn":19},{"ruleId":"508","severity":1,"message":"630","line":4,"column":8,"nodeType":"510","messageId":"511","endLine":4,"endColumn":24},{"ruleId":"508","severity":1,"message":"654","line":49,"column":7,"nodeType":"510","messageId":"511","endLine":49,"endColumn":16},{"ruleId":"508","severity":1,"message":"621","line":66,"column":11,"nodeType":"510","messageId":"511","endLine":66,"endColumn":14},"no-unused-vars","'FormControlLabel' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","'Modal' is defined but never used.","'buttonState' is assigned a value but never used.","'setValue' is assigned a value but never used.","'isDesktop' is assigned a value but never used.","'handleOnChange' is assigned a value but never used.","'body' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setButtonState'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [email, username, password] as a second argument to the useEffect Hook.",["655"],"no-native-reassign",["656"],"no-negated-in-lhs",["657"],"'Avatar' is defined but never used.","'AddIcon' is defined but never used.","'avatar' is assigned a value but never used.","'setAvatar' is assigned a value but never used.","'avatarObj' is assigned a value but never used.","'setAvatarObj' is assigned a value but never used.","'setTermsAgree' is assigned a value but never used.","'change' is assigned a value but never used.","'setChange' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Suspense' is defined but never used.","no-dupe-keys","Duplicate key 'marginLeft'.","ObjectExpression","unexpected","'CardMedia' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.match.params.artId', 'props.match.params.username', and 'tiles'. Either include them or remove the dependency array.","ArrayExpression",["658"],"React Hook useEffect has missing dependencies: 'updatedTile._id', 'updatedTile.artId', 'updatedTile.artLocation', 'updatedTile.artType', 'updatedTile.category', 'updatedTile.description', 'updatedTile.imageUrl', 'updatedTile.license', 'updatedTile.originalPhotoHeight', 'updatedTile.originalPhotoIso', 'updatedTile.originalPhotoPpi', 'updatedTile.originalPhotoWidth', 'updatedTile.prixerUsername', 'updatedTile.publicId', 'updatedTile.status', 'updatedTile.tags', 'updatedTile.thumbnailUrl', 'updatedTile.title', 'updatedTile.use', and 'updatedTile.userId'. Either include them or remove the dependency array.",["659"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'IconButton' is defined but never used.","'OutlinedInput' is defined but never used.","'InputLabel' is defined but never used.","'InputAdornment' is defined but never used.","'FormControl' is defined but never used.","'Visibility' is defined but never used.","'VisibilityOff' is defined but never used.","'clsx' is defined but never used.","React Hook useEffect contains a call to 'setErrorMessage'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [token] as a second argument to the useEffect Hook.",["660"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'isDeskTop' is assigned a value but never used.","'Preferences' is defined but never used.","'Testimonials' is defined but never used.","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'test' is assigned a value but never used.","'useCallback' is defined but never used.","'Cropper' is defined but never used.","'thumbnailUrl' is assigned a value but never used.","'setThumbnailUrl' is assigned a value but never used.","'setPublicId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'artType' and 'handleMaxPrintCalc'. Either include them or remove the dependency array.",["661"],"'blobToFile' is defined but never used.","'removeCrops' is assigned a value but never used.","'axios' is defined but never used.","React Hook useEffect has missing dependencies: 'globalParams' and 'props.prixerUsername'. Either include them or remove the dependency array.",["662"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-eval","eval can be harmful.","CallExpression","'ready' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'makeStyles' is defined but never used.","'Box' is defined but never used.","'setProductId' is assigned a value but never used.","'setThumbUrl' is assigned a value but never used.","'useImperativeHandle' is defined but never used.","'errorMessage' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","'snackBarAction' is assigned a value but never used.","'setSnackBarAction' is assigned a value but never used.","'snackBarError' is assigned a value but never used.","'setSnackBarError' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'art', 'croppedArtTemp', and 'setCroppedArt'. Either include them or remove the dependency array.",["663"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'response' is assigned a value but never used.","'FormGroup' is defined but never used.","'FilledInput' is defined but never used.","'Input' is defined but never used.","'TextField' is defined but never used.","'Open' is assigned a value but never used.","'createOpenF' is assigned a value but never used.","'res' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ar' is assigned a value but never used.","'classes' is assigned a value but never used.","'setAspect' is assigned a value but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'Link' is defined but never used.","'Title' is defined but never used.","'CircularProgress' is defined but never used.","'Backdrop' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'base_url' and 'props.product'. Either include them or remove the dependency array.",["664"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'buttonAttState' is assigned a value but never used.","'setButtonAttState' is assigned a value but never used.","'passwordError' is assigned a value but never used.","'setPasswordError' is assigned a value but never used.","'emailError' is assigned a value but never used.","'setEmailError' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'testimonialDataState' is assigned a value but never used.","'setTestimonialDataState' is assigned a value but never used.","'backdrop' is assigned a value but never used.","'inputChange' is assigned a value but never used.","'GetIdForEdit' is assigned a value but never used.","'MenuProps' is assigned a value but never used.",{"desc":"665","fix":"666"},"no-global-assign","no-unsafe-negation",{"desc":"667","fix":"668"},{"desc":"669","fix":"670"},{"desc":"671","fix":"672"},{"desc":"673","fix":"674"},{"desc":"675","fix":"676"},{"desc":"677","fix":"678"},{"desc":"679","fix":"680"},"Add dependencies array: [email, username, password]",{"range":"681","text":"682"},"Update the dependencies array to be: [props.match.params.artId, props.match.params.username, tiles]",{"range":"683","text":"684"},"Update the dependencies array to be: [artDataState, updatedTile._id, updatedTile.artId, updatedTile.artLocation, updatedTile.artType, updatedTile.category, updatedTile.description, updatedTile.imageUrl, updatedTile.license, updatedTile.originalPhotoHeight, updatedTile.originalPhotoIso, updatedTile.originalPhotoPpi, updatedTile.originalPhotoWidth, updatedTile.prixerUsername, updatedTile.publicId, updatedTile.status, updatedTile.tags, updatedTile.thumbnailUrl, updatedTile.title, updatedTile.use, updatedTile.userId]",{"range":"685","text":"686"},"Add dependencies array: [token]",{"range":"687","text":"688"},"Update the dependencies array to be: [originalPhotoWidth, originalPhotoHeight, originalPhotoPpi, originalPhotoIso, artType, handleMaxPrintCalc]",{"range":"689","text":"690"},"Update the dependencies array to be: [globalParams, props.prixerUsername, searchValue]",{"range":"691","text":"692"},"Update the dependencies array to be: [art, croppedAreaPixels, croppedArtTemp, setCroppedArt]",{"range":"693","text":"694"},"Update the dependencies array to be: [base_url, props.product]",{"range":"695","text":"696"},[6247,6247],", [email, username, password]",[7111,7113],"[props.match.params.artId, props.match.params.username, tiles]",[8693,8707],"[artDataState, updatedTile._id, updatedTile.artId, updatedTile.artLocation, updatedTile.artType, updatedTile.category, updatedTile.description, updatedTile.imageUrl, updatedTile.license, updatedTile.originalPhotoHeight, updatedTile.originalPhotoIso, updatedTile.originalPhotoPpi, updatedTile.originalPhotoWidth, updatedTile.prixerUsername, updatedTile.publicId, updatedTile.status, updatedTile.tags, updatedTile.thumbnailUrl, updatedTile.title, updatedTile.use, updatedTile.userId]",[3479,3479],", [token]",[5481,5558],"[originalPhotoWidth, originalPhotoHeight, originalPhotoPpi, originalPhotoIso, artType, handleMaxPrintCalc]",[3581,3594],"[globalParams, props.prixerUsername, searchValue]",[2941,2960],"[art, croppedAreaPixels, croppedArtTemp, setCroppedArt]",[1461,1463],"[base_url, props.product]"]