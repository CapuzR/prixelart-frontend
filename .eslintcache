[{"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\index.js":"1","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\theme.js":"2","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\App.js":"3","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\serviceWorker.js":"4","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\expire.js":"5","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\login\\loginPage.jsx":"6","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\gallery\\gallery.jsx":"7","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\register\\userRegistration.jsx":"8","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\register\\prixerRegistration.jsx":"9","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\productsCatalog.jsx":"10","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\fullscreenPhoto\\fullscreenPhoto.jsx":"11","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordChange\\passwordChange.jsx":"12","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\prixerProfile.jsx":"13","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\adminLogin\\adminLoginPage.jsx":"14","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\home\\home.jsx":"15","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordReset\\forgotPassword.jsx":"16","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordReset\\passwordReset.jsx":"17","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\adminMain.jsx":"18","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\validations.js":"19","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\utils.js":"20","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\grid\\grid.jsx":"21","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\TestimonialsCrud\\TestimonialsFeed.jsx":"22","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\TestimonialsCrud\\Testimonials.jsx":"23","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\appBar\\appBar.jsx":"24","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\Copyright\\copyright.jsx":"25","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\artUploader.jsx":"26","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\floatingAddButton\\floatingAddButton.jsx":"27","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\simpleDialog\\simpleDialog.jsx":"28","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\prixerGrid\\prixerGrid.jsx":"29","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\prixers\\prixers.jsx":"30","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\Preferences.jsx":"31","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\orders.jsx":"32","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\orderServices.js":"33","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\tabPreferences.jsx":"34","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\updateOrder.jsx":"35","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\createOrder.jsx":"36","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\consumerServices.js":"37","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\preferenceTerms.jsx":"38","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\preferencesCarousel.jsx":"39","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\orderDetails.jsx":"40","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\Title.jsx":"41","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\orderBasicInfo.jsx":"42","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\services.js":"43","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\searchBar\\searchBar.jsx":"44","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\aspectRatioSelector.jsx":"45","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\paymentMethods.jsx":"46","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\products\\products.jsx":"47","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\consumers\\consumers.jsx":"48","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\adminUser\\adminUser.jsx":"49","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\listItems.jsx":"50","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\productsGrid.jsx":"51","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\dashboard.jsx":"52","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\prixerOptions\\prixerOptions.jsx":"53","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\userData\\userData.jsx":"54","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\cropImage.js":"55","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\easyCropper.jsx":"56","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\readConsumers.jsx":"57","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\createPaymentMethod.jsx":"58","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\createConsumer.jsx":"59","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\updatePaymentMethod.jsx":"60","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\readPaymentMethods.jsx":"61","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\updateConsumer.jsx":"62","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\readProducts.jsx":"63","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\createProduct.jsx":"64","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\disableProduct.jsx":"65","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\updateProduct.jsx":"66","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\disableAdmin.jsx":"67","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\updateAdmin.jsx":"68","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\createAdmin.jsx":"69","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\orders.jsx":"70","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\chart.jsx":"71","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\readAdmins.jsx":"72","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\deposits.jsx":"73","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\products\\variants.jsx":"74","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\variants\\readVariants.jsx":"75","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\variants\\createVariant.jsx":"76"},{"size":958,"mtime":1661179060799,"results":"77","hashOfConfig":"78"},{"size":419,"mtime":1661179060827,"results":"79","hashOfConfig":"78"},{"size":3390,"mtime":1661179060773,"results":"80","hashOfConfig":"78"},{"size":5227,"mtime":1661179060817,"results":"81","hashOfConfig":"78"},{"size":418,"mtime":1661179060829,"results":"82","hashOfConfig":"78"},{"size":9855,"mtime":1661179060801,"results":"83","hashOfConfig":"78"},{"size":2585,"mtime":1663699657891,"results":"84","hashOfConfig":"78"},{"size":12335,"mtime":1664496362064,"results":"85","hashOfConfig":"78"},{"size":15597,"mtime":1665165567228,"results":"86","hashOfConfig":"78"},{"size":2405,"mtime":1661179060812,"results":"87","hashOfConfig":"78"},{"size":38387,"mtime":1665165567227,"results":"88","hashOfConfig":"78"},{"size":8779,"mtime":1661179060807,"results":"89","hashOfConfig":"78"},{"size":2419,"mtime":1661263262650,"results":"90","hashOfConfig":"78"},{"size":9100,"mtime":1661179060796,"results":"91","hashOfConfig":"78"},{"size":17332,"mtime":1664480548339,"results":"92","hashOfConfig":"78"},{"size":4822,"mtime":1661179060807,"results":"93","hashOfConfig":"78"},{"size":7383,"mtime":1661179060808,"results":"94","hashOfConfig":"78"},{"size":7723,"mtime":1664480548334,"results":"95","hashOfConfig":"78"},{"size":608,"mtime":1661179060831,"results":"96","hashOfConfig":"78"},{"size":2792,"mtime":1661179060831,"results":"97","hashOfConfig":"78"},{"size":6592,"mtime":1664508034612,"results":"98","hashOfConfig":"78"},{"size":4529,"mtime":1663907018780,"results":"99","hashOfConfig":"78"},{"size":21556,"mtime":1665165567224,"results":"100","hashOfConfig":"78"},{"size":4802,"mtime":1661263262652,"results":"101","hashOfConfig":"78"},{"size":501,"mtime":1661179060818,"results":"102","hashOfConfig":"78"},{"size":31443,"mtime":1665165567229,"results":"103","hashOfConfig":"78"},{"size":1500,"mtime":1661179060825,"results":"104","hashOfConfig":"78"},{"size":1862,"mtime":1661179060826,"results":"105","hashOfConfig":"78"},{"size":9433,"mtime":1664496362065,"results":"106","hashOfConfig":"78"},{"size":9335,"mtime":1665177249152,"results":"107","hashOfConfig":"78"},{"size":207,"mtime":1662066599218,"results":"108","hashOfConfig":"78"},{"size":5443,"mtime":1661179060781,"results":"109","hashOfConfig":"78"},{"size":2794,"mtime":1661179060781,"results":"110","hashOfConfig":"78"},{"size":1661,"mtime":1663803196359,"results":"111","hashOfConfig":"78"},{"size":8857,"mtime":1661179060790,"results":"112","hashOfConfig":"78"},{"size":12883,"mtime":1661179060787,"results":"113","hashOfConfig":"78"},{"size":1082,"mtime":1661179060784,"results":"114","hashOfConfig":"78"},{"size":3598,"mtime":1665165567225,"results":"115","hashOfConfig":"78"},{"size":16437,"mtime":1663803196358,"results":"116","hashOfConfig":"78"},{"size":39777,"mtime":1661179060788,"results":"117","hashOfConfig":"78"},{"size":356,"mtime":1661179060776,"results":"118","hashOfConfig":"78"},{"size":15989,"mtime":1661179060787,"results":"119","hashOfConfig":"78"},{"size":2888,"mtime":1665165734971,"results":"120","hashOfConfig":"78"},{"size":1866,"mtime":1664480548354,"results":"121","hashOfConfig":"78"},{"size":6918,"mtime":1661179060821,"results":"122","hashOfConfig":"78"},{"size":5222,"mtime":1661179060782,"results":"123","hashOfConfig":"78"},{"size":5486,"mtime":1664311137766,"results":"124","hashOfConfig":"78"},{"size":4996,"mtime":1661179060778,"results":"125","hashOfConfig":"78"},{"size":4595,"mtime":1661263262645,"results":"126","hashOfConfig":"78"},{"size":5484,"mtime":1664480548336,"results":"127","hashOfConfig":"78"},{"size":17020,"mtime":1665174680474,"results":"128","hashOfConfig":"78"},{"size":3304,"mtime":1661179060779,"results":"129","hashOfConfig":"78"},{"size":1003,"mtime":1664480548345,"results":"130","hashOfConfig":"78"},{"size":22528,"mtime":1664496362062,"results":"131","hashOfConfig":"78"},{"size":2393,"mtime":1661179060829,"results":"132","hashOfConfig":"78"},{"size":1353,"mtime":1661179060822,"results":"133","hashOfConfig":"78"},{"size":3002,"mtime":1661179060785,"results":"134","hashOfConfig":"78"},{"size":6547,"mtime":1661179060790,"results":"135","hashOfConfig":"78"},{"size":15971,"mtime":1663803196361,"results":"136","hashOfConfig":"78"},{"size":6964,"mtime":1661179060791,"results":"137","hashOfConfig":"78"},{"size":3081,"mtime":1661179060791,"results":"138","hashOfConfig":"78"},{"size":17561,"mtime":1661179060785,"results":"139","hashOfConfig":"78"},{"size":5484,"mtime":1664508034608,"results":"140","hashOfConfig":"78"},{"size":29278,"mtime":1664508034606,"results":"141","hashOfConfig":"78"},{"size":0,"mtime":1661179060793,"results":"142","hashOfConfig":"78"},{"size":26649,"mtime":1665165734962,"results":"143","hashOfConfig":"78"},{"size":0,"mtime":1661179060775,"results":"144","hashOfConfig":"78"},{"size":0,"mtime":1661179060776,"results":"145","hashOfConfig":"78"},{"size":9089,"mtime":1663907018781,"results":"146","hashOfConfig":"78"},{"size":2418,"mtime":1661179060780,"results":"147","hashOfConfig":"78"},{"size":1482,"mtime":1661179060779,"results":"148","hashOfConfig":"78"},{"size":2157,"mtime":1661179060776,"results":"149","hashOfConfig":"78"},{"size":881,"mtime":1661179060779,"results":"150","hashOfConfig":"78"},{"size":5293,"mtime":1661179060783,"results":"151","hashOfConfig":"78"},{"size":4442,"mtime":1665176759864,"results":"152","hashOfConfig":"78"},{"size":29326,"mtime":1665165734965,"results":"153","hashOfConfig":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},"12dukld",{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"156"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"156"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"156"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"156"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"156"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"156"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"156"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"156"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"156"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"156"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"156"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"156"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"156"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"156"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"156"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"156"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"156"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"156"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"156"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"156"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"156"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"156"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"156"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"156"},"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\index.js",[],["331","332"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\theme.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\App.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\serviceWorker.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\expire.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\login\\loginPage.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\gallery\\gallery.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\register\\userRegistration.jsx",["333","334","335","336","337","338","339","340","341"],"//Llevar el Password a un componente propio.\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport validations from \"../utils/validations\";\r\nimport Copyright from \"../sharedComponents/Copyright/copyright\";\r\n\r\n//material-ui\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport { FormControlLabel } from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\nimport clsx from \"clsx\";\r\nimport jwt from \"jwt-decode\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    position: \"absolute\",\r\n    maxHeight: 450,\r\n    overflowY: \"auto\",\r\n    backgroundColor: \"white\",\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"16px 32px 24px\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    textAlign: \"justify\",\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  snackbar: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      bottom: 90,\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [buttonState, setButtonState] = useState(true);\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  // const [termsAgree, setTermsAgree] = useState(false);\r\n  const theme = useTheme();\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"md\"));\r\n\r\n  const handleOnChange = () => {\r\n    setIsChecked(!isChecked);\r\n    // setTermsAgree(!isChecked);\r\n  };\r\n  const styles = useStyles();\r\n  const [modal, setModal] = useState(false);\r\n  const openModal = () => {\r\n    setModal(!modal);\r\n  };\r\n  const body = (\r\n    <div className={styles.modal}>\r\n      <div>{value}</div>\r\n      <div align=\"center\">\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => openModal()}>\r\n          Aceptar\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n  //Error states.\r\n  const [usernameError, setUsernameError] = useState();\r\n  const [emailError, setEmailError] = useState();\r\n  const [passwordError, setPasswordError] = useState();\r\n  const [errorMessage, setErrorMessage] = useState();\r\n  const [snackBarError, setSnackBarError] = useState(false);\r\n\r\n  const now = new Date();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!username || !email || !firstName || !lastName || !email || !password) {\r\n      setErrorMessage(\"Por favor completa todos los campos requeridos.\");\r\n      setSnackBarError(true);\r\n    } else {\r\n      const base_url = process.env.REACT_APP_BACKEND_URL + \"/register\";\r\n      const data = {\r\n        username: username,\r\n        email: email.toLowerCase(),\r\n        password: password,\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        // termsAgree: termsAgree,\r\n      };\r\n      setButtonState(true);\r\n      axios\r\n        .post(base_url, data)\r\n        .then((response) => {\r\n          if (response.data.info === \"error_username\") {\r\n            setUsernameError(true);\r\n            setErrorMessage(response.data.message);\r\n            setSnackBarError(true);\r\n          } else if (response.data.info === \"error_email\") {\r\n            setEmailError(true);\r\n            setErrorMessage(response.data.message);\r\n            setSnackBarError(true);\r\n          } else {\r\n            setPasswordError(true);\r\n            setErrorMessage(\"Registro de usuario exitoso.\");\r\n            setSnackBarError(true);\r\n            const token = jwt(response.data.token);\r\n            localStorage.setItem(\"token\", JSON.stringify(token));\r\n            localStorage.setItem(\r\n              \"tokenExpire\",\r\n              JSON.stringify(now.getTime() + 21600000)\r\n            );\r\n            history.push({ pathname: \"/registrar/prixer\" });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setButtonState(false);\r\n          console.log(error.response);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (email && username && password) {\r\n      if (\r\n        validations.isAValidEmail(email) &&\r\n        validations.isAValidUsername(username) &&\r\n        validations.isAValidPassword(password)\r\n      ) {\r\n        setButtonState(false);\r\n      } else {\r\n        setButtonState(true);\r\n      }\r\n    } else {\r\n      setButtonState(true);\r\n    }\r\n  });\r\n\r\n  const handleEmailChange = (e) => {\r\n    if (validations.isAValidEmail(e.target.value)) {\r\n      setEmail(e.target.value);\r\n      setEmailError(false);\r\n      setSnackBarError(false);\r\n    } else {\r\n      setEmail(e.target.value);\r\n      setErrorMessage(\"Por favor introduce un correo electrónico válido.\");\r\n      setSnackBarError(true);\r\n      setEmailError(true);\r\n    }\r\n  };\r\n\r\n  const handleUsernameChange = (e) => {\r\n    if (validations.isAValidUsername(e.target.value)) {\r\n      setUsername(e.target.value);\r\n      setUsernameError(false);\r\n      setSnackBarError(false);\r\n    } else {\r\n      setUsername(e.target.value);\r\n      setErrorMessage(\r\n        \"Por favor introduce un nombre de usuario que solo incluya letras en minúscula y números.\"\r\n      );\r\n      setSnackBarError(true);\r\n      setUsernameError(true);\r\n    }\r\n  };\r\n\r\n  //Password\r\n  const handlePasswordChange = (e) => {\r\n    if (validations.isAValidPassword(e.target.value)) {\r\n      setPassword(e.target.value);\r\n      setPasswordError(false);\r\n      setSnackBarError(false);\r\n    } else {\r\n      setPassword(e.target.value);\r\n      setPasswordError(true);\r\n      setErrorMessage(\r\n        \"Disculpa, tu contraseña debe tener entre 8 y 15 caracteres, incluyendo al menos: una minúscula, una mayúscula, un número y un caracter especial.\"\r\n      );\r\n      setSnackBarError(true);\r\n    }\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Registrar\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                error={usernameError}\r\n                id=\"username\"\r\n                label=\"Usuario\"\r\n                name=\"username\"\r\n                autoComplete=\"username\"\r\n                value={username}\r\n                onChange={handleUsernameChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"Nombre\"\r\n                autoFocus\r\n                value={firstName}\r\n                onChange={(e) => setFirstName(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label=\"Apellido\"\r\n                name=\"lastName\"\r\n                autoComplete=\"lname\"\r\n                value={lastName}\r\n                onChange={(e) => setLastName(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                error={emailError}\r\n                id=\"email\"\r\n                label=\"Correo electrónico\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                value={email}\r\n                onChange={handleEmailChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                xs={12}\r\n                fullWidth={true}\r\n              >\r\n                <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                  Contraseña\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type={showPassword ? \"text\" : \"password\"}\r\n                  value={password}\r\n                  label=\"Contraseña\"\r\n                  error={passwordError}\r\n                  onChange={handlePasswordChange}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                        edge=\"end\"\r\n                      >\r\n                        {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={100}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            value=\"submit\"\r\n          >\r\n            Registrarme\r\n          </Button>\r\n          <Grid container style={{ justifyContent: \"center\" }}>\r\n            <Grid item>\r\n              <Link\r\n                href=\"#\"\r\n                onClick={() => {\r\n                  history.push({ pathname: \"/iniciar\" });\r\n                }}\r\n                variant=\"body2\"\r\n              >\r\n                ¿Ya tienes una cuenta? Inicia sesión.\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n      <Snackbar\r\n        open={snackBarError}\r\n        autoHideDuration={6000}\r\n        message={errorMessage}\r\n        className={classes.snackbar}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\register\\prixerRegistration.jsx",["342","343","344","345","346","347","348","349","350","351","352"],"import React, { useEffect } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { useState } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { ContentState, convertFromRaw, convertToRaw } from \"draft-js\";\r\nimport MDEditor from \"@uiw/react-md-editor\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" href=\"https://prixelart.com/\">\r\n        prixelart.com\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    borderStyle: \"solid\",\r\n    borderWidth: 1,\r\n    borderColor: \"#000\",\r\n    backgroundColor: \"#fff\",\r\n    width: \"160px\",\r\n    height: \"160px\",\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  snackbar: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      bottom: 90,\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  loading: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(0),\r\n    },\r\n    marginLeft: \"50%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    maxWidth: 300,\r\n  },\r\n  modal: {\r\n    position: \"absolute\",\r\n    width: \"80%\",\r\n    maxHeight: 450,\r\n    overflowY: \"auto\",\r\n    backgroundColor: \"white\",\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"16px 32px 24px\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    textAlign: \"justify\",\r\n  },\r\n  button: {\r\n    textAlign: \"center\",\r\n  },\r\n  root: {\r\n    height: 300,\r\n    flexGrow: 1,\r\n    minWidth: 300,\r\n  },\r\n}));\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\nconst specialties = [\"Fotografía\", \"Diseño\", \"Artes plásticas\"];\r\nfunction getStyles(specialty, theme) {\r\n  return {\r\n    fontWeight:\r\n      specialty.indexOf(specialty) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\nexport default function PrixerRegistration() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [instagram, setInstagram] = useState(\"\");\r\n  const [facebook, setFacebook] = useState(\"\");\r\n  const [twitter, setTwitter] = useState(\"\");\r\n  const [dateOfBirth, setDateOfBirth] = useState();\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [avatar, setAvatar] = useState(\"\");\r\n  const [avatarObj, setAvatarObj] = useState(\"\");\r\n  const [buttonState, setButtonState] = useState(true);\r\n  const [value, setValue] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const theme = useTheme();\r\n  const [specialty, setSpecialty] = React.useState([]);\r\n  const [change, setChange] = useState(false);\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const status = true;\r\n\r\n  const handleOnChange = () => {\r\n    setIsChecked(!isChecked);\r\n  };\r\n\r\n  const styles = useStyles();\r\n  const [modal, setModal] = useState(false);\r\n  const openModal = () => {\r\n    setModal(!modal);\r\n  };\r\n\r\n  const body = (\r\n    <div className={styles.modal}>\r\n      <div data-color-mode=\"light\">\r\n        <div\r\n          style={{\r\n            textAlign: \"center\",\r\n            marginBottom: \"12px\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          CONVENIO DE RELACIÓN ENTRE LOS ARTISTAS Y LA COMPAÑÍA\r\n        </div>\r\n        <div>\r\n          <MDEditor.Markdown source={value} style={{ textAlign: \"justify\" }} />\r\n        </div>\r\n      </div>\r\n\r\n      <div align=\"center\">\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            setIsChecked(true);\r\n            setModal(false);\r\n          }}\r\n        >\r\n          Aceptar\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  //Error states.\r\n  const [errorMessage, setErrorMessage] = useState();\r\n  const [snackBarError, setSnackBarError] = useState(false);\r\n  const termsAgree = isChecked;\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      !specialty ||\r\n      !instagram ||\r\n      !dateOfBirth ||\r\n      !specialty ||\r\n      !phone ||\r\n      !country ||\r\n      !city ||\r\n      // !description ||\r\n      !termsAgree\r\n    ) {\r\n      // ||(!avatar)) {\r\n      setErrorMessage(\"Por favor completa todos los campos requeridos.\");\r\n      setSnackBarError(true);\r\n      setIsChecked(true);\r\n    } else {\r\n      setLoading(true);\r\n      setButtonState(true);\r\n      const base_url =\r\n        process.env.REACT_APP_BACKEND_URL + \"/prixer-registration\";\r\n      // const cldAvatarUrl = await uploadToCld();\r\n      const data = {\r\n        specialtyArt: specialty,\r\n        instagram: instagram,\r\n        facebook: facebook,\r\n        twitter: twitter,\r\n        dateOfBirth: dateOfBirth,\r\n        phone: phone,\r\n        country: country,\r\n        city: city,\r\n        description: description,\r\n        termsAgree: isChecked,\r\n        status: status,\r\n        // 'avatar': cldAvatarUrl,\r\n        username: JSON.parse(localStorage.getItem(\"token\")).username,\r\n      };\r\n\r\n      axios\r\n        .post(base_url, data)\r\n        .then((response) => {\r\n          if (response.data.success === false) {\r\n            setLoading(false);\r\n            setButtonState(false);\r\n            setErrorMessage(response.data.message);\r\n            setSnackBarError(true);\r\n          } else {\r\n            setErrorMessage(\"Registro de Prixer exitoso.\");\r\n            setSnackBarError(true);\r\n            history.push({ pathname: \"/\" + response.data.prixerData.username });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setLoading(false);\r\n          setButtonState(false);\r\n          console.log(error.response);\r\n        });\r\n    }\r\n  };\r\n  const handleChange = (event) => {\r\n    setSpecialty(event.target.value);\r\n  };\r\n  const getTerms = () => {\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/termsAndConditions/read\";\r\n    axios\r\n      .get(base_url)\r\n      .then((response) => {\r\n        setValue(response.data.terms.termsAndConditions);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getTerms();\r\n  }, []);\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Comparte con tus futuros clientes\r\n        </Typography>\r\n        <form onSubmit={handleSubmit} className={classes.form} noValidate>\r\n          <Grid container spacing={3}>\r\n            {loading && (\r\n              <div className={classes.loading}>\r\n                <CircularProgress />\r\n              </div>\r\n            )}\r\n            <Grid item xs={6}>\r\n              <FormControl\r\n                className={classes.formControl}\r\n                style={{ width: \"100%\" }}\r\n              >\r\n                <InputLabel id=\"demo-mutiple-name-label\">\r\n                  Especialidad\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-mutiple-name-label\"\r\n                  id=\"demo-mutiple-name\"\r\n                  multiple\r\n                  value={specialty}\r\n                  onChange={handleChange}\r\n                  input={<Input />}\r\n                  MenuProps={MenuProps}\r\n                >\r\n                  {specialties.map((specialty) => (\r\n                    <MenuItem\r\n                      key={specialty}\r\n                      value={specialty}\r\n                      style={getStyles(specialty, theme)}\r\n                    >\r\n                      {specialty}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={6}\r\n              sm={6}\r\n              style={{ display: \"flex\", alignItems: \"center\" }}\r\n            >\r\n              <TextField\r\n                style={{\r\n                  width: \"100%\",\r\n                }}\r\n                id=\"dateOfBirth\"\r\n                label=\"Fecha de Nacimiento\"\r\n                type=\"date\"\r\n                required\r\n                format=\"dd-MM-yyyy\"\r\n                defaultValue=\"06-07-2016\"\r\n                className={classes.textField}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                onChange={(e) => {\r\n                  setDateOfBirth(new Date(e.target.value));\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"instagram\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                value={instagram}\r\n                id=\"instagram\"\r\n                label=\"Instagram\"\r\n                autoFocus\r\n                onChange={(e) => {\r\n                  setInstagram(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"facebook\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={facebook}\r\n                id=\"facebook\"\r\n                label=\"Facebook\"\r\n                autoFocus\r\n                onChange={(e) => {\r\n                  setFacebook(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"twitter\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={twitter}\r\n                id=\"twitter\"\r\n                label=\"Twitter\"\r\n                autoFocus\r\n                onChange={(e) => {\r\n                  setTwitter(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"phone\"\r\n                label=\"Teléfono\"\r\n                value={phone}\r\n                onChange={(e) => {\r\n                  setPhone(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"country\"\r\n                label=\"País\"\r\n                value={country}\r\n                type=\"country\"\r\n                id=\"country\"\r\n                autoComplete=\"current-password\"\r\n                onChange={(e) => {\r\n                  setCountry(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"city\"\r\n                label=\"Ciudad\"\r\n                value={city}\r\n                type=\"city\"\r\n                id=\"city\"\r\n                autoComplete=\"current-password\"\r\n                onChange={(e) => {\r\n                  setCity(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                name=\"description\"\r\n                label=\"Descripción\"\r\n                value={description}\r\n                type=\"description\"\r\n                id=\"description\"\r\n                autoComplete=\"current-password\"\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            style={{\r\n              display: \"flex\",\r\n              paddingTop: \"24px\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <FormControlLabel\r\n              style={{ margin: 0, paddingRight: 8 }}\r\n              control={\r\n                <Checkbox\r\n                  color=\"primary\"\r\n                  value={isChecked}\r\n                  checked={isChecked}\r\n                />\r\n              }\r\n              label=\"Acepto los\"\r\n              onChange={handleOnChange}\r\n              required\r\n            />\r\n\r\n            <a\r\n              style={{\r\n                textTransform: \"lowercase\",\r\n                fontSize: \"1rem\",\r\n                textDecoration: \"underline\",\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={openModal}\r\n            >\r\n              Términos y condiciones\r\n            </a>\r\n            <Modal\r\n              open={modal}\r\n              onClose={openModal}\r\n              xl={800}\r\n              lg={800}\r\n              md={480}\r\n              sm={360}\r\n              xs={360}\r\n            >\r\n              {body}\r\n            </Modal>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            value=\"submit\"\r\n            required\r\n            disabled={!isChecked}\r\n          >\r\n            Guardar e ir a mi perfil\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n      <Snackbar\r\n        open={snackBarError}\r\n        autoHideDuration={1000}\r\n        message={errorMessage}\r\n        className={classes.snackbar}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\productsCatalog.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\fullscreenPhoto\\fullscreenPhoto.jsx",["353","354","355","356","357","358","359","360","361","362","363","364","365","366"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport axios from \"axios\";\r\nimport AppBar from \"../../sharedComponents/appBar/appBar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport FloatingAddButton from \"../../sharedComponents/floatingAddButton/floatingAddButton\";\r\nimport ArtUploader from \"../../sharedComponents/artUploader/artUploader\";\r\nimport WhatsAppIcon from \"@material-ui/icons/WhatsApp\";\r\nimport utils from \"../../utils/utils\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Img from \"react-cool-img\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  loading: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n    marginLeft: \"50vw\",\r\n    marginTop: \"50vh\",\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"left\",\r\n    maxWidth: 850,\r\n    flexGrow: 1,\r\n  },\r\n  root: {\r\n    width: \"100vw\",\r\n  },\r\n  float: {\r\n    position: \"relative\",\r\n    marginLeft: \"87%\",\r\n  },\r\n}));\r\n\r\nconst photoIsos = [\"100\", \"200\", \"400\"];\r\n\r\nexport default function FullscreePhoto(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [ready, setReady] = useState(false);\r\n  const [tiles, setTiles] = useState([]);\r\n  const [updatedTile, setUpdatedTile] = useState([]);\r\n  const [artDataState, setArtDataState] = useState();\r\n  const [snackBar, setSnackBar] = useState(false);\r\n  const [snackBarMessage, setSnackBarMessage] = useState(false);\r\n  const [openArtFormDialog, setOpenArtFormDialog] = useState(false);\r\n  const [selectedArt, setSelectedArt] = useState(undefined);\r\n  const handleArtEdit = (e, tile) => {\r\n    if (artDataState === tile.artId) {\r\n      setUpdatedTile(tile);\r\n      setArtDataState(\"\");\r\n    } else {\r\n      setArtDataState(tile.artId);\r\n    }\r\n  };\r\n\r\n  const handleArtDescriptionEdit = async (e, tile) => {\r\n    let tempTiles = tiles;\r\n    let result = await descriptionEdit(tempTiles, tile, e);\r\n    setTiles(result);\r\n  };\r\n\r\n  const handleArtTitleEdit = async (e, tile) => {\r\n    let tempTiles = tiles;\r\n    let result = await titleEdit(tempTiles, tile, e);\r\n    setTiles(result);\r\n  };\r\n\r\n  const handleOriginalPhotoHeight = async (e, tile) => {\r\n    let tempTiles = tiles;\r\n    let result = await originalPhotoHeightEdit(tempTiles, tile, e);\r\n    setTiles(result);\r\n  };\r\n\r\n  const handleOriginalPhotoWidth = async (e, tile) => {\r\n    let tempTiles = tiles;\r\n    let result = await originalPhotoWidthEdit(tempTiles, tile, e);\r\n    setTiles(result);\r\n  };\r\n\r\n  const handleOriginalPhotoPpi = async (e, tile) => {\r\n    let tempTiles = tiles;\r\n    let result = await originalPhotoPpiEdit(tempTiles, tile, e);\r\n    setTiles(result);\r\n  };\r\n\r\n  const handleOriginalPhotoIso = async (e, tile) => {\r\n    let tempTiles = tiles;\r\n    let result = await originalPhotoIsoEdit(tempTiles, tile, e);\r\n    setTiles(result);\r\n  };\r\n\r\n  const handleArtTagsEdit = async (e, tile, tags) => {\r\n    let tempTiles = tiles;\r\n    let result = await tagsEdit(tempTiles, tile, e, tags);\r\n    setTiles(result);\r\n  };\r\n\r\n  const handleArtLocationEdit = async (e, tile) => {\r\n    let tempTiles = tiles;\r\n    let result = await locationEdit(tempTiles, tile, e);\r\n    setTiles(result);\r\n  };\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSelectedArt(undefined);\r\n  };\r\n\r\n  function tagsEdit(tempTiles, tile, e, tags) {\r\n    return tempTiles.map((item) => {\r\n      if (item.artId === tile.artId) {\r\n        item.tags = tags;\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  function locationEdit(tempTiles, tile, e) {\r\n    return tempTiles.map((item) => {\r\n      if (item.artId === tile.artId) {\r\n        item.artLocation = e.target.value;\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  function titleEdit(tempTiles, tile, e) {\r\n    return tempTiles.map((item) => {\r\n      if (item.artId === tile.artId) {\r\n        item.title = e.target.value;\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  function originalPhotoHeightEdit(tempTiles, tile, e) {\r\n    return tempTiles.map((item) => {\r\n      if (item.artId === tile.artId) {\r\n        item.originalPhotoHeight = e.target.value;\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  function originalPhotoWidthEdit(tempTiles, tile, e) {\r\n    return tempTiles.map((item) => {\r\n      if (item.artId === tile.artId) {\r\n        item.originalPhotoWidth = e.target.value;\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  function originalPhotoPpiEdit(tempTiles, tile, e) {\r\n    return tempTiles.map((item) => {\r\n      if (item.artId === tile.artId) {\r\n        item.originalPhotoPpi = e.target.value;\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  function originalPhotoIsoEdit(tempTiles, tile, e) {\r\n    return tempTiles.map((item) => {\r\n      if (item.artId === tile.artId) {\r\n        item.originalPhotoIso = e.target.value;\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  function descriptionEdit(tempTiles, tile, e) {\r\n    return tempTiles.map((item) => {\r\n      if (item.artId === tile.artId) {\r\n        item.description = e.target.value;\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  const maxPrintValues = (tile) => {\r\n    const [maxPrintWidthCm, maxPrintHeightCm] = utils.maxPrintCalc(\r\n      tile.originalPhotoWidth,\r\n      tile.originalPhotoHeight,\r\n      tile.originalPhotoPpi,\r\n      tile.originalPhotoIso\r\n    );\r\n\r\n    return maxPrintWidthCm + \" x \" + maxPrintHeightCm + \" cm\";\r\n  };\r\n\r\n  const navigateToPrixer = (e, prixerUsername) => {\r\n    // history.push({pathname:'/'+ prixerUsername});\r\n  };\r\n\r\n  // const copyCodeToClipboard = (e, tile) => {\r\n  //   const el = document.createElement('textarea');\r\n  //   el.value = utils.generateArtMessage(tile, 'copy');\r\n  //   document.body.appendChild(el);\r\n  //   el.select();\r\n  //   document.execCommand('copy');\r\n  //   document.body.removeChild(el);\r\n  // }\r\n\r\n  const deleteArt = async () => {\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/art/delete/\" + selectedArt;\r\n    let res = await axios.delete(base_url);\r\n    handleClose();\r\n    setSnackBarMessage(\"Arte eliminado exitosamente\");\r\n    setSnackBar(true);\r\n    readArt();\r\n  };\r\n\r\n  const readArt = async () => {\r\n    if (tiles) {\r\n      const base_url =\r\n        process.env.REACT_APP_BACKEND_URL + \"/art/read-by-prixer\";\r\n      const data = {\r\n        username: props.match.params.username,\r\n      };\r\n      axios.post(base_url, data).then((response) => {\r\n        if (tiles.length !== response.data.arts.length) {\r\n          setTiles(response.data.arts);\r\n          setReady(true);\r\n          if (document.getElementById(props.match.params.artId)) {\r\n            document.getElementById(props.match.params.artId).scrollIntoView({\r\n              behavior: \"smooth\",\r\n              block: \"center\",\r\n            });\r\n          } else {\r\n            // setSnackBarMessage(\r\n            //   \"Arte no encontrado, por favor inténtalo de nuevo.\"\r\n            // );\r\n            // setSnackBar(true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    readArt();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (artDataState === \"\") {\r\n      const base_url = process.env.REACT_APP_BACKEND_URL + \"/art/update\";\r\n      const data = {\r\n        title: updatedTile.title,\r\n        description: updatedTile.description,\r\n        tags: updatedTile.tags,\r\n        imageUrl: updatedTile.imageUrl,\r\n        thumbnailUrl: updatedTile.thumbnailUrl,\r\n        userId: updatedTile.userId,\r\n        category: updatedTile.category,\r\n        license: updatedTile.license,\r\n        use: updatedTile.use,\r\n        prixerUsername: updatedTile.prixerUsername,\r\n        status: updatedTile.status,\r\n        publicId: updatedTile.publicId,\r\n        _id: updatedTile._id,\r\n        artId: updatedTile.artId,\r\n        artType: updatedTile.artType,\r\n        originalPhotoWidth: updatedTile.originalPhotoWidth,\r\n        originalPhotoHeight: updatedTile.originalPhotoHeight,\r\n        originalPhotoIso: updatedTile.originalPhotoIso,\r\n        originalPhotoPpi: updatedTile.originalPhotoPpi,\r\n        artLocation: updatedTile.artLocation,\r\n      };\r\n      axios\r\n        .post(base_url, data)\r\n        .then((response) => {\r\n          if (response.data.data.success) {\r\n            setSnackBarMessage(response.data.data.artResult);\r\n            setSnackBar(true);\r\n          } else {\r\n            setSnackBarMessage(response.data.data.error_message);\r\n            setSnackBar(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error.response);\r\n        });\r\n    }\r\n  }, [artDataState]);\r\n\r\n  return !ready ? (\r\n    <div className={classes.loading}>\r\n      <CircularProgress />\r\n    </div>\r\n  ) : (\r\n    <Container component=\"main\" className={classes.paper}>\r\n      <div style={{ position: \"fixed\", zIndex: \"20\", marginTop: 10 }}>\r\n        <AppBar />\r\n      </div>\r\n      <div style={{ marginTop: 55 }}>\r\n        {tiles ? (\r\n          tiles.map((tile) =>\r\n            artDataState !== tile.artId ? (\r\n              <div id={tile.artId} key={tile.artId}>\r\n                <Card style={{ marginTop: 35 }}>\r\n                  <CardActionArea>\r\n                    {/* <CardMedia\r\n                component=\"img\"\r\n                alt=\"Contemplative Reptile\"\r\n                image={tile.imageUrl}\r\n                title=\"Contemplative Reptile\"\r\n                /> */}\r\n                    <Img\r\n                      placeholder=\"/imgLoading.svg\"\r\n                      style={{ backgroundColor: \"#eeeeee\", width: \"100%\" }}\r\n                      src={tile.largeThumbUrl || tile.thumbnailUrl}\r\n                      debounce={1000} // Default is 300 (ms)\r\n                      cache\r\n                      error=\"/imgError.svg\"\r\n                      srcSet={\r\n                        tile.smallThumbUrl +\r\n                        \" 600w, \" +\r\n                        tile.mediumThumbUrl +\r\n                        \" 850w, \" +\r\n                        tile.largeThumbUrl +\r\n                        \" 1300w\"\r\n                      }\r\n                      sizes=\"(min-width: 960px) 1300px, (min-width: 640px) 850px, 600px\"\r\n                      alt={tile.title}\r\n                      id={tile.artId}\r\n                    />\r\n                    <CardContent>\r\n                      <Grid\r\n                        item\r\n                        container\r\n                        xs={12}\r\n                        sm={12}\r\n                        style={{ whiteSpace: \"nowrap\", padding: 0, margin: 0 }}\r\n                        justify=\"space-between\"\r\n                      >\r\n                        <Typography\r\n                          style={{\r\n                            display: \"inline-block\",\r\n                            fontSize: \"0.8em\",\r\n                            paddingLeft: 0,\r\n                          }}\r\n                        >\r\n                          ID: {tile.artId}\r\n                        </Typography>\r\n                        <div onClick={navigateToPrixer(tile.prixerUsername)}>\r\n                          <Typography\r\n                            gutterBottom\r\n                            variant=\"h7\"\r\n                            component=\"h2\"\r\n                            style={{\r\n                              display: \"inline-block\",\r\n                              right: 0,\r\n                              textAlign: \"right\",\r\n                              margin: 0,\r\n                              fontSize: 12,\r\n                            }}\r\n                          >\r\n                            Prixer: {tile.prixerUsername}\r\n                          </Typography>\r\n                        </div>\r\n                      </Grid>\r\n                      <Grid\r\n                        item\r\n                        container\r\n                        xs={12}\r\n                        sm={12}\r\n                        justify=\"space-between\"\r\n                        style={{ textAlign: \"left\", padding: 0, margin: 0 }}\r\n                      >\r\n                        <Grid\r\n                          item\r\n                          xs={6}\r\n                          sm={6}\r\n                          style={{ textAlign: \"left\", padding: 0, margin: 0 }}\r\n                        >\r\n                          <Typography\r\n                            gutterBottom\r\n                            variant=\"h5\"\r\n                            component=\"h2\"\r\n                            style={{ margin: 0 }}\r\n                          >\r\n                            {tile.title}\r\n                          </Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid\r\n                        item\r\n                        container\r\n                        xs={12}\r\n                        sm={12}\r\n                        style={{ textAlign: \"left\", padding: 0, margin: 0 }}\r\n                      >\r\n                        {tile.artLocation && (\r\n                          <Typography\r\n                            style={{\r\n                              fontSize: \"0.8em\",\r\n                              paddingBottom: 10,\r\n                              paddingLeft: 3,\r\n                            }}\r\n                          >\r\n                            Ubicación: {tile.artLocation}\r\n                          </Typography>\r\n                        )}\r\n                      </Grid>\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        color=\"textSecondary\"\r\n                        component=\"p\"\r\n                        style={{\r\n                          whiteSpace: \"pre-line\",\r\n                          fontSize: \"1.1em\",\r\n                          marginBottom: 10,\r\n                        }}\r\n                      >\r\n                        {tile.description}\r\n                      </Typography>\r\n                      {tile.originalPhotoHeight && tile.originalPhotoWidth && (\r\n                        <Typography\r\n                          variant=\"body2\"\r\n                          color=\"textSecondary\"\r\n                          component=\"p\"\r\n                        >\r\n                          Máximo para impresión: {maxPrintValues(tile)}\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </CardActionArea>\r\n                  <CardActions>\r\n                    {/* <Button size=\"small\" color=\"primary\">\r\n                  Comparte\r\n                </Button> */}\r\n                    <Button\r\n                      size=\"small\"\r\n                      color=\"primary\"\r\n                      onClick={(e) => {\r\n                        window.open(utils.generateWaMessage(tile), \"_blank\");\r\n                      }}\r\n                    >\r\n                      <WhatsAppIcon /> Escríbenos\r\n                    </Button>\r\n                    {JSON.parse(localStorage.getItem(\"token\")) &&\r\n                      JSON.parse(localStorage.getItem(\"token\")).username ==\r\n                        tile.prixerUsername && (\r\n                        <Button\r\n                          size=\"small\"\r\n                          color=\"primary\"\r\n                          onClick={(e) => {\r\n                            handleArtEdit(e, tile);\r\n                          }}\r\n                        >\r\n                          Editar\r\n                        </Button>\r\n                      )}\r\n                    {/* <Button\r\n                      size=\"small\"\r\n                      color=\"primary\"\r\n                      onClick={(e) => {\r\n                        deleteArt(e, tile.artId);\r\n                      }}\r\n                    >\r\n                      Eliminar\r\n                    </Button> */}\r\n                    {JSON.parse(localStorage.getItem(\"token\")) &&\r\n                      JSON.parse(localStorage.getItem(\"token\")).username ==\r\n                        tile.prixerUsername && (\r\n                        <Button\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          onClick={(e) => {\r\n                            handleClickOpen(e);\r\n                            setSelectedArt(tile.artId);\r\n                          }}\r\n                        >\r\n                          Eliminar\r\n                          {/* onClick={(artId) => {\r\n                          deleteArt(artId)\r\n                            newImage({\r\n                            _id: img._id,\r\n                            file: image.file,\r\n                          });\r\n                        }} */}\r\n                        </Button>\r\n                      )}\r\n                    <Dialog\r\n                      open={open}\r\n                      onClose={handleClose}\r\n                      aria-labelledby=\"alert-dialog-title\"\r\n                      aria-describedby=\"alert-dialog-description\"\r\n                    >\r\n                      <DialogTitle id=\"alert-dialog-title\">\r\n                        {\"Estas seguro de eliminar este arte?\"}\r\n                      </DialogTitle>\r\n                      <DialogContent>\r\n                        <DialogContentText\r\n                          id=\"alert-dialog-description\"\r\n                          style={{\r\n                            textAlign: \"center\",\r\n                          }}\r\n                        >\r\n                          Este arte se eliminará permanentemente\r\n                        </DialogContentText>\r\n                      </DialogContent>\r\n                      <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                          Cancelar\r\n                        </Button>\r\n                        <Button\r\n                          onClick={() => {\r\n                            deleteArt(selectedArt);\r\n                            setSelectedArt(undefined);\r\n                          }}\r\n                          color=\"primary\"\r\n                        >\r\n                          Aceptar\r\n                        </Button>\r\n                      </DialogActions>\r\n                    </Dialog>\r\n                    {/* <Button size=\"small\" color=\"primary\" onClick={(e)=>{copyCodeToClipboard(e, tile)}}>\r\n                  <FileCopyIcon/>\r\n                </Button> */}\r\n                  </CardActions>\r\n                </Card>\r\n              </div>\r\n            ) : (\r\n              <Card id={tile.artId} key={tile.artId}>\r\n                <CardActionArea>\r\n                  {/* <CardMedia\r\n          component=\"img\"\r\n          alt=\"img\"\r\n          image={tile.imageUrl}\r\n          title=\"img\"\r\n          /> */}\r\n                  <Img\r\n                    placeholder=\"/imgLoading.svg\"\r\n                    style={{ backgroundColor: \"#eeeeee\", height: \"100%\" }}\r\n                    src={tile.largeThumbUrl || tile.thumbnailUrl}\r\n                    debounce={1000} // Default is 300 (ms)\r\n                    cache\r\n                    error=\"/imgError.svg\"\r\n                    srcSet={\r\n                      tile.smallThumbUrl +\r\n                      \" 600w, \" +\r\n                      tile.mediumThumbUrl +\r\n                      \" 850w, \" +\r\n                      tile.largeThumbUrl +\r\n                      \" 1300w\"\r\n                    }\r\n                    sizes=\"(min-width: 960px) 1300px, (min-width: 640px) 850px, 600px\"\r\n                    alt={tile.title}\r\n                    id={tile.artId}\r\n                  />\r\n                  <CardContent>\r\n                    <Grid item xs={12} container>\r\n                      <Grid item xs container direction=\"column\">\r\n                        <Grid item xs>\r\n                          <Grid item xs>\r\n                            <TextField\r\n                              fullWidth\r\n                              id=\"artTitle\"\r\n                              label=\"Titulo del arte\"\r\n                              variant=\"outlined\"\r\n                              value={tile.title}\r\n                              onChange={(e) => {\r\n                                handleArtTitleEdit(e, tile);\r\n                              }}\r\n                            />\r\n                          </Grid>\r\n                          {tile.artType === \"Foto\" && (\r\n                            <React.Fragment>\r\n                              <Grid\r\n                                item\r\n                                container\r\n                                xs={12}\r\n                                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                              >\r\n                                <Grid\r\n                                  item\r\n                                  xs={12}\r\n                                  sm={12}\r\n                                  style={{ textAlign: \"left\" }}\r\n                                >\r\n                                  <Typography\r\n                                    style={{\r\n                                      whiteSpace: \"pre-line\",\r\n                                      fontSize: \"1.3em\",\r\n                                    }}\r\n                                  >\r\n                                    {\" \"}\r\n                                    Medida del archivo original{\" \"}\r\n                                  </Typography>\r\n                                </Grid>\r\n                                {tile.originalPhotoWidth &&\r\n                                  tile.originalPhotoHeight && (\r\n                                    <Grid\r\n                                      item\r\n                                      container\r\n                                      xs={12}\r\n                                      sm={12}\r\n                                      style={{ paddingTop: 15 }}\r\n                                      justify=\"space-between\"\r\n                                    >\r\n                                      <Grid item xs={5} sm={5}>\r\n                                        <TextField\r\n                                          variant=\"outlined\"\r\n                                          fullWidth\r\n                                          id=\"originalPhotoWidth\"\r\n                                          label=\"Ancho\"\r\n                                          type=\"number\"\r\n                                          name=\"originalPhotoWidth\"\r\n                                          autoComplete=\"originalPhotoWidth\"\r\n                                          value={tile.originalPhotoWidth}\r\n                                          onChange={(e) => {\r\n                                            handleOriginalPhotoWidth(e, tile);\r\n                                            if (e.target.value < 2000) {\r\n                                              setSnackBarMessage(\r\n                                                \"La foto original debe tener un ancho mayor a 2.000 px.\"\r\n                                              );\r\n                                              setSnackBar(true);\r\n                                            }\r\n                                          }}\r\n                                        />\r\n                                      </Grid>\r\n                                      <Typography style={{ paddingTop: 13 }}>\r\n                                        {\" \"}\r\n                                        x{\" \"}\r\n                                      </Typography>\r\n                                      <Grid item xs={5} sm={5}>\r\n                                        <TextField\r\n                                          variant=\"outlined\"\r\n                                          fullWidth\r\n                                          type=\"number\"\r\n                                          id=\"originalPhotoHeight\"\r\n                                          label=\"Alto\"\r\n                                          name=\"originalPhotoHeight\"\r\n                                          autoComplete=\"originalPhotoHeight\"\r\n                                          value={tile.originalPhotoHeight}\r\n                                          onChange={(e) => {\r\n                                            handleOriginalPhotoHeight(e, tile);\r\n                                            if (e.target.value < 2000) {\r\n                                              setSnackBarMessage(\r\n                                                \"La foto original debe tener un alto mayor a 2.000 px.\"\r\n                                              );\r\n                                              setSnackBar(true);\r\n                                            }\r\n                                          }}\r\n                                        />\r\n                                      </Grid>\r\n                                      <Typography\r\n                                        style={{\r\n                                          paddingTop: 13,\r\n                                          paddingLeft: 2,\r\n                                        }}\r\n                                      >\r\n                                        {\" \"}\r\n                                        px{\" \"}\r\n                                      </Typography>\r\n                                    </Grid>\r\n                                  )}\r\n                                <Grid\r\n                                  item\r\n                                  container\r\n                                  xs={12}\r\n                                  sm={12}\r\n                                  style={{ paddingTop: 15 }}\r\n                                  justify=\"space-between\"\r\n                                >\r\n                                  <Grid item xs={5} sm={5}>\r\n                                    <TextField\r\n                                      variant=\"outlined\"\r\n                                      fullWidth\r\n                                      type=\"number\"\r\n                                      id=\"originalPhotoPpi\"\r\n                                      label=\"PPI\"\r\n                                      name=\"originalPhotoPpi\"\r\n                                      autoComplete=\"originalPhotoPpi\"\r\n                                      value={tile.originalPhotoPpi}\r\n                                      onChange={(e) => {\r\n                                        handleOriginalPhotoPpi(e, tile);\r\n                                        if (e.target.value < 100) {\r\n                                          setSnackBarMessage(\r\n                                            \"La foto original debe ser mayor a 100 ppi.\"\r\n                                          );\r\n                                          setSnackBar(true);\r\n                                        }\r\n                                      }}\r\n                                    />\r\n                                  </Grid>\r\n                                  <Grid\r\n                                    item\r\n                                    xs={5}\r\n                                    sm={6}\r\n                                    style={{ paddingLeft: 0 }}\r\n                                  >\r\n                                    <FormControl\r\n                                      variant=\"outlined\"\r\n                                      style={{ width: \"100%\" }}\r\n                                    >\r\n                                      <InputLabel\r\n                                        id=\"originalPhotoIsoLabel\"\r\n                                        style={{ width: \"100%\" }}\r\n                                      >\r\n                                        ISO\r\n                                      </InputLabel>\r\n                                      <Select\r\n                                        labelId=\"originalPhotoIsoLabel\"\r\n                                        id=\"originalPhotoIso\"\r\n                                        value={tile.originalPhotoIso}\r\n                                        onChange={(e) => {\r\n                                          handleOriginalPhotoIso(e, tile);\r\n                                        }}\r\n                                        label=\"originalPhotoIso\"\r\n                                      >\r\n                                        <MenuItem value=\"\">\r\n                                          <em></em>\r\n                                        </MenuItem>\r\n                                        {photoIsos.map((n) => (\r\n                                          <MenuItem key={n} value={n}>\r\n                                            {n}\r\n                                          </MenuItem>\r\n                                        ))}\r\n                                      </Select>\r\n                                    </FormControl>\r\n                                  </Grid>\r\n                                </Grid>\r\n                              </Grid>\r\n                              <Grid\r\n                                item\r\n                                container\r\n                                xs={12}\r\n                                justify=\"space-between\"\r\n                              >\r\n                                <Grid\r\n                                  item\r\n                                  xs={12}\r\n                                  sm={12}\r\n                                  style={{ textAlign: \"left\" }}\r\n                                >\r\n                                  <Typography\r\n                                    style={{\r\n                                      whiteSpace: \"pre-line\",\r\n                                      fontSize: \"1.3em\",\r\n                                    }}\r\n                                  >\r\n                                    {\" \"}\r\n                                    Medida máxima para impresión:\r\n                                  </Typography>\r\n                                </Grid>\r\n                                <Grid\r\n                                  item\r\n                                  xs={12}\r\n                                  sm={12}\r\n                                  style={{ textAlign: \"left\" }}\r\n                                >\r\n                                  <Typography\r\n                                    style={{\r\n                                      whiteSpace: \"pre-line\",\r\n                                      fontSize: \"1.3em\",\r\n                                    }}\r\n                                  >\r\n                                    {\" \"}\r\n                                    {maxPrintValues(tile)}{\" \"}\r\n                                  </Typography>\r\n                                </Grid>\r\n                              </Grid>\r\n                              <Grid item container xs={12}></Grid>\r\n                            </React.Fragment>\r\n                          )}\r\n                          {/* <Grid item container xs={12} style={{marginBottom: 15}}>\r\n                  <Grid item xs={4} sm={4}>\r\n                    <Typography style={{whiteSpace: 'pre-line', padding: 15, fontSize: '0.7em'}}> Máximo para <br/> impresión (cm) </Typography>\r\n                  </Grid>\r\n                  <Grid item container xs={8} sm={8}>\r\n                    <Grid item xs={5} sm={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"originalArtWidth\"\r\n                        label=\"Ancho\"\r\n                        name=\"originalArtWidth\"\r\n                        autoComplete=\"originalArtHeight\"\r\n                        value={tile.originalArtWidth}\r\n                        onChange={(e)=> {handleArtOriginalWidthEdit(e, tile)}}\r\n                      />\r\n                    </Grid>\r\n                      <Typography style={{padding: 10}}> x </Typography>\r\n                    <Grid item xs={5} sm={5}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"originalArtHeight\"\r\n                        label=\"Alto\"\r\n                        name=\"originalArtHeight\"\r\n                        autoComplete=\"originalArtHeight\"\r\n                        value={tile.originalArtHeight}\r\n                        onChange={(e)=> {handleArtOriginalHeightEdit(e, tile)}}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid> */}\r\n                          <Grid\r\n                            item\r\n                            xs\r\n                            style={{ marginBottom: 20, marginTop: 20 }}\r\n                          >\r\n                            <TextField\r\n                              multiline\r\n                              rows={2}\r\n                              fullWidth\r\n                              id=\"artDescription\"\r\n                              variant=\"outlined\"\r\n                              label=\"Descripción del arte\"\r\n                              value={tile.description}\r\n                              onChange={(e) => {\r\n                                handleArtDescriptionEdit(e, tile);\r\n                              }}\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={12} sm={12}>\r\n                            <Autocomplete\r\n                              multiple\r\n                              freeSolo\r\n                              id=\"tags-outlined\"\r\n                              options={[]}\r\n                              defaultValue={[]}\r\n                              value={tile.tags}\r\n                              onChange={(e, tags, reason) => {\r\n                                handleArtTagsEdit(e, tile, tags);\r\n                              }}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  onKeyDown={(e) => {\r\n                                    if (e.key === 13 && e.target.value) {\r\n                                      handleArtTagsEdit(e, tile);\r\n                                    }\r\n                                  }}\r\n                                  variant=\"outlined\"\r\n                                  label=\"Etiquetas\"\r\n                                  placeholder=\"tags\"\r\n                                />\r\n                              )}\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={12} style={{ paddingTop: 15 }}>\r\n                            <TextField\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                              id=\"artLocation\"\r\n                              label=\"Ubicación\"\r\n                              name=\"artLocation\"\r\n                              autoComplete=\"artLocation\"\r\n                              value={tile.artLocation}\r\n                              onChange={(e) => handleArtLocationEdit(e, tile)}\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                  {/* <Button size=\"small\" color=\"primary\">\r\n                Comparte\r\n                </Button> */}\r\n                  {JSON.parse(localStorage.getItem(\"token\")) &&\r\n                    JSON.parse(localStorage.getItem(\"token\")).username && (\r\n                      <Button\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        onClick={(e) => {\r\n                          handleArtEdit(e, tile);\r\n                        }}\r\n                      >\r\n                        Guardar\r\n                      </Button>\r\n                    )}\r\n                </CardActions>\r\n              </Card>\r\n            )\r\n          )\r\n        ) : (\r\n          <p>Prueba prueba</p>\r\n        )}\r\n        {openArtFormDialog && (\r\n          <ArtUploader\r\n            openArtFormDialog={openArtFormDialog}\r\n            setOpenArtFormDialog={setOpenArtFormDialog}\r\n          />\r\n        )}\r\n        {JSON.parse(localStorage.getItem(\"token\")) &&\r\n          JSON.parse(localStorage.getItem(\"token\")).username && (\r\n            <Grid className={classes.float}>\r\n              <FloatingAddButton setOpenArtFormDialog={setOpenArtFormDialog} />\r\n            </Grid>\r\n          )}\r\n        <Snackbar\r\n          open={snackBar}\r\n          autoHideDuration={2000}\r\n          message={snackBarMessage}\r\n          className={classes.snackbar}\r\n          onClose={() => setSnackBar(false)}\r\n        />\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordChange\\passwordChange.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\prixerProfile.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\adminLogin\\adminLoginPage.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\home\\home.jsx",["367","368"],"import React, { useState, Suspense, useEffect } from \"react\";\r\n// import AppBar from '@material-ui/core/AppBar';\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Carousel from \"react-material-ui-carousel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport AppBar from \"../sharedComponents/appBar/appBar\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport PhoneIcon from \"@material-ui/icons/Phone\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport PhotoLibraryIcon from \"@material-ui/icons/PhotoLibrary\";\r\nimport ArtsGrid from \"../prixerProfile/grid/grid\";\r\nimport PrixersGrid from \"../sharedComponents/prixerGrid/prixerGrid\";\r\nimport { InsertEmoticon } from \"@material-ui/icons\";\r\nimport InstagramIcon from \"@material-ui/icons/Instagram\";\r\nimport SimpleDialog from \"../sharedComponents/simpleDialog/simpleDialog\";\r\nimport FloatingAddButton from \"../sharedComponents/floatingAddButton/floatingAddButton\";\r\nimport WhatsAppIcon from \"@material-ui/icons/WhatsApp\";\r\nimport MaximizeIcon from \"@material-ui/icons/Maximize\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ArtUploader from \"../sharedComponents/artUploader/artUploader\";\r\nimport utils from \"../utils/utils\";\r\nimport TestimonialsFeed from \"../admin/TestimonialsCrud/TestimonialsFeed\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" href=\"https://prixelart.com/\">\r\n        Prixelart C.A.\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  iconTabs: {\r\n    flexGrow: 1,\r\n    maxWidth: 666,\r\n    margin: \"auto\",\r\n    marginBottom: 50,\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"left\",\r\n    overflowX: \"none\",\r\n    flexGrow: 1,\r\n    overflow: \"visible\",\r\n  },\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  heroContent: {\r\n    padding: theme.spacing(25, 0, 6),\r\n    minHeight: \"100vh\",\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    width: \"100%\",\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  cardMedia: {\r\n    paddingTop: \"56.25%\", // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n    position: \"relative\",\r\n    bottom: 0,\r\n  },\r\n  float: {\r\n    position: \"relative\",\r\n    marginLeft: \"87%\",\r\n  },\r\n  CarouselContent: {\r\n    width: \"100vw\",\r\n    heigh: \"92vh\",\r\n  },\r\n}));\r\n\r\nexport default function Home(props) {\r\n  const theme = useTheme();\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"md\"));\r\n  const isDeskTop = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const classes = useStyles();\r\n  const prixerUsername = \"all\";\r\n  const [imgsDesktop, setImgsDesktop] = useState({ imgs: [] });\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [openPrixers, setOpenPrixers] = useState(false);\r\n  const [openArts, setOpenArts] = useState(true);\r\n  const [openTestimonials, setOpenTestimonials] = useState(false);\r\n  // const [scrolledTop, setScrolledTop] = useState(false);\r\n  const history = useHistory();\r\n  const [openArtFormDialog, setOpenArtFormDialog] = useState(false);\r\n  // const imgsDesktop =  [\r\n  //     {\r\n  //       url: './Portada_de_Pagina_Web_Museo_Chuao_Espejo_PC_v2.jpg'\r\n  //     },\r\n  //     {\r\n  //       url : 'https://devprix.nyc3.digitaloceanspaces.com/bedroom-g9548c5f75_1920.jpg'\r\n  //     },\r\n  //     {\r\n  //       url : 'https://devprix.nyc3.digitaloceanspaces.com/corporate-building-with-minimalist-empty-room%202.jpg'\r\n  //     },\r\n  //     {\r\n  //       url : 'https://devprix.nyc3.digitaloceanspaces.com/Foto%20de%20Vecislavas%20Popa%20en%20Pexels_lINEAL%20120X40.2.jpg'\r\n  //     },\r\n  //     {\r\n  //       url : 'https://devprix.nyc3.digitaloceanspaces.com/interior_dark_blue_wall_with_yellow_sofa_and_decor_in_living_room.jpg'\r\n  //     },\r\n  //     {\r\n  //       url : 'https://devprix.nyc3.digitaloceanspaces.com/interior-g373dfef45_1920.2.jpg'\r\n  //     },\r\n  //     {\r\n  //       url : 'https://devprix.nyc3.digitaloceanspaces.com/interior-g373dfef45_1920.jpg'\r\n  //     }\r\n  //   ]\r\n  const imgsMobile = [\r\n    {\r\n      url: \"https://devprix.nyc3.digitaloceanspaces.com/Portada%20de%20Pagina%20Web_Museo%20Chuao%20Espejo_Telefono_V1.jpg\",\r\n    },\r\n    {\r\n      url: \"https://devprix.nyc3.digitaloceanspaces.com/Foto%20de%20Canva%20Studio%20en%20Pexels_16a9.jpg\",\r\n    },\r\n    {\r\n      url: \"https://devprix.nyc3.digitaloceanspaces.com/Foto%20de%20Medhat%20Ayad%20en%20Pexels_9a16.jpg\",\r\n    },\r\n    {\r\n      url: \"https://devprix.nyc3.digitaloceanspaces.com/Pixabay_%203X.2%20Phone.jpg\",\r\n    },\r\n    {\r\n      url: \"https://devprix.nyc3.digitaloceanspaces.com/Foto%20de%20Vecislavas%20Popa%20en%20Pexels_lINEAL%20120X40.2%20%20Phone.jpg\",\r\n    },\r\n    {\r\n      url: \"https://devprix.nyc3.digitaloceanspaces.com/Foto%20de%20Daria%20Shevtsova%20en%20Pexels.jpg\",\r\n    },\r\n  ];\r\n  const handleChange = (event, newValue) => {\r\n    if (newValue === 0) {\r\n      setOpenArts(true);\r\n      setOpenModal(false);\r\n      setOpenPrixers(false);\r\n      setOpenTestimonials(false);\r\n    } else if (newValue === 1) {\r\n      setOpenModal(false);\r\n      setOpenPrixers(true);\r\n      setOpenArts(false);\r\n      setOpenTestimonials(false);\r\n    } else if (newValue === 2) {\r\n      setOpenModal(false);\r\n      setOpenPrixers(false);\r\n      setOpenArts(false);\r\n      setOpenTestimonials(true);\r\n    } else if (newValue === 3) {\r\n      setOpenModal(true);\r\n      setOpenPrixers(false);\r\n      setOpenArts(false);\r\n      setOpenTestimonials(false);\r\n    } else {\r\n      setOpenModal(false);\r\n      setOpenPrixers(false);\r\n      setOpenArts(false);\r\n    }\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (prixerUsername == 'all') {\r\n  //     const base_url = process.env.REACT_APP_BACKEND_URL + \"/art/random\";\r\n\r\n  //     axios.get(base_url)\r\n  //       .then(response => {\r\n  //         // if (tiles.length != response.data.arts.length) {\r\n  //           setTiles(response.data.arts);\r\n  //         // }\r\n  //       });\r\n  //   }\r\n  // });\r\n\r\n  const getImagesForTheCarousel = () => {\r\n    const URI =\r\n      process.env.REACT_APP_BACKEND_URL + \"/admin/preferences/carousel\";\r\n    fetch(URI)\r\n      .then((res) =>\r\n        res\r\n          .json()\r\n          .then((data) => {\r\n            setImgsDesktop({ imgs: data.imagesCarousels });\r\n          })\r\n          .catch((err) => console.error(`Your request is wrong: ${err}`))\r\n      )\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  const handleGallery = (e) => {\r\n    e.preventDefault();\r\n    history.push({ pathname: \"/galeria\" });\r\n  };\r\n\r\n  const handleProductCatalog = (e) => {\r\n    e.preventDefault();\r\n    history.push({ pathname: \"/productos\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getImagesForTheCarousel();\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container component=\"main\" maxWidth=\"s\" className={classes.paper}>\r\n        <CssBaseline />\r\n        <Grid>\r\n          <AppBar prixerUsername={prixerUsername} />\r\n        </Grid>\r\n        <main>\r\n          <Card\r\n            className={classes.card}\r\n            style={{\r\n              display: \"flex\",\r\n              position: \"relative\",\r\n              width: \"100vw\",\r\n              marginLeft: isDesktop ? \"-24px\" : \"-16px\",\r\n              marginLeft: isDeskTop ? \"-24px\" : \"-16px\",\r\n              height: \"100vh\",\r\n            }}\r\n          >\r\n            <div className={classes.CarouselContent}>\r\n              <Carousel\r\n                stopAutoPlayOnHover={false}\r\n                animation=\"slide\"\r\n                duration={500}\r\n                fullHeightHover={false}\r\n                style={{ marginTop: isDesktop ? \"0\" : \"-40px\" }}\r\n                IndicatorIcon={<MaximizeIcon />}\r\n                NextIcon={<ArrowForwardIosIcon style={{ fontSize: \"3rem\" }} />}\r\n                PrevIcon={<ArrowBackIosIcon style={{ fontSize: \"3rem\" }} />}\r\n                navButtonsProps={{\r\n                  style: {\r\n                    backgroundColor: \"rgba(0, 0, 0, 0.1)\",\r\n                    width: \"98%\",\r\n                    height: \"100vh\",\r\n                    marginTop: \"-50vh\",\r\n                    borderRadius: \"0\",\r\n                    marginLeft: \"1px\",\r\n                  },\r\n                }}\r\n                indicatorContainerProps={{\r\n                  style: {\r\n                    marginTop: isDesktop ? \"-70px\" : \"-100px\",\r\n                    position: \"absolute\",\r\n                  },\r\n                }}\r\n              >\r\n                {isDesktop\r\n                  ? imgsDesktop.imgs.map((img, key_id) => {\r\n                      return (\r\n                        <div\r\n                          className={classes.heroContent}\r\n                          key={key_id}\r\n                          style={{\r\n                            backgroundImage: \"url(\" + img.carouselImages + \")\",\r\n                            backgroundSize: \"cover\",\r\n                            backgroundPosition: \"top\",\r\n                            marginTop: \"-24px\",\r\n                          }}\r\n                        ></div>\r\n                      );\r\n                    })\r\n                  : imgsMobile.map((img, key_id) => {\r\n                      return (\r\n                        <div\r\n                          className={classes.heroContent}\r\n                          key={key_id}\r\n                          style={{\r\n                            backgroundImage: \"url(\" + img.url + \")\",\r\n                            backgroundSize: \"cover\",\r\n                            backgroundPosition: \"left\",\r\n                          }}\r\n                        ></div>\r\n                      );\r\n                    })}\r\n              </Carousel>\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                justifyContent: \"space-around\",\r\n                color: \"#404e5c\",\r\n                backgroundColor: \"#fff\",\r\n                width: \"100%\",\r\n                minHeight: 50,\r\n                bottom: 0,\r\n                position: \"absolute\",\r\n                margin: 0,\r\n                padding: 10,\r\n              }}\r\n            >\r\n              <div style={{ left: 10, alignItems: \"center\", width: \"400px\" }}>\r\n                <Typography\r\n                  component=\"h1\"\r\n                  variant=\"h1\"\r\n                  align=\"left\"\r\n                  style={{\r\n                    fontSize: \"1.7em\",\r\n                    paddingLeft: 10,\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  gutterBottom\r\n                >\r\n                  Encuentra el <strong>cuadro</strong> ideal para ti.\r\n                </Typography>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  height: \"100%\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n              >\r\n                <div>\r\n                  <Grid item>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"white\"\r\n                      style={{ width: 85, color: \"#404e5c\", fontSize: 13 }}\r\n                      onClick={handleGallery}\r\n                    >\r\n                      Galería\r\n                    </Button>\r\n                  </Grid>\r\n                </div>\r\n                <div>\r\n                  <Grid item style={{ marginLeft: 10 }}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"white\"\r\n                      style={{ width: 85, color: \"#404e5c\", fontSize: 13 }}\r\n                      onClick={handleProductCatalog}\r\n                    >\r\n                      Productos\r\n                    </Button>\r\n                  </Grid>\r\n                </div>\r\n                <div>\r\n                  <Grid item style={{ marginLeft: 10 }}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      style={{ width: 105, color: \"#ffffff\", fontSize: 13 }}\r\n                      onClick={(e) => {\r\n                        window.open(utils.generateWaMessage(), \"_blank\");\r\n                      }}\r\n                    >\r\n                      <WhatsAppIcon /> Whatsapp\r\n                    </Button>\r\n                  </Grid>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n          <Container className={classes.cardGrid} maxWidth=\"xl\">\r\n            {/* End hero unit */}\r\n            {/* {scrolledTop ?\r\n              <Grid container spacing={1} style={{ position: 'fixed', top: 10 }}>\r\n                <Paper square className={classes.iconTabs}>\r\n                  <Tabs\r\n                    value={tabValue}\r\n                    onChange={handleChange}\r\n                    variant=\"fullWidth\"\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"secondary\"\r\n                    aria-label=\"icon label tabs example\"\r\n                  >\r\n                    <Tab icon={<PhotoLibraryIcon />} label=\"ARTES\" />\r\n                    <Tab icon={<FavoriteIcon />} label=\"PRIXERS\" />\r\n                    <Tab icon={<PhoneIcon />} label=\"TE ASESORAMOS\" />\r\n                  </Tabs>\r\n                </Paper>\r\n              </Grid>\r\n              : */}\r\n            <Grid container spacing={1}>\r\n              <Paper square className={classes.iconTabs}>\r\n                <Tabs\r\n                  value={tabValue}\r\n                  onChange={handleChange}\r\n                  variant=\"fullWidth\"\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"secondary\"\r\n                  aria-label=\"icon label tabs example\"\r\n                >\r\n                  <Tab icon={<PhotoLibraryIcon />} label=\"ARTES\" />\r\n                  <Tab icon={<FavoriteIcon />} label=\"PRIXERS\" />\r\n                  <Tab icon={<InsertEmoticon />} label=\"TESTIMONIOS\" />\r\n                  <Tab icon={<PhoneIcon />} label=\"TE ASESORAMOS\" />\r\n                  {/* <Tab icon={<PersonPinIcon />} label=\"CONFÍA EN PRIX\" /> */}\r\n                </Tabs>\r\n              </Paper>\r\n            </Grid>\r\n            {/* } */}\r\n            {\r\n              openArts && (\r\n                // <Suspense fallback={<div>Loading...</div>}>\r\n                <ArtsGrid prixerUsername={null} />\r\n              )\r\n              // </Suspense>\r\n            }\r\n            {\r\n              openPrixers && (\r\n                // <Suspense fallback={<div>Loading...</div>}>\r\n                <PrixersGrid />\r\n              )\r\n              // </Suspense>\r\n            }\r\n            {openTestimonials && (\r\n              // <Suspense fallback={<div>Loading...</div>}>\r\n              <TestimonialsFeed />\r\n              // </Suspense>\r\n            )}\r\n          </Container>\r\n        </main>\r\n        {/* Footer */}\r\n        <footer className={classes.footer}>\r\n          <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n            Si quieres convertirte en un Prixer{\" \"}\r\n            <a target=\"blank\" href=\"https://prixelart.com/registrar\">\r\n              regístrate\r\n            </a>\r\n            .\r\n          </Typography>\r\n          <Typography\r\n            variant=\"subtitle1\"\r\n            align=\"center\"\r\n            color=\"textSecondary\"\r\n            component=\"p\"\r\n          >\r\n            <a target=\"blank\" href=\"https://instagram.com/prixelart\">\r\n              <InstagramIcon />\r\n            </a>\r\n          </Typography>\r\n          <Copyright />\r\n        </footer>\r\n        {/* End footer */}\r\n      </Container>\r\n      {openArtFormDialog && (\r\n        <ArtUploader\r\n          openArtFormDialog={openArtFormDialog}\r\n          setOpenArtFormDialog={setOpenArtFormDialog}\r\n        />\r\n      )}\r\n      {JSON.parse(localStorage.getItem(\"token\")) &&\r\n        JSON.parse(localStorage.getItem(\"token\")).username && (\r\n          <Grid className={classes.float}>\r\n            <FloatingAddButton setOpenArtFormDialog={setOpenArtFormDialog} />\r\n          </Grid>\r\n        )}\r\n      {openModal && (\r\n        <SimpleDialog\r\n          arts={openArts}\r\n          setTabValue={setTabValue}\r\n          setArts={setOpenArts}\r\n          open={openModal}\r\n          setOpen={setOpenModal}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordReset\\forgotPassword.jsx",["369","370","371","372","373","374","375","376"],"//Llevar el Password a un componente propio.\r\n\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nimport Copyright from '../../sharedComponents/Copyright/copyright';\r\n\r\n//material-ui\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport clsx from 'clsx';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  snackbar: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      bottom: 90,\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default function ForgotPassword() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [email, setEmail] = useState('');\r\n\r\n  //Error states.\r\n  const [errorMessage, setErrorMessage] = useState();\r\n  const [snackBarError, setSnackBarError] = useState(false);\r\n\r\n  const handleSubmit = (e)=> {\r\n    e.preventDefault();\r\n    if(!email) {\r\n      setErrorMessage('Por favor indica tu correo electrónico registrado para reestablecer tu contraseña.');\r\n      setSnackBarError(true);\r\n    } else {\r\n    const base_url= process.env.REACT_APP_BACKEND_URL + \"/forgot-password\";\r\n    const data= {\r\n      'email': email,\r\n      };\r\n    axios.post(base_url,data)\r\n    .then(async response =>{\r\n        if(!response.data.success){\r\n        //   setCurrentPasswordError(true);\r\n          setErrorMessage(response.data.info);\r\n          setSnackBarError(true);\r\n        } else {\r\n          setErrorMessage('Hemos enviado un enlace a tu correo electrónico.');\r\n          setSnackBarError(true);\r\n          await sleep(3000);\r\n          history.push({pathname:'/'});\r\n        }\r\n    })\r\n    .catch(error =>{\r\n        console.log(error.response)\r\n    })\r\n  }\r\n   } \r\n\r\n\r\n   const handleEmailChange = (e)=> {\r\n     setEmail(e.target.value)\r\n   }\r\n\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Solicita el cambio de contraseña\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    // error={emailError}\r\n                    id=\"email\"\r\n                    label=\"Correo electrónico\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                    value={email}\r\n                    onChange={handleEmailChange}\r\n                />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            value=\"submit\"\r\n          >\r\n            Recuperar acceso\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n      <Snackbar\r\n          open={snackBarError}\r\n          autoHideDuration={6000}\r\n          message={errorMessage}\r\n          className={classes.snackbar}\r\n        />\r\n    </Container>\r\n  );\r\n}","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\passwordReset\\passwordReset.jsx",["377"],"//Llevar el Password a un componente propio.\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport validations from '../../utils/validations';\r\nimport Copyright from '../../sharedComponents/Copyright/copyright';\r\n\r\n//material-ui\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport clsx from 'clsx';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  snackbar: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      bottom: 90,\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: '25ch',\r\n    },\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default function PasswordReset(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [showNewPassword, setShowNewPassword] = useState(false);\r\n  const token = props.match.params.token;\r\n  const [backdrop, setBackdrop] = useState(true);\r\n\r\n  //Error states.\r\n  const [newPasswordError, setNewPasswordError] = useState();\r\n  const [errorMessage, setErrorMessage] = useState();\r\n  const [snackBarError, setSnackBarError] = useState(false);\r\n\r\n//FALTA AGREGAR AQUI LA VALIDACION DE QUE EL LINK EXISTE.\r\n  useEffect(()=>{\r\n\r\n    if(!token) {\r\n        setErrorMessage('Token inválido o expirado. Por favor inténtalo de nuevo.');\r\n        setSnackBarError(true);\r\n    } else {\r\n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/pw-token-check\";\r\n        const data= {\r\n          'token': token\r\n          };\r\n        axios.post(base_url,data)\r\n        .then(response =>{\r\n            if(!response.data.success){\r\n                setErrorMessage(response.data.info);\r\n                setSnackBarError(true);\r\n            } else {\r\n                setBackdrop(false);\r\n            }\r\n        })\r\n        .catch(error =>{\r\n            console.log(error.response)\r\n        })\r\n      }\r\n\r\n  });\r\n\r\n  const handleSubmit = (e)=> {\r\n    e.preventDefault();\r\n    if((!newPassword)) {\r\n      setErrorMessage('Por favor completa todos los campos requeridos.');\r\n      setSnackBarError(true);\r\n    } else {\r\n    const base_url= process.env.REACT_APP_BACKEND_URL + \"/reset-password\";\r\n    const data= {\r\n      'token': token,\r\n      'newPassword': newPassword\r\n      };\r\n    axios.post(base_url,data)\r\n    .then(response =>{\r\n        if(!response.data.success){\r\n          setNewPasswordError(true);\r\n          setErrorMessage(\"Por favor intentar nuevamente\");\r\n          setSnackBarError(true);\r\n        } else {\r\n          setErrorMessage(response.data.info);\r\n          setSnackBarError(true);\r\n          history.push({pathname:'/iniciar'});\r\n        }\r\n    })\r\n    .catch(error =>{\r\n        console.log(error.response)\r\n    })\r\n  }\r\n   } \r\n\r\n//New password\r\nconst handleNewPasswordChange = (e)=> {\r\n    if(validations.isAValidPassword(e.target.value)) {\r\n      setNewPassword(e.target.value); \r\n      setNewPasswordError(false);\r\n      setSnackBarError(false);\r\n    } else {\r\n      setNewPassword(e.target.value); \r\n      setNewPasswordError(true); \r\n      setErrorMessage('Disculpa, tu contraseña nueva debe tener entre 8 y 15 caracteres, incluyendo al menos: una minúscula, una mayúscula, un número y un caracter especial.');\r\n      setSnackBarError(true);\r\n    }\r\n   }\r\n\r\n    const handleClickShowNewPassword = () => {\r\n      setShowNewPassword(!showNewPassword);\r\n    };\r\n  \r\n    const handleMouseDownNewPassword = (event) => {\r\n      event.preventDefault();\r\n    };\r\n//END New password\r\n\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n    <Backdrop className={classes.backdrop} open={backdrop}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Cambia tu contraseña\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n            <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n              <InputLabel htmlFor=\"new-password\">Contraseña nueva</InputLabel>\r\n              <OutlinedInput\r\n                id=\"new-password\"\r\n                type={showNewPassword ? 'text' : 'password'}\r\n                value={newPassword}\r\n                label=\"Contraseña nueva\"\r\n                error={newPasswordError}\r\n                onChange={handleNewPasswordChange}\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      onClick={handleClickShowNewPassword}\r\n                      onMouseDown={handleMouseDownNewPassword}\r\n                      edge=\"end\"\r\n                    >\r\n                      {showNewPassword ? <Visibility /> : <VisibilityOff />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n                labelWidth={100}\r\n              />\r\n            </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            value=\"submit\"\r\n          >\r\n            Cambiar contraseña\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n      <Snackbar\r\n          open={snackBarError}\r\n          autoHideDuration={6000}\r\n          message={errorMessage}\r\n          className={classes.snackbar}\r\n        />\r\n    </Container>\r\n  );\r\n}","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\adminMain.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\validations.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\utils.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\grid\\grid.jsx",["378","379"],"//[]      17. Búsqueda de Prixers.\r\n//[]      21. Términos y condiciones.\r\n//[]      16. Filtros para las búsquedas (Por etiqueta).\r\n//[]      25. Editar datos de la imagen en la tarjeta del grid grande.\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Img from \"react-cool-img\";\r\n\r\nimport utils from \"../../utils/utils\";\r\nimport SearchBar from \"../../sharedComponents/searchBar/searchBar.jsx\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    // maxWidth: 850,\r\n    paddingTop: 15,\r\n  },\r\n  img: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      maxHeight: 180,\r\n    },\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      minHeight: 300,\r\n      maxHeight: 300,\r\n    },\r\n    [theme.breakpoints.up(\"lg\")]: {\r\n      // minHeight: 300,\r\n      // maxHeight: 450,\r\n      minWidth: 300,\r\n    },\r\n    [theme.breakpoints.up(\"xl\")]: {\r\n      minHeight: 450,\r\n      maxHeight: 450,\r\n    },\r\n  },\r\n  imagen: {\r\n    objectFit: \"fill\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default function Grid(props) {\r\n  const classes = useStyles();\r\n  const [tiles, setTiles] = useState([]);\r\n  const history = useHistory();\r\n  let globalParams = new URLSearchParams(window.location.search);\r\n  const [searchValue, setSearchValue] = useState(\r\n    globalParams.get(\"name\") || null\r\n  );\r\n  const [backdrop, setBackdrop] = useState(true);\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"md\"));\r\n\r\n  useEffect(() => {\r\n    if (props.prixerUsername || globalParams.get(\"prixer\")) {\r\n      if (searchValue) {\r\n        const base_url =\r\n          process.env.REACT_APP_BACKEND_URL + \"/art/read-by-username-by-query\";\r\n        const params = {\r\n          text: searchValue,\r\n          username: props.prixerUsername || globalParams.get(\"prixer\"),\r\n        };\r\n        axios.get(base_url, { params }).then((response) => {\r\n          setTiles(utils.shuffle(response.data.arts));\r\n          setBackdrop(false);\r\n        });\r\n      } else {\r\n        const base_url =\r\n          process.env.REACT_APP_BACKEND_URL + \"/art/read-by-prixer\";\r\n        const body = {\r\n          username: props.prixerUsername || globalParams.get(\"prixer\"),\r\n        };\r\n        axios.post(base_url, body).then((response) => {\r\n          setTiles(utils.shuffle(response.data.arts));\r\n          setBackdrop(false);\r\n        });\r\n      }\r\n    } else if (searchValue) {\r\n      const base_url = process.env.REACT_APP_BACKEND_URL + \"/art/read-by-query\";\r\n      const params = {\r\n        text: searchValue,\r\n      };\r\n      axios.get(base_url, { params }).then((response) => {\r\n        setTiles(utils.shuffle(response.data.arts));\r\n        setBackdrop(false);\r\n      });\r\n    } else {\r\n      const base_url = process.env.REACT_APP_BACKEND_URL + \"/art/read-all\";\r\n      axios.get(base_url).then((response) => {\r\n        setTiles(utils.shuffle(response.data.arts));\r\n        setBackdrop(false);\r\n      });\r\n    }\r\n  }, [searchValue]);\r\n\r\n  const handleFullImage = (e, tile) => {\r\n    history.push({\r\n      pathname: \"/\" + tile.prixerUsername + \"/art/\" + e.target.id,\r\n    });\r\n  };\r\n\r\n  const searchPhotos = (e, queryValue) => {\r\n    setSearchValue(queryValue);\r\n    if (props.prixerUsername || globalParams.get(\"prixer\")) {\r\n      if (globalParams.get(\"prixer\")) {\r\n        history.push({\r\n          pathname:\r\n            \"/galeria/s?prixer=\" +\r\n            globalParams.get(\"prixer\") +\r\n            \"&name=\" +\r\n            queryValue,\r\n        });\r\n      } else {\r\n        history.push({\r\n          pathname:\r\n            \"/galeria/s?prixer=\" + props.prixerUsername + \"&name=\" + queryValue,\r\n        });\r\n      }\r\n    } else {\r\n      history.push({ pathname: \"/galeria/s?name=\" + queryValue });\r\n    }\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Backdrop className={classes.backdrop} open={backdrop}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <div style={{ width: \"100%\", display: \"flex\", justifyContent: \"center\" }}>\r\n        <SearchBar\r\n          searchPhotos={searchPhotos}\r\n          searchValue={3}\r\n          setSearchValue={setSearchValue}\r\n        />\r\n      </div>\r\n      <GridList\r\n        cellSize={\"auto\"}\r\n        className={classes.gridList}\r\n        cols={isDesktop ? 4 : 2}\r\n        style={{ margin: \"0\", justifyContent: \"center\" }}\r\n      >\r\n        {tiles ? (\r\n          tiles.map((tile) => (\r\n            <GridListTile\r\n              style={{\r\n                width: isDesktop ? \"300px\" : \"50%\",\r\n              }}\r\n              key={tile.artId}\r\n              cols={1}\r\n              onClick={(e) => {\r\n                handleFullImage(e, tile);\r\n              }}\r\n              className={classes.img}\r\n            >\r\n              <Img\r\n                // className={classes.}\r\n                placeholder=\"/imgLoading.svg\"\r\n                style={{\r\n                  backgroundColor: \"#eeeeee\",\r\n                  width: \"300px\",\r\n                  height: \"300px\",\r\n                  objectFit: \"cover\",\r\n                }}\r\n                src={tile.squareThumbUrl}\r\n                debounce={1000}\r\n                cache\r\n                error=\"/imgError.svg\"\r\n                // srcSet={tile.smallThumbUrl + ' 600w, ' + tile.mediumThumbUrl + ' 850w, ' + tile.largeThumbUrl + ' 1300w'}\r\n                // sizes=\"(min-width: 1600px) 850px, (min-width: 960px) 450px, (min-width: 640px) 400px, 200px\"\r\n                sizes=\"(min-width: 1600px) 850px, (min-width: 960px) 450px, (min-width: 640px) 200px, (min-width: 375px) 80px\"\r\n                alt={tile.title}\r\n                id={tile.artId}\r\n              />\r\n            </GridListTile>\r\n          ))\r\n        ) : (\r\n          <h1>Pronto encontrarás todo el arte que buscas.</h1>\r\n        )}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\TestimonialsCrud\\TestimonialsFeed.jsx",["380","381"],"import { React, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardMedia: {\r\n    paddingTop: \"81.25%\",\r\n    borderRadius: \"50%\",\r\n    margin: \"28px\",\r\n  },\r\n  loading: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n    marginLeft: \"50vw\",\r\n    marginTop: \"50vh\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: \"15px\",\r\n  },\r\n  input: {\r\n    padding: \"2\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  avatar: {\r\n    width: 80,\r\n    height: 80,\r\n  },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nexport default function TestimonialsFeed() {\r\n  const classes = useStyles();\r\n  const [tiles, setTiles] = useState([]);\r\n  const theme = useTheme();\r\n\r\n  const readTestimonial = async () => {\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/testimonial/read-all\";\r\n    const res = await axios\r\n      .get(base_url)\r\n      .then((response) => {\r\n        setTiles(response.data.testimonials);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  useEffect(() => {\r\n    readTestimonial();\r\n  }, []);\r\n\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={2}\r\n      xs={12}\r\n      style={{\r\n        width: \"100%\",\r\n        padding: isMobile ? \"0px\" : \"18px\",\r\n        display: \"flex\",\r\n        textAlign: \"start\",\r\n      }}\r\n    >\r\n      {tiles.map(\r\n        (tile) =>\r\n          tile.status && (\r\n            <Grid item xs={12} sm={12} md={6} lg={4} xl={4}>\r\n              <Paper\r\n                className={classes.paper}\r\n                style={{\r\n                  padding: \"15px\",\r\n                  height: 240,\r\n                }}\r\n              >\r\n                <Grid key={tile._id} style={{ width: \"100%\" }}>\r\n                  <Grid container spacing={1}>\r\n                    <Grid marginBottom={2} style={{ width: \"100%\" }}>\r\n                      <Box style={{ display: \"flex\", paddingLeft: \"20px\" }}>\r\n                        <Avatar className={classes.avatar} src={tile.avatar} />\r\n                        <Box\r\n                          style={{\r\n                            paddingLeft: \"30px\",\r\n                          }}\r\n                        >\r\n                          <Typography>{tile.name}</Typography>\r\n                          <Typography variant={\"body2\"} color={\"secondary\"}>\r\n                            {tile.type}\r\n                          </Typography>\r\n                        </Box>\r\n                      </Box>\r\n                      <Box>\r\n                        <Typography\r\n                          variant={\"body2\"}\r\n                          style={{\r\n                            display: \"flex\",\r\n                            textAlign: \"center\",\r\n                            justifyContent: \"center\",\r\n                            paddingTop: \"10px\",\r\n                          }}\r\n                        >\r\n                          {tile.value}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box\r\n                        style={{\r\n                          paddingTop: \"8px\",\r\n                        }}\r\n                      >\r\n                        <Typography\r\n                          variant={\"body2\"}\r\n                          color=\"secondary\"\r\n                          style={{\r\n                            display: \"flex\",\r\n                            textAlign: \"center\",\r\n                            justifyContent: \"center\",\r\n                          }}\r\n                        >\r\n                          {tile.footer}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n            </Grid>\r\n          )\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\TestimonialsCrud\\Testimonials.jsx",["382","383","384","385","386","387","388","389"],"import { React, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Backdrop } from \"@material-ui/core\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nfunction getStyles(type, theme) {\r\n  return {\r\n    fontWeight:\r\n      type.indexOf(type) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardMedia: {\r\n    paddingTop: \"81.25%\",\r\n    borderRadius: \"50%\",\r\n    margin: \"28px\",\r\n  },\r\n  loading: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n    marginLeft: \"50vw\",\r\n    marginTop: \"50vh\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: \"15px\",\r\n  },\r\n  input: {\r\n    padding: \"2\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  avatar: {\r\n    width: 80,\r\n    height: 80,\r\n  },\r\n  snackbar: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      bottom: 90,\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nexport default function Testimonials() {\r\n  const classes = useStyles();\r\n  const [avatar, setAvatar] = useState({ file: \"\", _id: \"\" });\r\n  const [type, setType] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [value, setValue] = useState(\"\");\r\n  const [footer, setFooter] = useState(\"\");\r\n  const [tiles, setTiles] = useState([]);\r\n  const [backdrop, setBackdrop] = useState(true); // borrar\r\n  const theme = useTheme();\r\n  const [avatarObj, setAvatarObj] = useState(\"\");\r\n  const [avatarPic, setAvatarPic] = useState(\"\");\r\n  const [inputChange, setInputChange] = useState(false);\r\n  const [state, setState] = useState({\r\n    checkedA: true,\r\n  });\r\n  const [updateId, setUpdateId] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const handleChangeType = (event) => {\r\n    setType(event.target.value);\r\n  };\r\n\r\n  const [errorMessage, setErrorMessage] = useState();\r\n  const [snackBarError, setSnackBarError] = useState(false);\r\n\r\n  const readTestimonial = async () => {\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/testimonial/read-all\";\r\n    const res = await axios\r\n      .get(base_url)\r\n      .then((response) => {\r\n        setTiles(response.data.testimonials);\r\n        setBackdrop(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  useEffect(() => {\r\n    readTestimonial();\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!type || !name || !value || !avatar || !state) {\r\n      setErrorMessage(\"Por favor completa todos los campos requeridos.\");\r\n      setSnackBarError(true);\r\n    } else {\r\n      setLoading(true);\r\n      const formData = new FormData();\r\n      formData.append(\"avatar\", avatarPic);\r\n      formData.append(\"type\", type);\r\n      formData.append(\"name\", name);\r\n      formData.append(\"value\", value);\r\n      formData.append(\"footer\", footer);\r\n      formData.append(\"status\", state.checkedA);\r\n\r\n      const base_url =\r\n        process.env.REACT_APP_BACKEND_URL + \"/testimonial/create\";\r\n\r\n      const response = axios\r\n        .post(base_url, formData, {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        })\r\n        .then((response) => {\r\n          if (response.data.success === false) {\r\n            setLoading(false);\r\n            setErrorMessage(response.data.message);\r\n            setSnackBarError(true);\r\n          } else {\r\n            setErrorMessage(\"Creación de testimonio exitoso\");\r\n            setSnackBarError(true);\r\n            setLoading(false);\r\n            readTestimonial();\r\n          }\r\n        })\r\n\r\n        .catch((error) => {\r\n          setLoading(false);\r\n          console.log(error.response);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  }; //Switch\r\n\r\n  const onImageChange = async (e) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      setInputChange(true);\r\n      setAvatarObj(URL.createObjectURL(e.target.files[0]));\r\n      setAvatarPic(e.target.files[0]);\r\n    } //Avatar\r\n  };\r\n  const deleteTestimonial = async (DeleteId) => {\r\n    setLoading(true);\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/testimonial/read/\" + DeleteId;\r\n    let res = await axios.delete(base_url);\r\n    setErrorMessage(\"Testimonio eliminado exitosamente\");\r\n    setSnackBarError(true);\r\n    setLoading(false);\r\n    readTestimonial();\r\n  };\r\n\r\n  const ChangeVisibility = async (e, GetId) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    handleChange(e);\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/testimonial/update-home/\" + GetId;\r\n    const response = await axios.put(\r\n      base_url,\r\n      { status: state.checkedA },\r\n      {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      }\r\n    );\r\n    setLoading(false);\r\n    readTestimonial();\r\n  };\r\n\r\n  const handleTestimonialDataEdit = async (GetId) => {\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/testimonial/\" + GetId;\r\n    const response = await axios.get(base_url);\r\n    setName(response.data.name);\r\n    setAvatarObj(response.data.avatar);\r\n    setType(response.data.type);\r\n    setValue(response.data.value);\r\n    setFooter(response.data.footer);\r\n    setState(response.data.status);\r\n    setUpdateId(GetId);\r\n  };\r\n\r\n  const saveChanges = async (e, GetId) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/testimonial/update/\" + GetId;\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"avatar\", avatarPic || avatarObj);\r\n    formData.append(\"type\", type);\r\n    formData.append(\"name\", name);\r\n    formData.append(\"value\", value);\r\n    formData.append(\"footer\", footer);\r\n    formData.append(\"status\", state.checkedA || state);\r\n    const response = await axios.put(base_url, formData, {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    });\r\n    setName(\"\");\r\n    setAvatarObj(\"\");\r\n    setType(\"\");\r\n    setValue(\"\");\r\n    setFooter(\"\");\r\n    setState(false);\r\n    setUpdateId(undefined);\r\n    setLoading(false);\r\n    readTestimonial();\r\n  };\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Backdrop className={classes.backdrop} open={loading}>\r\n        <CircularProgress />\r\n      </Backdrop>\r\n      <Paper className={classes.paper}>\r\n        <AppBar position=\"static\">\r\n          <Typography\r\n            style={{\r\n              display: \"flex\",\r\n              alignContent: \"center\",\r\n              padding: \"10px 40px\",\r\n            }}\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n          >\r\n            Testimonios\r\n          </Typography>\r\n        </AppBar>\r\n\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          xs={12}\r\n          style={{\r\n            width: \"100%\",\r\n            padding: isMobile ? \"0px\" : \"18px\",\r\n            display: \"flex\",\r\n            textAlign: \"start\",\r\n          }}\r\n        >\r\n          <Grid\r\n            style={{\r\n              padding: isMobile ? \"0px\" : \"24px\",\r\n              paddingBottom: \"15px\",\r\n              margin: isMobile ? \"0px\" : \"15px\",\r\n            }}\r\n            className={classes.paper}\r\n            item\r\n            xs={12}\r\n            sm={12}\r\n            md={12}\r\n            lg={10}\r\n            xl={10}\r\n          >\r\n            <Paper\r\n              style={{ padding: isMobile ? \"8px\" : \"24px\" }}\r\n              className={classes.paper}\r\n              xs={12}\r\n              sm={12}\r\n            >\r\n              <form\r\n                encType=\"multipart/form-data\"\r\n                onSubmit={handleSubmit}\r\n                className={classes.form}\r\n                margin={6}\r\n              >\r\n                <Grid container spacing={1} style={{ paddingBottom: \"10px\" }}>\r\n                  {loading && (\r\n                    <div className={classes.loading}>\r\n                      <CircularProgress />\r\n                    </div>\r\n                  )}\r\n                  <Box\r\n                    padding={\"4px\"}\r\n                    paddingRight={4}\r\n                    paddingLeft={2}\r\n                    style={{\r\n                      width: \"30%\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    {avatarObj ? (\r\n                      <Avatar className={classes.avatar}>\r\n                        <label htmlFor=\"file-input\">\r\n                          <img\r\n                            src={avatarObj}\r\n                            alt=\"testimonial avatar\"\r\n                            style={{\r\n                              maxHeight: 80,\r\n                            }}\r\n                          />\r\n                        </label>\r\n                        <input\r\n                          style={{ display: \"none\" }}\r\n                          accept=\"image/*\"\r\n                          id=\"file-input\"\r\n                          type=\"file\"\r\n                          onChange={onImageChange}\r\n                          required\r\n                          name=\"avatar\"\r\n                        />\r\n                      </Avatar>\r\n                    ) : (\r\n                      <Avatar className={classes.avatar}>\r\n                        <label htmlFor=\"file-input\">\r\n                          <AddIcon\r\n                            style={{\r\n                              width: 40,\r\n                              height: 40,\r\n                              color: \"#d33f49\",\r\n                            }}\r\n                          />\r\n                        </label>\r\n                        <input\r\n                          style={{ display: \"none\" }}\r\n                          accept=\"image/*\"\r\n                          id=\"file-input\"\r\n                          type=\"file\"\r\n                          onChange={onImageChange}\r\n                          name=\"avatar\"\r\n                        />\r\n                      </Avatar>\r\n                    )}\r\n                  </Box>\r\n                  <Grid item xs={8} sm={8} md={8} lg={8} xl={8} padding={10}>\r\n                    <InputLabel style={{ fontSize: \".85em\" }}>Tipo</InputLabel>\r\n                    <Select\r\n                      style={{ width: \"100%\" }}\r\n                      labelId=\"tipo\"\r\n                      id=\"tipo\"\r\n                      value={type}\r\n                      onChange={(e) => handleChangeType(e)}\r\n                      MenuProps={MenuProps}\r\n                    >\r\n                      {[\"Prixer\", \"Compañía\", \"Cliente\"].map((type) => (\r\n                        <MenuItem\r\n                          key={type}\r\n                          value={type}\r\n                          style={getStyles(type, theme)}\r\n                        >\r\n                          {type}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={12}>\r\n                    <TextField\r\n                      autoComplete=\"fname\"\r\n                      name=\"name\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      type=\"text\"\r\n                      value={name}\r\n                      id=\"name\"\r\n                      label=\"Nombre\"\r\n                      autoFocus\r\n                      onChange={(e) => {\r\n                        setName(e.target.value);\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12}>\r\n                    <TextField\r\n                      autoComplete=\"fname\"\r\n                      name=\"value\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      type=\"text\"\r\n                      value={value}\r\n                      inputProps={{ maxLenght: 160 }}\r\n                      id=\"value\"\r\n                      label=\"Body\"\r\n                      autoFocus\r\n                      multiline\r\n                      rows={3}\r\n                      onChange={(e) => {\r\n                        setValue(e.target.value);\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      name=\"footer\"\r\n                      label=\"Footer\"\r\n                      type=\"text\"\r\n                      value={footer}\r\n                      inputProps={{ maxLenght: 60 }}\r\n                      id=\"footer\"\r\n                      autoComplete=\"fname\"\r\n                      onChange={(e) => {\r\n                        setFooter(e.target.value);\r\n                      }}\r\n                      multiline\r\n                    />\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <FormGroup row>\r\n                      <FormControlLabel\r\n                        label=\"Mostrar en la página de inicio\"\r\n                        style={{ color: \"secondary\" }}\r\n                        control={\r\n                          <Switch\r\n                            color=\"primary\"\r\n                            checked={state.checkedA}\r\n                            // onChange={(e) => {\r\n                            //   updateId\r\n                            //     ? setState(e.target.value)\r\n                            //     : handleChange;\r\n                            // }}\r\n                            // onChange={()=>{active?setActive(false):setActive(true)}}\r\n                            // onChange={(e) => {\r\n                            //   setState(e.target.value);\r\n                            // }}\r\n                            onChange={handleChange || setState}\r\n                            // {(e) => {\r\n                            //   setState(e.target.value);\r\n                            // }}\r\n                            name=\"checkedA\"\r\n                            // value={state}\r\n                          />\r\n                        }\r\n                      />\r\n                    </FormGroup>\r\n                  </Grid>\r\n                </Grid>\r\n                <Button\r\n                  type=\"submit\"\r\n                  width={\"100px\"}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  value=\"submit\"\r\n                  paddingTop=\"4\"\r\n                  onClick={(event) =>\r\n                    updateId\r\n                      ? saveChanges(event, updateId)\r\n                      : handleSubmit(event)\r\n                  }\r\n                >\r\n                  {updateId ? \"Actualizar testimonio\" : \"Crear testimonio\"}\r\n                </Button>\r\n              </form>\r\n            </Paper>\r\n          </Grid>\r\n\r\n          {tiles.map((tile) => (\r\n            <Grid item xs={12} sm={12} md={6} lg={4} xl={4}>\r\n              <Paper\r\n                className={classes.paper}\r\n                style={{\r\n                  padding: \"15px\",\r\n                  height: 300,\r\n                }}\r\n              >\r\n                <Grid key={tile._id} style={{ width: \"100%\" }}>\r\n                  <Grid container spacing={1}>\r\n                    {loading && (\r\n                      <div className={classes.loading}>\r\n                        <CircularProgress />\r\n                      </div>\r\n                    )}\r\n                    <Grid marginBottom={2} style={{ width: \"100%\" }}>\r\n                      <Box style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                        <IconButton\r\n                          style={{ marginLeft: \"10px\" }}\r\n                          onClick={() => handleTestimonialDataEdit(tile._id)}\r\n                        >\r\n                          <EditIcon color={\"secondary\"} />\r\n                        </IconButton>\r\n                        <IconButton onClick={() => deleteTestimonial(tile._id)}>\r\n                          <DeleteIcon color={\"secondary\"} />\r\n                        </IconButton>\r\n                      </Box>\r\n                      <Box style={{ display: \"flex\", paddingLeft: \"20px\" }}>\r\n                        <Avatar className={classes.avatar} src={tile.avatar} />\r\n                        <Box\r\n                          style={{\r\n                            paddingLeft: \"30px\",\r\n                          }}\r\n                        >\r\n                          <Typography>{tile.name}</Typography>\r\n                          <Typography variant={\"p\"} color={\"secondary\"}>\r\n                            {tile.type}\r\n                          </Typography>\r\n                        </Box>\r\n                      </Box>\r\n                      <Box\r\n                        style={{\r\n                          paddingTop: \"10px\",\r\n                        }}\r\n                      >\r\n                        <Typography\r\n                          variant={\"body2\"}\r\n                          style={{\r\n                            display: \"flex\",\r\n                            textAlign: \"center\",\r\n                            justifyContent: \"center\",\r\n                            height: \"60px\",\r\n                          }}\r\n                        >\r\n                          {tile.value}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box\r\n                        style={{\r\n                          paddingTop: \"8px\",\r\n                          height: \"35px\",\r\n                        }}\r\n                      >\r\n                        <Typography\r\n                          variant={\"body2\"}\r\n                          color=\"secondary\"\r\n                          style={{\r\n                            display: \"flex\",\r\n                            textAlign: \"center\",\r\n                            justifyContent: \"center\",\r\n                          }}\r\n                        >\r\n                          {tile.footer}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box\r\n                        style={{\r\n                          paddingTop: \"10px\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"end\",\r\n                        }}\r\n                        label=\"Mostrar en la página de inicio\"\r\n                      >\r\n                        <Typography\r\n                          color=\"secondary\"\r\n                          style={{ display: \"flex\", alignItems: \"center\" }}\r\n                        >\r\n                          {\" \"}\r\n                          Mostrar en la página de inicio\r\n                        </Typography>\r\n                        <Switch\r\n                          checked={tile.status}\r\n                          color=\"primary\"\r\n                          onChange={\r\n                            // handleChange\r\n                            (event) => ChangeVisibility(event, tile._id)\r\n                          }\r\n                          name=\"checkedA\"\r\n                          value={tile.status}\r\n                          inputProps={{\r\n                            \"aria-label\": \"secondary checkbox\",\r\n                          }}\r\n                        />\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n            </Grid>\r\n          ))}\r\n          <Snackbar\r\n            open={snackBarError}\r\n            autoHideDuration={4000}\r\n            onClose={() => {\r\n              setSnackBarError(false);\r\n            }}\r\n            message={errorMessage}\r\n            className={classes.snackbar}\r\n          />\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\appBar\\appBar.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\Copyright\\copyright.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\artUploader.jsx",["390","391","392","393","394","395","396","397","398","399","400"],"import React, { useEffect, useCallback } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport utils from '../../utils/utils.js';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AspectRatioSelector from './aspectRatioSelector'\r\nimport Cropper from 'react-easy-crop'\r\n\r\n\r\n\r\n\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Copyright from '../Copyright/copyright';\r\n\r\n//material-ui\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  img: {\r\n    maxWidth: '80vw',\r\n    maxHeight: '300px',\r\n    width: '100%',\r\n    height: '100%',\r\n    objectFit: 'cover',\r\n    objectPosition: '50% 50%',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    width: '100%',\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(0),\r\n  },\r\n  snackbar: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      bottom: 90,\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: '25ch',\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nconst photoIsos = [\r\n  '100',\r\n  '200',\r\n  '400'\r\n]\r\n\r\nconst artTypes = [\r\n  'Diseño',\r\n  'Foto'\r\n];\r\n\r\n// const useValues = [\r\n//   'Impresión',\r\n//   'Catálogo',\r\n//   'Privado para clientes',\r\n// ];\r\n\r\nconst categories = [\r\n  'Abstracto',\r\n  'Animales',\r\n  'Arquitectura',\r\n  'Atardecer',\r\n  'Cacao',\r\n  'Café',\r\n  'Carros',\r\n  'Ciudades',\r\n  'Edificios',\r\n  'Fauna',\r\n  'Flora',\r\n  'Lanchas, barcos o yates',\r\n  'Montañas',\r\n  'Naturaleza',\r\n  'Navidad',\r\n  'Playas',\r\n  'Puentes',\r\n  'Surrealista',\r\n  'Transportes',\r\n  'Vehículos'\r\n]\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nconst aspectRatios = [\r\n  { id: 1, name: '1:1', aspect: 1, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\r\n  { id: 2, name: '3:1', aspect: 3, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\r\n  { id: 3, name: '2:1', aspect: 2, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\r\n  { id: 4, name: '3:2', aspect: 3/2, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\r\n  { id: 5, name: '2:3', aspect: 2/3, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\r\n  { id: 6, name: '1:2', aspect: 1/2, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\r\n]\r\n\r\nexport default function ArtUploader(props) {\r\n  const classes = useStyles();\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [artUrl, setArtUrl] = useState();\r\n  const [thumbnailUrl, setThumbnailUrl] = useState();\r\n  const [category, setCategory] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [tags, setTags] = useState(['foto', 'arte']);\r\n  const [publicId, setPublicId] = useState('');\r\n  const [originalPhotoHeight, setOriginalPhotoHeight] = useState('');\r\n  const [originalPhotoWidth, setOriginalPhotoWidth] = useState('');\r\n  const [originalPhotoIso, setOriginalPhotoIso] = useState('');\r\n  const [originalPhotoPpi, setOriginalPhotoPpi] = useState('');\r\n  const [maxPrintHeightCm, setMaxPrintHeightCm] = useState('');\r\n  const [maxPrintWidthCm, setMaxPrintWidthCm] = useState('');\r\n  const [artType, setArtType] = useState('');\r\n  const [location, setLocation] = useState('');\r\n  const [requiredPhoto, setRequiredPhoto] = useState('');\r\n  const [uploaded, setUploaded] = useState(false);\r\n  const [mimeType, setMimeType] = useState('');\r\n  const [backdrop, setBackdrop] = useState(false);\r\n  const [croppedArt, setCroppedArt] = useState(aspectRatios);\r\n  const [uploadedArtMeta, setUploadedArtMeta] = useState({ width:0, height:0, size: 0});\r\n\r\n  //Error states.\r\n  const [errorMessage, setErrorMessage] = useState();\r\n  const [snackBarAction, setSnackBarAction] = useState();\r\n  const [snackBarError, setSnackBarError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (artType === 'Foto') {\r\n      handleMaxPrintCalc();\r\n    }\r\n  }, [originalPhotoWidth, originalPhotoHeight, originalPhotoPpi, originalPhotoIso]);\r\n\r\n  const handleArtTypeChange = (e) => {\r\n    if (!e.target.value) {\r\n      setRequiredPhoto(false);\r\n      setErrorMessage('Por favor indica a qué categoría pertenece el arte.');\r\n      setSnackBarError(true);\r\n    } else {\r\n      if (e.target.value === 'Foto') { setRequiredPhoto(true); }\r\n      setArtType(e.target.value);\r\n    }\r\n  }\r\n\r\n  const handleCategoryChange = (e) => {\r\n    setCategory(e.target.value);\r\n  }\r\n\r\n  const handleClose = () => {\r\n    props.setOpenArtFormDialog(false);\r\n  };\r\n\r\n  const handleMaxPrintCalc = () => {\r\n    if (originalPhotoWidth && originalPhotoHeight && originalPhotoPpi && originalPhotoIso) {\r\n      const [widthCm, heightCm] = utils.maxPrintCalc(originalPhotoWidth, originalPhotoHeight, originalPhotoPpi, originalPhotoIso);\r\n      setMaxPrintWidthCm(widthCm);\r\n      setMaxPrintHeightCm(heightCm);\r\n    } else if (!originalPhotoIso && originalPhotoWidth && originalPhotoHeight && originalPhotoPpi) {\r\n      setErrorMessage('Por favor indica a el ISO de la foto. ');\r\n      setSnackBarAction(<Button target=\"_blank\" style={{ color: \"#fff\" }} href=\"https://www.ionos.es/digitalguide/paginas-web/diseno-web/que-son-los-datos-exif/#:~:text=los%20datos%20EXIF.-,EXIF%20con%20el%20bot%C3%B3n%20derecho%20del%20rat%C3%B3n,de%20archivo%20y%20el%20nombre).\">\r\n        Aprende cómo\r\n      </Button>);\r\n      setSnackBarError(true);\r\n    } else if (originalPhotoIso && (!originalPhotoWidth || !originalPhotoHeight) && originalPhotoPpi) {\r\n      setErrorMessage('Por favor indica a el Ancho y Alto de la foto. ');\r\n      setSnackBarAction(<Button target=\"_blank\" style={{ color: \"#fff\" }} href=\"https://www.ionos.es/digitalguide/paginas-web/diseno-web/que-son-los-datos-exif/#:~:text=los%20datos%20EXIF.-,EXIF%20con%20el%20bot%C3%B3n%20derecho%20del%20rat%C3%B3n,de%20archivo%20y%20el%20nombre).\">\r\n        Aprende cómo\r\n      </Button>);\r\n      setSnackBarError(true);\r\n    } else if (originalPhotoIso && originalPhotoWidth && originalPhotoHeight && !originalPhotoPpi) {\r\n      setErrorMessage('Por favor indica a los PPI de la foto. ');\r\n      setSnackBarAction(<Button target=\"_blank\" style={{ color: \"#fff\" }} href=\"https://www.ionos.es/digitalguide/paginas-web/diseno-web/que-son-los-datos-exif/#:~:text=los%20datos%20EXIF.-,EXIF%20con%20el%20bot%C3%B3n%20derecho%20del%20rat%C3%B3n,de%20archivo%20y%20el%20nombre).\">\r\n        Aprende cómo\r\n      </Button>);\r\n      setSnackBarError(true);\r\n    } else {\r\n      setErrorMessage('Por favor completa los campos requeridos.');\r\n      setSnackBarAction(<Button target=\"_blank\" style={{ color: \"#fff\" }} href=\"https://www.ionos.es/digitalguide/paginas-web/diseno-web/que-son-los-datos-exif/#:~:text=los%20datos%20EXIF.-,EXIF%20con%20el%20bot%C3%B3n%20derecho%20del%20rat%C3%B3n,de%20archivo%20y%20el%20nombre).\">\r\n        Aprende cómo\r\n      </Button>);\r\n      setSnackBarError(true);\r\n    }\r\n  }\r\n\r\n  const allCrops = ()=> {\r\n    const sum = croppedArt.reduce((prev, art, i)=>{\r\n      if(art.cropped){\r\n        return prev + 1;\r\n      } else {\r\n        return prev + 0;\r\n      }\r\n    }, 0)\r\n    if(sum == croppedArt.length) {\r\n      return [null, true];\r\n    } else {\r\n      return [croppedArt.length - sum, false];\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async()=> {\r\n    try {\r\n      const [ pendingCrops, isCrops ] = allCrops()\r\n      if(!isCrops) {\r\n        setErrorMessage('Por favor realiza los '+ pendingCrops +' recortes restantes de tu arte antes de continuar.');\r\n        if(pendingCrops == 1){setErrorMessage('Tu arte está casi listo, solo falta realizar '+ pendingCrops +' recorte para continuar.');}\r\n        setSnackBarError(true);\r\n      } else {\r\n      if (title && description && category && tags) {\r\n        if ((artType === 'Diseño') || (originalPhotoWidth && originalPhotoHeight && originalPhotoPpi && originalPhotoIso)) {\r\n          setBackdrop(true);\r\n          await newArtPost();\r\n        } else {\r\n          setErrorMessage('Por favor indica ancho, alto, PPI e ISO de la foto. ');\r\n          setSnackBarError(true);\r\n        }\r\n      } else {\r\n        setErrorMessage('Por favor completa el todos los campos.');\r\n        setSnackBarError(true);\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    setBackdrop(false);\r\n    props.setOpenArtFormDialog(false);\r\n    setErrorMessage('Ocurrió un error inesperado, por favor valida e inicia sesión.');\r\n    setSnackBarError(true);\r\n  }\r\n  }\r\n\r\n  const getMimeType = (img) => {\r\n    const fileReader = new FileReader();\r\n    let type = '';\r\n    fileReader.onloadend = function (e) {\r\n      const arr = (new Uint8Array(e.target.result)).subarray(0, 4);\r\n      let header = \"\";\r\n      for (var i = 0; i < arr.length; i++) {\r\n        header += arr[i].toString(16);\r\n      }\r\n\r\n      switch (header) {\r\n        case \"89504e47\":\r\n            type = \"image/png\";\r\n            break;\r\n        case \"ffd8ffe0\":\r\n        case \"ffd8ffe1\":\r\n        case \"ffd8ffe2\":\r\n        case \"ffd8ffe3\":\r\n        case \"ffd8ffe8\":\r\n            type = \"image/jpeg\";\r\n            break;\r\n        default:\r\n            type = \"unknown\";\r\n            break;\r\n    }\r\n      setMimeType(type);\r\n    };\r\n    fileReader.readAsArrayBuffer(img);\r\n  }\r\n\r\n  function blobToFile(theBlob, fileName){\r\n    //A Blob() is almost a File() - it's just missing the two properties below which we will add\r\n    theBlob.lastModifiedDate = new Date();\r\n    theBlob.name = fileName;\r\n    return theBlob;\r\n  }\r\n  \r\n  const handleArtChange = async (e) => {\r\n    let artMeta = {};\r\n    getMimeType(e.target.files[0]);\r\n    if (e.target.files && e.target.files[0]) {\r\n      if(mimeType === 'unknow') {\r\n        e.target.value = '';\r\n        setSnackBarError(true);\r\n        setErrorMessage('Disculpa, pero el formato de tu arte no está permitido por los momentos.');\r\n        console.log('error, file format not allowed');\r\n      } else if (e.target.files[0].size >= 5120000) {\r\n        setSnackBarError(true);\r\n        setErrorMessage('Disculpa, el arte que subiste es muy grande. El máximo por los momentos es de 5 MB.');\r\n      } else {\r\n        var img = new Image();\r\n        var objectUrl = URL.createObjectURL(e.target.files[0]);\r\n        img.onload = function () {\r\n          if (img.width <= 900 && img.height <= 900) {\r\n            setSnackBarError(true);\r\n            setErrorMessage('Disculpa, tanto el ancho como el alto de tu arte es menor al establecido. Por favor sube un arte con mayor resolución.');\r\n          } else if (img.width <= 900) {\r\n            setSnackBarError(true);\r\n            setErrorMessage('Disculpa, el ancho de tu arte es menor al establecido. Por favor sube un arte con mayor resolución.');\r\n          } else if (img.height <= 900) {\r\n            setSnackBarError(true);\r\n            setErrorMessage('Disculpa, el alto de tu arte es menor al establecido. Por favor sube un arte con mayor resolución.');\r\n          } else {\r\n            artMeta.width = img.width;\r\n            artMeta.height = img.height;\r\n            setUploadedArtMeta(artMeta);\r\n            setUploaded(objectUrl);\r\n          }\r\n        };\r\n        img.src = objectUrl;\r\n        setArtUrl(e.target.files[0]);\r\n        artMeta.size = e.target.files[0].size;\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  const removeCrops = ()=> {\r\n    croppedArt.map((n)=>{\r\n      delete n.thumb;\r\n    });\r\n  }\r\n\r\n  async function newArtPost() {\r\n    var formData = new FormData();\r\n    formData.append('title', title);\r\n    formData.append('description', description);\r\n    formData.append('category', category);\r\n    formData.append('tags', tags);\r\n    formData.append('uploadedArtMeta', uploadedArtMeta);\r\n    formData.append('crops', JSON.stringify(croppedArt));\r\n    formData.append('userId', JSON.parse(localStorage.getItem('token')).id);\r\n    formData.append('prixerUsername', JSON.parse(localStorage.getItem('token')).username);\r\n    formData.append('status', 'Active');\r\n    formData.append('publicId', publicId);\r\n    formData.append('artType', artType);\r\n    formData.append('originalPhotoWidth', originalPhotoWidth);\r\n    formData.append('originalPhotoHeight', originalPhotoHeight);\r\n    formData.append('originalPhotoIso', originalPhotoIso);\r\n    formData.append('originalPhotoPpi', originalPhotoPpi);\r\n    formData.append('artLocation', location);\r\n    formData.append('imageUrl', artUrl);\r\n    const base_url = process.env.REACT_APP_BACKEND_URL + \"/art/create\";\r\n    const data = await axios.post(base_url, formData, {'Content-Type': 'multipart/form-data'});\r\n    if (data.data.success) {\r\n      props.setOpenArtFormDialog(false);\r\n      setBackdrop(false);\r\n      window.location.reload();\r\n    } else {\r\n      setErrorMessage('Por favor vuelve a intentarlo, puede que exista algún inconveniente de conexión. Si aún no lo has hecho por favor inicia sesión.');\r\n      setSnackBarError(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog xs={12} open={props.openArtFormDialog} onClose={handleClose} TransitionComponent={Transition}>\r\n        <Backdrop className={classes.backdrop} open={backdrop}>\r\n          <CircularProgress color=\"inherit\" />\r\n          <p>Esto puede tardar unos pocos minutos.</p>\r\n        </Backdrop>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Comparte tu Arte\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={handleSubmit}>\r\n              Guardar\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <form className={classes.form} noValidate>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <Paper variant=\"outlined\" style={{ textAlign: \"center\", 'hover':{background: '#000000'} }}>\r\n                      <div style={{padding:\"5%\", maxHeight: 410}}>\r\n                        <input type=\"file\" id=\"inputfile\" accept=\"image/jpeg, image/jpg, image/webp, image/png\"\r\n                          onChange={handleArtChange} style={{display:\"none\"}} />\r\n                          {\r\n                          !uploaded ? \r\n                            <label htmlFor=\"inputfile\">\r\n                            <Tooltip title={\"Carga tu arte con un mínimo de 1080px tanto de ancho como de alto. Tu Arte debe pesar máximo 5Mb y estar en formato .jpeg o .png\"}>\r\n                              <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                                Cargar arte\r\n                              </Button>\r\n                            </Tooltip>\r\n                            </label>\r\n                          :\r\n                          <AspectRatioSelector \r\n                          art={uploaded}\r\n                          croppedArt={croppedArt}\r\n                          setCroppedArt={setCroppedArt} />\r\n                          }\r\n                        </div>\r\n                  </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"title\"\r\n                    label=\"Título\"\r\n                    name=\"title\"\r\n                    autoComplete=\"title\"\r\n                    value={title}\r\n                    onChange={(e) => {\r\n                      setTitle(e.target.value)\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12}>\r\n                  <FormControl variant=\"outlined\" className={classes.form} xs={12} sm={12} md={12}>\r\n                    <InputLabel required id=\"artTypeLabel\">Tipo</InputLabel>\r\n                    <Select\r\n                      labelId=\"artTypeLabel\"\r\n                      id=\"artType\"\r\n                      value={artType}\r\n                      onChange={handleArtTypeChange}\r\n                      label=\"artType\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em></em>\r\n                      </MenuItem>\r\n                      {artTypes.map((n) => (\r\n                        <MenuItem key={n} value={n}>{n}</MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                {\r\n                  artType === 'Foto' &&\r\n                  <React.Fragment>\r\n                    <Grid item container xs={12}>\r\n                      <Grid item xs={4} sm={4}>\r\n                        <Typography style={{ whiteSpace: 'pre-line', padding: 15, fontSize: '0.7em' }}> Medida del archivo <br /> original en px </Typography>\r\n                      </Grid>\r\n                      <Grid item container xs={8} sm={8}>\r\n                        <Grid item xs={5} sm={5}>\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required={requiredPhoto}\r\n                            id=\"originalPhotoWidth\"\r\n                            label=\"Ancho\"\r\n                            type=\"number\"\r\n                            name=\"originalPhotoWidth\"\r\n                            autoComplete=\"originalPhotoWidth\"\r\n                            value={originalPhotoWidth}\r\n                            onChange={(e) => {\r\n                              setOriginalPhotoWidth(e.target.value);\r\n                              if (e.target.value < 2000) {\r\n                                setErrorMessage('La foto original debe tener un ancho mayor a 2.000 px.');\r\n                                setSnackBarError(true);\r\n                              }\r\n                            }}\r\n                          />\r\n                        </Grid>\r\n                        <Typography style={{ padding: 10 }}> x </Typography>\r\n                        <Grid item xs={5} sm={5}>\r\n                          <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required={requiredPhoto}\r\n                            type=\"number\"\r\n                            id=\"originalPhotoHeight\"\r\n                            label=\"Alto\"\r\n                            name=\"originalPhotoHeight\"\r\n                            autoComplete=\"originalPhotoHeight\"\r\n                            value={originalPhotoHeight}\r\n                            onChange={(e) => {\r\n                              setOriginalPhotoHeight(e.target.value);\r\n                              if (e.target.value < 2000) {\r\n                                setErrorMessage('La foto original debe tener un alto mayor a 2.000 px.');\r\n                                setSnackBarError(true);\r\n                              }\r\n                            }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container xs={12}>\r\n                      <Grid item xs={6} sm={6}>\r\n                        <TextField\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          required={requiredPhoto}\r\n                          type=\"number\"\r\n                          id=\"originalPhotoPpi\"\r\n                          label=\"PPI\"\r\n                          name=\"originalPhotoPpi\"\r\n                          autoComplete=\"originalPhotoPpi\"\r\n                          value={originalPhotoPpi}\r\n                          onChange={(e) => {\r\n                            setOriginalPhotoPpi(e.target.value);\r\n                            if (e.target.value < 100) {\r\n                              setErrorMessage('La foto original debe ser mayor a 100 ppi.');\r\n                              setSnackBarError(true);\r\n                            }\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6} sm={6}>\r\n                        <FormControl variant=\"outlined\" className={classes.form} xs={12} sm={12} md={12}>\r\n                          <InputLabel required={requiredPhoto} id=\"originalPhotoIsoLabel\">ISO</InputLabel>\r\n                          <Select\r\n                            labelId=\"originalPhotoIsoLabel\"\r\n                            id=\"originalPhotoIso\"\r\n                            value={originalPhotoIso}\r\n                            onChange={(e) => {\r\n                              setOriginalPhotoIso(e.target.value);\r\n                            }}\r\n                            label=\"originalPhotoIso\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em></em>\r\n                            </MenuItem>\r\n                            {photoIsos.map((n) => (\r\n                              <MenuItem key={n} value={n}>{n}</MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                    </Grid>\r\n                    {\r\n                      (originalPhotoIso && originalPhotoWidth && originalPhotoHeight) &&\r\n                      <Grid item container xs={12}>\r\n                        <Grid item xs={6} sm={6} style={{ textAlign: 'center' }}>\r\n                          <Typography style={{ whiteSpace: 'pre-line', padding: 15, fontSize: '1em' }}> Medida máxima <br /> para impresión</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6} sm={6} style={{ textAlign: 'center' }}>\r\n                          <Typography style={{ whiteSpace: 'pre-line', padding: 15, fontSize: '1.5em' }}> {maxPrintWidthCm} x {maxPrintHeightCm} cm </Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                    }\r\n                  </React.Fragment>\r\n                }\r\n                <Grid item xs={12} sm={12}>\r\n                  <FormControl variant=\"outlined\" className={classes.form} xs={12} sm={12} md={12}>\r\n                    <InputLabel required id=\"categoryLabel\">Categoría</InputLabel>\r\n                    <Select\r\n                      labelId=\"categoryLabel\"\r\n                      id=\"category\"\r\n                      value={category}\r\n                      onChange={handleCategoryChange}\r\n                      label=\"category\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em></em>\r\n                      </MenuItem>\r\n                      {categories.map((n) => (\r\n                        <MenuItem key={n} value={n}>{n}</MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={12}>\r\n                  <Autocomplete\r\n                    multiple\r\n                    freeSolo\r\n                    id=\"tags-outlined\"\r\n                    options={[]}\r\n                    defaultValue={[]}\r\n                    value={tags}\r\n                    onChange={(e, newval, reason) => {\r\n                      setTags(newval);\r\n                    }}\r\n                    renderInput={params => (\r\n                      <TextField\r\n                        required\r\n                        {...params}\r\n                        onKeyDown={e => {\r\n                          if (e.key === 13 && e.target.value) {\r\n                            setTags(tags.concat(e.target.value));\r\n                          }\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        label=\"Etiquetas\"\r\n                        placeholder=\"Etiquetas\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12}>\r\n                  <TextField\r\n                    autoComplete=\"description\"\r\n                    required\r\n                    name=\"description\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    id=\"description\"\r\n                    label=\"Descripción\"\r\n                    autoFocus\r\n                    multiline\r\n                    rows={4}\r\n                    value={description}\r\n                    onChange={(e) => setDescription(e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    id=\"location\"\r\n                    label=\"Ubicación\"\r\n                    name=\"location\"\r\n                    autoComplete=\"location\"\r\n                    value={location}\r\n                    onChange={(e) => setLocation(e.target.value)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </div>\r\n          <Box mt={5}>\r\n            <Copyright />\r\n          </Box>\r\n          <Snackbar\r\n            open={snackBarError}\r\n            autoHideDuration={5000}\r\n            message={errorMessage}\r\n            className={classes.snackbar}\r\n            action={snackBarAction}\r\n            onClose={() => { setSnackBarError(false); setSnackBarAction(false); }}\r\n          />\r\n        </Container>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\floatingAddButton\\floatingAddButton.jsx",["401"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport axios from 'axios';\r\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      // margin: theme.spacing(1),\r\n      margin: 0,\r\n      top: 'auto',\r\n      // marginLeft:333,\r\n      bottom: 20,\r\n      left: 'auto',\r\n      position: 'fixed'\r\n    },\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  uwStyles: {\r\n    palette: {\r\n        window: \"#ffffff\",\r\n        sourceBg: \"#f4f4f5\",\r\n        windowBorder: \"#90a0b3\",\r\n        tabIcon: \"#000000\",\r\n        inactiveTabIcon: \"#d33f49\",\r\n        menuIcons: \"#555a5f\",\r\n        link: theme.palette.primary.main,\r\n        action: \"#339933\",\r\n        inProgress: theme.palette.primary.main,\r\n        complete: \"#339933\",\r\n        error: \"#cc0000\",\r\n        textDark: \"#000000\",\r\n        textLight: \"#fcfffd\"\r\n    },\r\n    fonts: {\r\n        default: null,\r\n        \"sans-serif\": {\r\n            url: null,\r\n            active: true\r\n        }\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function FloatingAddButton(props) {\r\n  const classes = useStyles();\r\n  \r\n  const handleClick = ()=> {\r\n    props.setOpenArtFormDialog(true);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Fab color=\"primary\" aria-label=\"add\" onClick={handleClick}>\r\n        <AddPhotoAlternateIcon/>\r\n      </Fab>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\simpleDialog\\simpleDialog.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\prixerGrid\\prixerGrid.jsx",["402","403"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport utils from \"../../utils/utils\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n    overflow: \"hidden\",\r\n    // maxWidth: \"70%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: \"100%\",\r\n    height: \"auto\",\r\n  },\r\n  img: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  icon: {\r\n    color: \"rgba(255, 255, 255, 0.54)\",\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  cardMedia: {\r\n    paddingTop: \"81.25%\",\r\n    borderRadius: \"50%\",\r\n    margin: \"28px\",\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default function PrixerGrid(props) {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"md\"));\r\n  const isDeskTop = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const [tiles, setTiles] = useState([]);\r\n  const history = useHistory();\r\n  const [backdrop, setBackdrop] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/prixer/read-all-full-v2\";\r\n\r\n    axios.get(base_url).then((response) => {\r\n      setTiles(utils.shuffle(response.data.prixers));\r\n      setBackdrop(false);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Backdrop className={classes.backdrop} open={backdrop}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Grid container spacing={1}>\r\n        {tiles &&\r\n          tiles\r\n            .filter((tile) => tile.avatar) //quitar?\r\n            .map(\r\n              (tile) =>\r\n                tile.status && (\r\n                  // isDesktop ? (\r\n                  <Grid item key={tile._id} xs={6} sm={6} md={3}>\r\n                    <Card className={classes.card}>\r\n                      <CardMedia\r\n                        alt={tile.title}\r\n                        height=\"100\"\r\n                        image={tile.avatar}\r\n                        className={classes.cardMedia}\r\n                        title={tile.title}\r\n                      />\r\n                      <CardContent className={classes.cardContent}>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                          {tile.firstName} {tile.lastName}\r\n                        </Typography>\r\n                        <Typography\r\n                          gutterBottom\r\n                          variant=\"h6\"\r\n                          component=\"h6\"\r\n                          style={{ fontSize: 16 }}\r\n                        >\r\n                          {tile.username} -\r\n                          {tile.specialty ||\r\n                            tile.specialtyArt?.map((specialty, index) =>\r\n                              tile.specialtyArt?.length === index + 1\r\n                                ? specialty\r\n                                : `${specialty}, `\r\n                            )}\r\n                        </Typography>\r\n                      </CardContent>\r\n                      <CardActions>\r\n                        <Button\r\n                          size=\"small\"\r\n                          color=\"primary\"\r\n                          onClick={(e) =>\r\n                            history.push({ pathname: \"/\" + tile.username })\r\n                          }\r\n                        >\r\n                          Explorar\r\n                        </Button>\r\n                      </CardActions>\r\n                    </Card>\r\n                  </Grid>\r\n                )\r\n              // ) : (\r\n              //   <Grid item key={tile._id} xs={12} sm={1} md={2}>\r\n              //     <Card className={classes.card}>\r\n              //       <CardMedia\r\n              //         alt={tile.title}\r\n              //         height=\"100\"\r\n              //         image={tile.avatar}\r\n              //         className={classes.cardMedia}\r\n              //         title={tile.title}\r\n              //       />\r\n              //       <CardContent className={classes.cardContent}>\r\n              //         <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              //           {tile.firstName} {tile.lastName}\r\n              //         </Typography>\r\n              //         <Typography\r\n              //           gutterBottom\r\n              //           variant=\"h6\"\r\n              //           component=\"h6\"\r\n              //           style={{ fontSize: 16 }}\r\n              //         >\r\n              //           {tile.username} - {tile.specialty}\r\n              //         </Typography>\r\n              //       </CardContent>\r\n              //       <CardActions>\r\n              //         <Button\r\n              //           size=\"small\"\r\n              //           color=\"primary\"\r\n              //           onClick={(e) =>\r\n              //             history.push({ pathname: \"/\" + tile.username })\r\n              //           }\r\n              //         >\r\n              //           Explorar\r\n              //         </Button>\r\n              //       </CardActions>\r\n              //     </Card>\r\n              //   </Grid>\r\n              // ),\r\n              // isDeskTop ? (\r\n              //   <Grid item key={tile._id} xs={6} sm={6} md={3}>\r\n              //     <Card className={classes.card}>\r\n              //       <CardMedia\r\n              //         alt={tile.title}\r\n              //         height=\"100\"\r\n              //         image={tile.avatar}\r\n              //         className={classes.cardMedia}\r\n              //         title={tile.title}\r\n              //       />\r\n              //       <CardContent className={classes.cardContent}>\r\n              //         <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              //           {tile.firstName} {tile.lastName}\r\n              //         </Typography>\r\n              //         <Typography\r\n              //           gutterBottom\r\n              //           variant=\"h6\"\r\n              //           component=\"h6\"\r\n              //           style={{ fontSize: 16 }}\r\n              //         >\r\n              //           {tile.username} - {tile.specialty}\r\n              //         </Typography>\r\n              //       </CardContent>\r\n              //       <CardActions>\r\n              //         <Button\r\n              //           size=\"small\"\r\n              //           color=\"primary\"\r\n              //           onClick={(e) =>\r\n              //             history.push({ pathname: \"/\" + tile.username })\r\n              //           }\r\n              //         >\r\n              //           Explorar\r\n              //         </Button>\r\n              //       </CardActions>\r\n              //     </Card>\r\n              //   </Grid>\r\n              // ) : (\r\n              //   <Grid item key={tile._id} xs={12} sm={1} md={6}>\r\n              //     <Card className={classes.card}>\r\n              //       <CardMedia\r\n              //         alt={tile.title}\r\n              //         height=\"100\"\r\n              //         image={tile.avatar}\r\n              //         className={classes.cardMedia}\r\n              //         title={tile.title}\r\n              //       />\r\n              //       <CardContent className={classes.cardContent}>\r\n              //         <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              //           {tile.firstName} {tile.lastName}\r\n              //         </Typography>\r\n              //         <Typography\r\n              //           gutterBottom\r\n              //           variant=\"h6\"\r\n              //           component=\"h6\"\r\n              //           style={{ fontSize: 16 }}\r\n              //         >\r\n              //           {tile.username} - {tile.specialty}\r\n              //         </Typography>\r\n              //       </CardContent>\r\n              //       <CardActions>\r\n              //         <Button\r\n              //           size=\"small\"\r\n              //           color=\"primary\"\r\n              //           onClick={(e) =>\r\n              //             history.push({ pathname: \"/\" + tile.username })\r\n              //           }\r\n              //         >\r\n              //           Explorar\r\n              //         </Button>\r\n              //       </CardActions>\r\n              //     </Card>\r\n              //   </Grid>\r\n              // )\r\n              // )\r\n            )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\prixers\\prixers.jsx",["404","405","406","407","408","409"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\Preferences.jsx",["410","411"],"import { React, useState, useEffect} from 'react'\r\nimport SimpleTabs from './tabPreferences'\r\n\r\n\r\nexport default function Preferences(props)\r\n{\r\n    return(\r\n    <>\r\n        <SimpleTabs />\r\n    </>\r\n    )\r\n}","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\orders.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\orderServices.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\tabPreferences.jsx",["412"],"import { React, useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport CarouselAdmin from \"./preferencesCarousel\";\r\nimport TermsAndConditions from \"./preferenceTerms\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    \"margin-left\": \"60px\",\r\n  },\r\n}));\r\n\r\nexport default function SimpleTabs() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs value={value} onChange={handleChange}>\r\n          <Tab label=\"Carrusel\" />\r\n          <Tab label=\"Términos y condiciones\" />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <CarouselAdmin />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <TermsAndConditions />\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\updateOrder.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\createOrder.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\consumerServices.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\preferenceTerms.jsx",["413","414"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\preferences\\preferencesCarousel.jsx",["415","416","417","418","419","420","421","422","423","424","425","426","427","428"],"import { React, useState, useEffect } from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport ViewCarouselIcon from \"@material-ui/icons/ViewCarousel\";\r\nimport { Button, InputLabel, Typography } from \"@material-ui/core\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  FilledInput,\r\n  Input,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport ImageListItem from \"@material-ui/core/ImageListItem\";\r\nimport ImageList from \"@material-ui/core/ImageList\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport HighlightOffOutlinedIcon from \"@material-ui/icons/HighlightOffOutlined\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  images: {\r\n    width: \"500px\",\r\n    height: \"300px\",\r\n    borderRadius: \"10px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  buttons: {\r\n    position: \"absolute\",\r\n    color: \"#ccc\",\r\n    display: \"flex\",\r\n    cursor: \"pointer\",\r\n    padding: \"10px\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    width: \"90%\",\r\n  },\r\n  nameFile: {\r\n    width: \"300px\",\r\n    whiteSpace: \"nowrap\",\r\n    overflow: \"hidden\",\r\n    textOverflow: \"ellipsis\",\r\n    padding: \"10px\",\r\n    fontSize: \"1rem\",\r\n    margin: \"0\",\r\n    background: \"#cccc\",\r\n  },\r\n  loaderImage: {\r\n    height: \"80vh\",\r\n    backgroundColor: \"#cccc\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  imageLoad: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  buttonImgLoader: {\r\n    color: \"#ccc\",\r\n    width: \"82vw\",\r\n    height: \"80vh\",\r\n    cursor: \"pointer\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    padding: \"10px\",\r\n    position: \"absolute\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nfunction CarouselAdmin(props) {\r\n  const theme = useTheme();\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"md\"));\r\n  const isDeskTop = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const [image, newImage] = useState({ file: \"\", _id: \"\" }); //enviar\r\n  const [imageLoader, setLoadImage] = useState({\r\n    loader: \"\",\r\n    filename: \"Subir imagenes\",\r\n  }); //loader de imagenes\r\n  const [images, newImages] = useState({ images: [] }); // lista de imagenes para renderizar\r\n  const [update, setUpdate] = useState(0); // modal de update\r\n  const [open, setOpen] = useState(false); //modal de eliminar -> confirm\r\n  const [Open, setOpenI] = useState(false); // Toast para imagen eliminada exitosamente\r\n  const [maxImage, setMaxImages] = useState(false); //Toast para maximo de 6 imagenes\r\n  const [create, setCreate] = useState(false); // toast para imagen creada y listada\r\n  const [createF, setCreateF] = useState(false);\r\n  const [loading, setLoading] = useState(false); // Loading\r\n\r\n  const classes = useStyle();\r\n\r\n  const maxImageOpen = () => {\r\n    setMaxImages(true);\r\n  };\r\n\r\n  const maxImageClose = () => {\r\n    setMaxImages(false);\r\n  };\r\n\r\n  const createOpen = () => {\r\n    setCreate(true);\r\n  };\r\n\r\n  const createClose = () => {\r\n    setCreate(false);\r\n  };\r\n\r\n  const createOpenF = () => {\r\n    setCreateF(true);\r\n  };\r\n\r\n  const createCloseF = () => {\r\n    setCreateF(false);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClickOpenI = () => {\r\n    setOpenI(true);\r\n  };\r\n\r\n  const handleCloseI = () => {\r\n    setOpenI(false);\r\n  };\r\n\r\n  const openUpdate = () => {\r\n    setUpdate(true);\r\n  };\r\n\r\n  const closeUpdate = () => {\r\n    setUpdate(false);\r\n  };\r\n\r\n  // CRUD\r\n  //Editar imagen:\r\n  const handleUpdate = async (x) => {\r\n    x.preventDefault();\r\n    setLoading(true);\r\n    const URI =\r\n      process.env.REACT_APP_BACKEND_URL +\r\n      \"/admin/preferences/carousel/\" +\r\n      image._id;\r\n    const formData = new FormData();\r\n    formData.append(\"newBannerImages\", image.file);\r\n    let res = await axios.put(URI, formData);\r\n    setLoadImage({\r\n      loader: \"\",\r\n      filename: \"Subir imagenes\",\r\n    });\r\n    newImage({\r\n      _id: \"\",\r\n      file: \"\",\r\n    });\r\n    setLoadImage(false);\r\n    openUpdate();\r\n    getImagesForTheCarousel();\r\n    closeUpdate();\r\n  };\r\n\r\n  // Crear imagen:\r\n  const handleSubmit = async (a) => {\r\n    a.preventDefault();\r\n    if (images.images[0].length >= 6) {\r\n      maxImageOpen();\r\n      setLoadImage({\r\n        loader: \"\",\r\n        filename: \"Subir imagenes\",\r\n      });\r\n    } else {\r\n      setLoading(true);\r\n      setLoadImage({\r\n        loader: \"\",\r\n        filename: \"Subir imagenes\",\r\n      });\r\n    }\r\n    const URI =\r\n      process.env.REACT_APP_BACKEND_URL + \"/admin/preferences/carousel\";\r\n    const newFormData = new FormData();\r\n    newFormData.append(\"bannerImages\", image.file);\r\n    let res = await axios.post(URI, newFormData);\r\n    createOpen();\r\n    newImage({\r\n      _id: \"\",\r\n      file: \"\",\r\n    });\r\n    setLoadImage(false);\r\n    createOpen();\r\n    getImagesForTheCarousel();\r\n  };\r\n\r\n  const deleteImage = async (d) => {\r\n    d.preventDefault();\r\n    handleClose();\r\n    setLoading(true);\r\n    const URI =\r\n      process.env.REACT_APP_BACKEND_URL +\r\n      \"/admin/preferences/carousel/\" +\r\n      image._id;\r\n    let res = await axios.delete(URI);\r\n    getImagesForTheCarousel();\r\n    handleClickOpenI();\r\n    setLoading(false);\r\n    handleCloseI();\r\n  };\r\n  //Preview de imagen antes de enviar\r\n  const convertToBase64 = (blob) => {\r\n    return new Promise((resolve) => {\r\n      var reader = new FileReader();\r\n      reader.onload = function () {\r\n        resolve(reader.result);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  };\r\n  // Actualizacion del estado para preview de imagen\r\n  const loadImage = async (e) => {\r\n    const file = e.target.files[0];\r\n    const resizedString = await convertToBase64(file);\r\n    setLoadImage({ loader: resizedString, filename: file.name });\r\n  };\r\n\r\n  //Cancelar subida de imagen\r\n  const cancelUploadImage = () => {\r\n    setLoadImage({ loader: \"\", filename: \"Subir imagenes\" });\r\n    newImage({ _id: \"\", file: \"\" });\r\n  };\r\n  //Tomar imagenes en array para ser listadas y renderizadas\r\n  const getImagesForTheCarousel = () => {\r\n    setLoading(true);\r\n    const URI = \"http://localhost:8000/admin/preferences/carousel\";\r\n    fetch(URI)\r\n      .then((res) =>\r\n        res\r\n          .json()\r\n          .then((data) => {\r\n            newImages({ images: [data.imagesCarousels] });\r\n          })\r\n          .catch((err) => console.error(`Your request is wrong: ${err}`))\r\n      )\r\n      .catch((err) => console.error(err));\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getImagesForTheCarousel();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Backdrop className={classes.backdrop} open={loading}>\r\n        <CircularProgress value={loading} style={{ marginTop: \"-250px\" }} />\r\n      </Backdrop>\r\n      <Grid>\r\n        <Grid\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            color: \"#bababa\",\r\n          }}\r\n        >\r\n          <ViewCarouselIcon />\r\n          <Typography style={{ fontSize: \"1.5rem\", padding: \"10px\" }}>\r\n            Edit carousel\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid className={classes.loaderImage}>\r\n          <Box className={classes.buttonImgLoader}>\r\n            {imageLoader.loader ? (\r\n              <HighlightOffOutlinedIcon\r\n                style={{ width: \"2rem\" }}\r\n                onClick={cancelUploadImage}\r\n              />\r\n            ) : (\r\n              <HighlightOffOutlinedIcon hidden />\r\n            )}\r\n          </Box>\r\n          {imageLoader.loader && (\r\n            <img\r\n              className={classes.imageLoad}\r\n              src={imageLoader.loader}\r\n              alt=\"+\"\r\n            ></img>\r\n          )}\r\n          {imageLoader.loader ? (\r\n            \"\"\r\n          ) : (\r\n            <h1 style={{ color: \"#e0e0e0\" }}>1300x700px</h1>\r\n          )}\r\n        </Grid>\r\n\r\n        <Box style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <FormControl>\r\n            <form\r\n              onSubmit={(s) => {\r\n                if (image._id != \"\") {\r\n                  handleUpdate(s);\r\n                } else {\r\n                  handleSubmit(s);\r\n                }\r\n              }}\r\n              encType=\"multipart/form-data\"\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                flexDirection: isDesktop ? \"row\" : \"column\",\r\n                alignItems: isDesktop ? \"center\" : \"stretch\",\r\n                padding: isDesktop ? \"15px\" : \"20px\",\r\n                height: isDesktop ? \"\" : \"30vh\",\r\n                width: isDesktop ? \"150%\" : \"auto\",\r\n                marginLeft: isDesktop ? \"-20%\" : \"\",\r\n              }}\r\n            >\r\n              <Typography\r\n                className={classes.nameFile}\r\n                style={{ width: \"auto\" }}\r\n                id=\"uploadImage\"\r\n              >\r\n                {imageLoader.filename}\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{ width: \"auto\" }}\r\n                component=\"label\"\r\n              >\r\n                Upload File\r\n                <input\r\n                  name=\"bannerImages\"\r\n                  style={{ width: \"auto\" }}\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  hidden\r\n                  onChange={(a) => {\r\n                    a.preventDefault();\r\n                    loadImage(a);\r\n                    newImage({\r\n                      _id: image._id,\r\n                      file: a.target.files[0],\r\n                    });\r\n                  }}\r\n                />\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                style={{ width: \"auto\" }}\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Enviar\r\n              </Button>\r\n            </form>\r\n          </FormControl>\r\n\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"right\",\r\n            }}\r\n            open={create}\r\n            onClose={createClose}\r\n            autoHideDuration={5000}\r\n            message=\"Process sucessfull\"\r\n          />\r\n\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"right\",\r\n            }}\r\n            open={create}\r\n            onClose={createClose}\r\n            autoHideDuration={5000}\r\n            message=\"Process sucessfull\"\r\n          />\r\n\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"right\",\r\n            }}\r\n            open={createF}\r\n            onClose={createCloseF}\r\n            autoHideDuration={5000}\r\n            message=\"You must send a image\"\r\n          />\r\n\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"right\",\r\n            }}\r\n            open={update}\r\n            onClose={closeUpdate}\r\n            autoHideDuration={5000}\r\n            message=\"Process sucessfull\"\r\n          />\r\n        </Box>\r\n        <ImageList cols={isDesktop ? 2 : 1} rowHeight={300}>\r\n          {images.images[0] ? (\r\n            images.images[0].map((img, key_id) => (\r\n              <ImageListItem key={key_id}>\r\n                <Box>\r\n                  <Box className={classes.buttons}>\r\n                    <Button\r\n                      variant=\"text\"\r\n                      style={{ color: \"white\" }}\r\n                      component=\"label\"\r\n                    >\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"newBannerImages\"\r\n                        hidden\r\n                        onChange={(a) => {\r\n                          a.preventDefault();\r\n                          loadImage(a);\r\n                          newImage({\r\n                            _id: img._id,\r\n                            file: a.target.files[0],\r\n                          });\r\n                        }}\r\n                      />\r\n                      <EditIcon />\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"text\"\r\n                      style={{ color: \"white\" }}\r\n                      onClick={handleClickOpen}\r\n                    >\r\n                      <HighlightOffOutlinedIcon\r\n                        onClick={() => {\r\n                          newImage({\r\n                            _id: img._id,\r\n                            file: image.file,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </Button>\r\n                    <Dialog\r\n                      open={open}\r\n                      onClose={handleClose}\r\n                      aria-labelledby=\"alert-dialog-title\"\r\n                      aria-describedby=\"alert-dialog-description\"\r\n                    >\r\n                      <DialogTitle id=\"alert-dialog-title\">\r\n                        {\"Estas seguro de eliminar esta imagen del carrusel?\"}\r\n                      </DialogTitle>\r\n                      <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                          Esta imagen ya no se vera en el carrusel del banner\r\n                          principal\r\n                        </DialogContentText>\r\n                      </DialogContent>\r\n                      <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                          Cancelar\r\n                        </Button>\r\n                        <Button\r\n                          onClick={(d) => {\r\n                            deleteImage(d);\r\n                          }}\r\n                          color=\"primary\"\r\n                        >\r\n                          Aceptar\r\n                        </Button>\r\n                      </DialogActions>\r\n                    </Dialog>\r\n\r\n                    <Snackbar\r\n                      anchorOrigin={{\r\n                        vertical: \"top\",\r\n                        horizontal: \"right\",\r\n                      }}\r\n                      open={update}\r\n                      onClose={closeUpdate}\r\n                      autoHideDuration={5000}\r\n                      message=\"Imagen borrada exitosamente\"\r\n                    />\r\n                  </Box>\r\n                  <a href={img.carouselImages[0]} target=\"_BLANK\">\r\n                    <img\r\n                      className={classes.images}\r\n                      title={img.carouselImages[0]}\r\n                      src={img.carouselImages[0]}\r\n                    ></img>\r\n                  </a>\r\n                </Box>\r\n              </ImageListItem>\r\n            ))\r\n          ) : (\r\n            <Typography>\r\n              Que mal, parece que no tienes imagenes en el carrusel\r\n            </Typography>\r\n          )}\r\n        </ImageList>\r\n      </Grid>\r\n      <Dialog\r\n        open={maxImage}\r\n        onClose={maxImageClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Limite alcanzado\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Solo puedes agregar 6 imagenes al carrusel, procura eliminar algunas\r\n            imagenes o reemplazar\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={maxImageClose}>Aceptar</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\nexport default CarouselAdmin;\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\orderDetails.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\Title.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\orderCrud\\createOrder\\orderBasicInfo.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\services.js",["429","430","431","432","433","434","435","436","437","438","439","440"],"\r\n\r\nexport const setProductAtts = async (attValue, attributesArr, iProd, iAtt, productsArr, width, height)=> {\r\n    let att = productsArr;\r\n    if(att && att.length > 0 && att[iProd] && att[iProd].selection) {\r\n      att[iProd].selection[iAtt] = attValue;\r\n    }\r\n    const pAtt = await getEquation(att[iProd], iProd, att, width, height);\r\n    return { pAtt: pAtt, att: att }\r\n    // setTiles(pAtt.pAtt ? [...pAtt.pAtt] : [...pAtt.att]);\r\n\r\n  }\r\n\r\n\r\n  export const getAttributes = (products)=> {\r\n  let lol = products;\r\n  lol = products.map((p, i)=>{\r\n    let att = [];\r\n    p.variants.map((v)=>{\r\n      if(v.active){\r\n        if(att.length == 0) {\r\n        att = [...new Set(v.attributes.flatMap((a) => a))];\r\n        } else {\r\n          att.push(...new Set(v.attributes.flatMap((a) => a)));\r\n        }\r\n      }\r\n    });\r\n    const result = [...new Set(att.flatMap(({name}) => name))];\r\n    const res1 = [...new Set( \r\n      result.map( (a)=>{ \r\n        return  {\r\n          name: a, \r\n          value: [...new Set(att.map(v=> { \r\n            if( ( v.name==a ) && (v.value) ) {\r\n              return v.value;\r\n            }\r\n          }))].filter(a=>a)\r\n        }\r\n      })\r\n    )];\r\n    p.attributes = res1;\r\n    p.selection = [];\r\n    p.selection.length = p.attributes.length;\r\n\r\n    return p;\r\n  });\r\n  return lol;\r\n  \r\n}\r\n\r\nexport const structureEquation = (equation, i, width, height)=> {\r\n  let eq = '';\r\n  equation.split(/[\\s{}}]+/).map((n, j, arr)=>{\r\n    if(n=='width'){\r\n      eq = eq.concat(width[i] || 0);\r\n    } else if(n=='height'){\r\n      eq = eq.concat(height[i] || 0);\r\n    } else {\r\n      eq = eq.concat(n);\r\n    }\r\n  });\r\n  return eq;\r\n\r\n}\r\n\r\nexport const getEquation = async (product, iProd, productArr, width, height)=> {\r\n\r\n  if( product.selection ){\r\n    const filteredVars = await product.variants.filter((v, i)=>{\r\n      if( v.attributes && v.attributes.length != 0 && v.attributes.length == product.selection.length ){\r\n        return v.attributes.every(a => product.selection.includes(a.value));\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    if(filteredVars.length != 0) {\r\n      if (filteredVars[0].publicPrice.equation && filteredVars[0].prixerPrice.equation ) {\r\n        productArr[iProd].needsEquation = true;\r\n        productArr[iProd].publicEquation = eval(structureEquation(filteredVars[0].publicPrice.equation, iProd, width, height) || 0);\r\n        productArr[iProd].prixerEquation = eval(structureEquation(filteredVars[0].prixerPrice.equation, iProd, width, height) || 0);\r\n      } else {\r\n        productArr[iProd].needsEquation = false;\r\n      }\r\n    } else {\r\n      productArr[iProd].needsEquation = false;\r\n    }\r\n  } else {\r\n    productArr[iProd].needsEquation = false;\r\n    productArr[iProd].publicEquation = ''; \r\n    productArr[iProd].prixerEquation = ''; \r\n  }\r\n\r\n  return productArr;\r\n\r\n}","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\searchBar\\searchBar.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\aspectRatioSelector.jsx",["441","442","443","444","445","446","447","448","449","450"],"import React, { useEffect, useImperativeHandle } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useState, useCallback } from 'react';\r\nimport EasyCropper from './easyCropper'\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport PhotoLibraryIcon from '@material-ui/icons/PhotoLibrary';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { Typography } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport getCroppedImg from '../../utils/cropImage';\r\nimport CropIcon from '@material-ui/icons/Crop';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    iconTabs: {\r\n      flexGrow: 1,\r\n      width: '100%',\r\n      margin: 'auto',\r\n      marginBottom: 50\r\n    },\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-around',\r\n      overflow: 'hidden',\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    paper: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'left',\r\n      // maxWidth: 850,\r\n      flexGrow: 1,\r\n      overflow: 'visible'\r\n    },\r\n    icon: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    cardGrid: {\r\n        position: 'relative'\r\n    },\r\n    img: {\r\n      maxWidth: '100%',\r\n      maxHeight: '200px',\r\n      width: '100%',\r\n      height: '100%',\r\n      objectFit: 'contain',\r\n      objectPosition: '50% 50%'\r\n    },\r\n    tab: {\r\n        minWidth: 100\r\n    },\r\n    button: {\r\n        width: \"10px\",\r\n    }\r\n}));\r\n\r\n\r\nexport default function AspectRatioSelector(props) {\r\n    const { art, croppedArt, setCroppedArt } = props;\r\n    const classes = useStyles();\r\n    const [tabValue, setTabValue] = useState(1);\r\n    const croppedArtTemp = croppedArt;\r\n    const [croppedAreaPixels, setCroppedAreaPixels] = useState();\r\n\r\n    //Error states.\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    const [snackBarAction, setSnackBarAction] = useState();\r\n    const [snackBarError, setSnackBarError] = useState(false);\r\n\r\n    useEffect(()=>{\r\n    });\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\nconst updateCrop = (i)=> {    \r\n    croppedArtTemp[i].thumb = '';\r\n    croppedArtTemp[i].cropped = false;\r\n    setCroppedArt([...croppedArtTemp]);\r\n\r\n}\r\n\r\n\r\n  const handleCrop = useCallback(async (i) => {\r\n    try {\r\n      const { croppedImg, croppedImgFile } = await getCroppedImg(art,croppedAreaPixels)\r\n      croppedArtTemp[i].thumb = croppedImg;\r\n      croppedArtTemp[i].thumbFile = croppedImgFile;\r\n      croppedArtTemp[i].cropped = true;\r\n      croppedArtTemp[i].croppedAreaPixels = croppedAreaPixels;\r\n      setCroppedArt([...croppedArtTemp]);\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [croppedAreaPixels])\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        {\r\n            tabValue === 0 ?\r\n            <Grid item xs={12} sm={12} md={12} style={{position:'relative', height:300, display:'flex', flexDirection:'column', justifyContent:'center'}}>\r\n                <label htmlFor=\"inputfile\" style={{cursor:\"pointer\"}}>\r\n                    <Tooltip title={\"Carga tu arte con un mínimo de 1080px tanto de ancho como de alto. Tu Arte debe pesar máximo 5Mb y estar en formato .jpeg o .png\"}>\r\n                        <img className={classes.img} alt=\"Uploaded\" src={art} />\r\n                    </Tooltip>\r\n                </label>\r\n            </Grid>\r\n            :\r\n            croppedArt &&\r\n            croppedArt.map((ar, index)=>(\r\n            ar.id === tabValue &&\r\n            <Grid item xs={12} sm={12} md={12} style={{position:'relative', height: 300, display:'flex', flexDirection:'column', justifyContent:'center'}}>\r\n                {\r\n                croppedArt[index].thumb == '' ?\r\n                        <EasyCropper \r\n                        art={art}\r\n                        ar={ar}\r\n                        croppedArt={croppedArt}\r\n                        setCroppedArt={setCroppedArt}\r\n                        index={index}\r\n                        setCroppedAreaPixels={setCroppedAreaPixels}\r\n                        />\r\n                :\r\n                <Grid item xs={12} sm={12} md={12} style={{position:'relative', height: 300, display:'flex', flexDirection:'column', justifyContent:'center'}}>\r\n                        <Tooltip title={\"Genera el recorte para recomendar a tus clientes las mejores secciones de tu arte.\"}>\r\n                            <img className={classes.img} alt=\"Uploaded\" src={croppedArtTemp[index].thumb} />\r\n                        </Tooltip>\r\n                </Grid>\r\n                }\r\n                {\r\n                croppedArt[index].cropped ?\r\n                <Grid item xs={12} sm={12} md={12} style={{position: 'absolute', right: 5, bottom: 5}}>\r\n                    \r\n                    <IconButton color=\"secondary\" aria-label=\"add an alarm\" style={{padding: 0}} onClick={()=>{updateCrop(index)}}>\r\n                        <Typography>Recortar</Typography>\r\n                        <CropIcon />\r\n                    </IconButton>\r\n                </Grid>\r\n                :\r\n                <Grid item xs={12} sm={12} md={12} style={{position: 'absolute', right: 5, bottom: 5, zIndex: 20}}>\r\n                    \r\n                    <IconButton color=\"secondary\" aria-label=\"add an alarm\" style={{padding: 0}} onClick={()=>{handleCrop(index)}}>\r\n                        <Typography>Listo</Typography>\r\n                        <CheckCircleOutlineIcon />\r\n                    </IconButton>\r\n                </Grid>\r\n                }\r\n            </Grid>\r\n        ))\r\n        }\r\n            {/* <Grid xs={12} sm={12} md={12}><Typography>Selecciona cómo quieres recomendar el arte a tus clientes:</Typography></Grid> */}\r\n            <Grid xs={12} sm={12} md={12} style={{ maxHeight: 80}}>\r\n                <Paper square className={classes.iconTabs}>\r\n                    <Tabs\r\n                    value={tabValue}\r\n                    onChange={handleChange}\r\n                    variant=\"fullWidth\"\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"secondary\"\r\n                    variant=\"scrollable\"\r\n                    scrollButtons=\"auto\"\r\n                    >\r\n                    \r\n                    <Tab className={classes.tab} icon={<PhotoLibraryIcon />} label=\"Original\" />\r\n                    {\r\n                    croppedArt &&\r\n                    croppedArt.map((ar)=>(\r\n                        <Tab className={classes.tab} icon={<PhotoLibraryIcon />} label={ar.name} id={ar.id} />\r\n                    ))\r\n                    }\r\n                    </Tabs>\r\n                </Paper> \r\n            </Grid>\r\n          </div>\r\n  )\r\n}","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\orders\\paymentMethods.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\products\\products.jsx",["451"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport clsx from 'clsx';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport CreateProduct from '../../productCrud/createProduct';\r\nimport UpdateProduct from '../../productCrud/updateProduct';\r\nimport DisableProduct from '../../productCrud/disableProduct';\r\nimport ReadProducts from '../../productCrud/readProducts';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    toolbar: {\r\n      paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: '0 8px',\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n      display: 'none',\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n      position: 'relative',\r\n      whiteSpace: 'nowrap',\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerPaperClose: {\r\n      overflowX: 'hidden',\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      width: theme.spacing(7),\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9)\r\n      },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n      flexGrow: 1,\r\n      height: '100vh',\r\n      overflow: 'auto',\r\n    },\r\n    container: {\r\n      paddingTop: theme.spacing(4),\r\n      paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      display: 'flex',\r\n      overflow: 'none',\r\n      flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n      height: 'auto',\r\n      overflow: 'none'\r\n    },\r\n    fab: {\r\n      right: 0,\r\n      position: 'absolute'\r\n    },\r\n  }));\r\n\r\nexport default function Products(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [ activeCrud, setActiveCrud ] = useState('read');\r\n  const [ product, setProduct ] = useState(localStorage.getItem('product') ? JSON.parse(localStorage.getItem('product')) : undefined);\r\n  const [ productEdit, setProductEdit ] = useState(true);\r\n  const theme = useTheme();\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up('md'));\r\n  const isDeskTop = useMediaQuery(theme.breakpoints.up('sm'));\r\n\r\n  const handleProductAction = (action)=> {\r\n    history.push({pathname:\"/admin/product/\"+action});\r\n  }\r\n\r\n  useEffect(()=>{\r\n    location.pathname.split('/').length === 5 ?\r\n      setActiveCrud(location.pathname.split('/')[location.pathname.split('/').length-2])\r\n    : location.pathname.split('/').length === 4 &&\r\n      setActiveCrud(location.pathname.split('/')[location.pathname.split('/').length-1])\r\n  },[location.pathname]);\r\n\r\n  return (\r\n    <div style={{position:'relative'}}>\r\n      {\r\n        productEdit &&\r\n        <div style={{position:'absolute', right:0}}>\r\n          <Fab color=\"default\" aria-label=\"edit\" onClick={()=>{handleProductAction('read')}}>\r\n            <ViewListIcon />\r\n          </Fab>\r\n          {/* <Fab color=\"secondary\" aria-label=\"edit\" onClick={()=>{handleUserAction('update')}}>\r\n            <EditIcon />\r\n          </Fab> */}\r\n          <Fab color=\"primary\" aria-label=\"add\" onClick={()=>{handleProductAction('create')}}>\r\n            <AddIcon />\r\n          </Fab>\r\n        </div>\r\n      }\r\n      <Grid container spacing={3} style={{margin: isDesktop ? '12px' : ''}}>\r\n          {/* Chart */}\r\n          <Grid item xs={12} md={12} lg={12}>\r\n              <Paper className={fixedHeightPaper} >\r\n                {\r\n                  activeCrud === 'create' ?\r\n                    <CreateProduct />\r\n                  : activeCrud === 'read' ?\r\n                    <ReadProducts setProduct={setProduct}/>\r\n                  : activeCrud === 'update' ?\r\n                    <div style={{height: '115vh'}}>\r\n                      <UpdateProduct product={product} setProductEdit={setProductEdit}/>\r\n                    </div>\r\n                  :\r\n                    <DisableProduct />\r\n                }\r\n              </Paper>\r\n          </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\consumers\\consumers.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\adminUser\\adminUser.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\listItems.jsx",["452","453","454"],"import React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PaletteIcon from \"@material-ui/icons/Palette\";\r\nimport LoyaltyIcon from \"@material-ui/icons/Loyalty\";\r\nimport LocalMallIcon from \"@material-ui/icons/LocalMall\";\r\nimport PaymentIcon from \"@material-ui/icons/Payment\";\r\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\r\nimport WebAssetIcon from \"@material-ui/icons/WebAsset\";\r\nimport Preferences from \"./preferences/Preferences\";\r\nimport Testimonials from \"../TestimonialsCrud/Testimonials\";\r\nimport { InsertEmoticon } from \"@material-ui/icons\";\r\n\r\nexport default function MainListItems(props) {\r\n  const history = useHistory();\r\n\r\n  const handleClick = (value) => {\r\n    history.push({ pathname: \"/admin/\" + value + \"/read\" });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <ListItem\r\n          button\r\n          selected={props.active === \"dashboard\"}\r\n          style={{ color: \"gray\" }}\r\n        >\r\n          <ListItemIcon>\r\n            <DashboardIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Tablero General\" />\r\n          {/* onClick={(e)=>{handleClick('dashboard')}} /> */}\r\n        </ListItem>\r\n        <ListItem button selected={props.active === \"product\"}>\r\n          <ListItemIcon>\r\n            <LocalMallIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Productos\"\r\n            onClick={(e) => {\r\n              handleClick(\"product\");\r\n            }}\r\n          />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={props.active === \"consumer\"}\r\n          style={{ color: \"gray\" }}\r\n        >\r\n          <ListItemIcon>\r\n            <PeopleIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Consumidores\" />\r\n          {/* <ListItemText primary=\"Consumidores\" onClick={(e)=>{handleClick('consumer')}}  /> */}\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={props.active === \"payment-method\"}\r\n          style={{ color: \"gray\" }}\r\n        >\r\n          <ListItemIcon>\r\n            <PaymentIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Métodos de pago\" />\r\n          {/* <ListItemText primary=\"Métodos de pago\" onClick={(e)=>{handleClick('payment-method')}}  /> */}\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={props.active === \"order\"}\r\n          style={{ color: \"gray\" }}\r\n        >\r\n          <ListItemIcon>\r\n            <ReceiptIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Pedidos\" />\r\n          {/* <ListItemText primary=\"Pedidos\" onClick={(e)=>{handleClick('order')}}  /> */}\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={props.active === \"prixer\"}\r\n          // style={{ color: \"gray\" }}\r\n        >\r\n          <ListItemIcon>\r\n            <PaletteIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Prixers\"\r\n            onClick={(e) => {\r\n              handleClick(\"prixer\");\r\n            }}\r\n          />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={props.active === \"parameters\"}\r\n          style={{ color: \"gray\" }}\r\n        >\r\n          <ListItemIcon>\r\n            <BarChartIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Parámetros\" />\r\n          {/* onClick={(e)=>{handleClick('parameters')}}  /> */}\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={props.active === \"testimonials\"}\r\n          // style={{ color: \"gray\" }}\r\n        >\r\n          <ListItemIcon>\r\n            <InsertEmoticon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Testimonios\"\r\n            onClick={(e) => {\r\n              handleClick(\"testimonials\");\r\n            }}\r\n          />\r\n        </ListItem>\r\n      </div>\r\n      <Divider />\r\n      <div>\r\n        <ListSubheader inset>Configuración</ListSubheader>\r\n        <ListItem button selected={props.active === \"user\"}>\r\n          <ListItemIcon>\r\n            <AssignmentIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Usuarios\"\r\n            onClick={(e) => {\r\n              handleClick(\"user\");\r\n            }}\r\n          />\r\n        </ListItem>\r\n        <ListItem button selected={props.active === \"preferences\"}>\r\n          <ListItemIcon>\r\n            <WebAssetIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Preferencias\"\r\n            onClick={(e) => {\r\n              handleClick(\"preferences\");\r\n            }}\r\n          />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={props.active === \"role\"}\r\n          style={{ color: \"gray\" }}\r\n        >\r\n          <ListItemIcon>\r\n            <AssignmentIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Roles\" />\r\n          {/* onClick={(e)=>{handleClick('role')}}  /> */}\r\n        </ListItem>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\products\\productsGrid.jsx",["455","456","457","458","459","460","461","462","463"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\dashboard.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\prixerOptions\\prixerOptions.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\prixerProfile\\userData\\userData.jsx",["464","465","466","467","468"],"// Debo hacer los unit y functional tests.\r\n// Debo migrar los states a Redux.\r\n\r\nimport React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useState, useEffect } from \"react\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport axios from \"axios\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport InstagramIcon from \"@material-ui/icons/Instagram\";\r\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  loading: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n    marginLeft: \"50vw\",\r\n    marginTop: \"50vh\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    paddingTop: 73,\r\n    width: \"100%\",\r\n    display: \"grid\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: \"auto\",\r\n    // width: \"100%\",\r\n  },\r\n  image: {\r\n    width: 128,\r\n    height: 128,\r\n  },\r\n  snackbar: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      bottom: 90,\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  img: {\r\n    margin: \"auto\",\r\n    display: \"block\",\r\n    maxWidth: \"100%\",\r\n    maxHeight: \"100%\",\r\n  },\r\n  avatar: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    borderStyle: \"solid\",\r\n    borderWidth: 1,\r\n    borderColor: \"#000\",\r\n    backgroundColor: \"#fff\",\r\n    width: \"160px\",\r\n    height: \"160px\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nexport default function UserData(props) {\r\n  const classes = useStyles();\r\n  const [prixerDataState, setPrixerDataState] = useState(\"read\");\r\n  const [username, setUsername] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [firstName, setFirstName] = useState();\r\n  const [lastName, setLastName] = useState();\r\n  const [specialtyArt, setSpecialtyArt] = useState([]);\r\n  const [instagram, setInstagram] = useState();\r\n  const [facebook, setFacebook] = useState();\r\n  const [twitter, setTwitter] = useState();\r\n  const [description, setDescription] = useState();\r\n  const [dateOfBirth, setDateOfBirth] = useState();\r\n  const [phone, setPhone] = useState();\r\n  const [country, setCountry] = useState();\r\n  const [city, setCity] = useState();\r\n  const [ready, setReady] = useState(false);\r\n  const [prixerExists, setPrixerExists] = useState(false);\r\n  const [avatarObj, setAvatarObj] = useState(\"\");\r\n  const [profilePic, setProfilePic] = useState(\"\");\r\n  const [inputChange, setInputChange] = useState(false);\r\n  const [backdrop, setBackdrop] = useState(true);\r\n  const theme = useTheme();\r\n  const history = useHistory();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"lg\"));\r\n\r\n  function getStyles(specialty, specialtyArt, theme) {\r\n    return {\r\n      fontWeight:\r\n        specialty.indexOf(specialty) === -1\r\n          ? theme.typography.fontWeightRegular\r\n          : theme.typography.fontWeightMedium,\r\n    };\r\n  }\r\n\r\n  useEffect(() => {\r\n    const base_url = process.env.REACT_APP_BACKEND_URL + \"/prixer/read\";\r\n    const data = {\r\n      username: props.prixerUsername,\r\n    };\r\n\r\n    axios\r\n      .post(base_url, data)\r\n      .then((response) => {\r\n        if (!response.data.status) {\r\n          return history.push(\"/\");\r\n        }\r\n        setUsername(response.data.username);\r\n        setEmail(response.data.email);\r\n        setFirstName(response.data.firstName);\r\n        setLastName(response.data.lastName);\r\n        setSpecialtyArt(response.data.specialtyArt);\r\n        setInstagram(response.data.instagram);\r\n        setFacebook(response.data.facebook);\r\n        setTwitter(response.data.twitter);\r\n        setDescription(response.data.description);\r\n        setDateOfBirth(response.data.dateOfBirth);\r\n        setPhone(response.data.phone);\r\n        setCountry(response.data.country);\r\n        setCity(response.data.city);\r\n        setAvatarObj(response.data.avatar);\r\n        setProfilePic(response.data.avatar);\r\n        setReady(true);\r\n        setBackdrop(false);\r\n        setPrixerExists(true);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, [props.prixerUsername]);\r\n\r\n  const handleProfileDataEdit = async () => {\r\n    if (prixerDataState === \"edit\") {\r\n      setBackdrop(true);\r\n      var formData = new FormData();\r\n      if (inputChange) {\r\n        formData.append(\"avatar\", profilePic);\r\n      }\r\n      formData.append(\"username\", username);\r\n      formData.append(\"firstName\", firstName);\r\n      formData.append(\"email\", email);\r\n      formData.append(\"lastName\", lastName);\r\n      formData.append(\"specialtyArt\", specialtyArt);\r\n      formData.append(\"instagram\", instagram);\r\n      formData.append(\"facebook\", facebook);\r\n      formData.append(\"twitter\", twitter);\r\n      formData.append(\"description\", description);\r\n      formData.append(\"dateOfBirth\", dateOfBirth);\r\n      formData.append(\"phone\", phone);\r\n      formData.append(\"country\", country);\r\n      formData.append(\"city\", city);\r\n\r\n      const base_url = process.env.REACT_APP_BACKEND_URL + \"/prixer/update\";\r\n      const response = await axios.post(base_url, formData, {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      });\r\n      if (response.data) {\r\n        setUsername(response.data.username);\r\n        setEmail(response.data.email);\r\n        setFirstName(response.data.firstName);\r\n        setLastName(response.data.lastName);\r\n        setSpecialtyArt(response.data.specialtyArt);\r\n        setInstagram(response.data.instagram);\r\n        setFacebook(response.data.facebook);\r\n        setTwitter(response.data.twitter);\r\n        setDescription(response.data.description);\r\n        setDateOfBirth(response.data.dateOfBirth);\r\n        setPhone(response.data.phone);\r\n        setCountry(response.data.country);\r\n        setCity(response.data.city);\r\n        setAvatarObj(response.data.avatar);\r\n        setProfilePic(response.data.avatar);\r\n        setReady(true);\r\n        setBackdrop(false);\r\n        setPrixerExists(true);\r\n        setPrixerDataState(\"read\");\r\n      } else {\r\n        setReady(true);\r\n        setBackdrop(false);\r\n      }\r\n    } else {\r\n      setPrixerDataState(\"edit\");\r\n    }\r\n  };\r\n\r\n  const onImageChange = async (e) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      setInputChange(true);\r\n      setAvatarObj(URL.createObjectURL(e.target.files[0]));\r\n      setProfilePic(e.target.files[0]);\r\n    }\r\n  };\r\n  const handleChange = (e) => {\r\n    setSpecialtyArt(e.target.value);\r\n  };\r\n\r\n  return prixerExists ? (\r\n    <div className={classes.root}>\r\n      <Backdrop className={classes.backdrop} open={backdrop}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Paper\r\n        className={classes.paper}\r\n        style={{ width: isDesktop ? \"50%\" : \"100%\" }}\r\n      >\r\n        {prixerDataState === \"read\" && (\r\n          <>\r\n            <Box style={{ textAlign: \"end\", marginBottom: \"4px\" }}>\r\n              {JSON.parse(localStorage.getItem(\"token\")) &&\r\n                JSON.parse(localStorage.getItem(\"token\")).username ===\r\n                  username && (\r\n                  <IconButton\r\n                    title=\"Profile Edit\"\r\n                    component=\"span\"\r\n                    color=\"primary\"\r\n                    onClick={handleProfileDataEdit}\r\n                    // variant=\"contained\"\r\n                    // style={{ marginBottom: \"8px\" }}\r\n                  >\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                )}\r\n              <Grid container spacing={2}>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  sm={4}\r\n                  md={4}\r\n                  lg={4}\r\n                  xl={4}\r\n                  // style={{ marginLeft: 15 }}\r\n                >\r\n                  <Box\r\n                    style={{\r\n                      marginBottom: \"4px\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    {avatarObj ? (\r\n                      <Avatar className={classes.avatar}>\r\n                        <label htmlFor=\"file-input\">\r\n                          <img\r\n                            src={profilePic}\r\n                            alt=\"Prixer profile avatar\"\r\n                            style={{ maxHeight: 200 }}\r\n                          />\r\n                        </label>\r\n                      </Avatar>\r\n                    ) : (\r\n                      JSON.parse(localStorage.getItem(\"token\")) &&\r\n                      JSON.parse(localStorage.getItem(\"token\")).username ===\r\n                        username && (\r\n                        <Avatar className={classes.avatar}>\r\n                          <label htmlFor=\"file-input\">\r\n                            <img\r\n                              src=\"/PrixLogo.png\"\r\n                              alt=\"Prixer profile avatar\"\r\n                              style={{ maxHeight: 200, height: 120 }}\r\n                              onClick={handleProfileDataEdit}\r\n                            />\r\n                          </label>\r\n                        </Avatar>\r\n                      )\r\n                    )}\r\n                  </Box>\r\n                </Grid>\r\n                <Grid item xs={12} sm={8} md={8} lg={8} xl={8}>\r\n                  <Box\r\n                    display={\"flex\"}\r\n                    style={{\r\n                      marginBottom: \"4px\",\r\n                      justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"body1\">\r\n                      {specialtyArt?.map((specialty, index) =>\r\n                        specialtyArt?.length === index + 1\r\n                          ? specialty\r\n                          : `${specialty}, `\r\n                      )}\r\n                    </Typography>\r\n                    {/* <Typography variant=\"h5\">\r\n                    {firstName} {lastName}\r\n                  </Typography> */}\r\n                  </Box>\r\n                  <Box\r\n                    display={\"flex\"}\r\n                    style={{\r\n                      marginBottom: \"4px\",\r\n                      justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"body1\" color=\"textSecondary\">\r\n                      {username}\r\n                    </Typography>\r\n                  </Box>\r\n                  {/* <Box style={{ marginBottom: \"4px\" }}>\r\n                  <Typography variant=\"body1\">\r\n                    {specialtyArt?.map((specialty, index) =>\r\n                      specialtyArt?.length === index + 1\r\n                        ? specialty\r\n                        : `${specialty}, `\r\n                    )}\r\n                  </Typography>\r\n                </Box> */}\r\n\r\n                  <Box\r\n                    display={\"flex\"}\r\n                    style={{\r\n                      marginBottom: \"4px\",\r\n                      justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                    }}\r\n                  >\r\n                    <Typography>{description}</Typography>\r\n                  </Box>\r\n                  <Box\r\n                    style={{\r\n                      marginBottom: \"4px\",\r\n                      justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <InstagramIcon style={{ marginRight: \"4px\" }} />\r\n                    <a\r\n                      target=\"_blank\"\r\n                      href={\"https://www.instagram.com/\" + instagram}\r\n                      style={{ textDecoration: \"none\", color: \"#d33f49\" }}\r\n                    >\r\n                      {instagram}\r\n                    </a>\r\n                  </Box>\r\n                  <Box\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      marginBottom: \"4px\",\r\n                      justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                    }}\r\n                  >\r\n                    {facebook && (\r\n                      <>\r\n                        <FacebookIcon style={{ marginRight: \"4px\" }} />\r\n                        <a\r\n                          target=\"_blank\"\r\n                          href={\"https://www.facebook.com/\" + facebook}\r\n                          style={{ textDecoration: \"none\", color: \"#d33f49\" }}\r\n                        >\r\n                          {facebook}\r\n                        </a>\r\n                      </>\r\n                    )}\r\n                  </Box>\r\n                  <Box\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      marginBottom: \"4px\",\r\n                      justifyContent: isMobile ? \"center\" : \"flexstart\",\r\n                    }}\r\n                  >\r\n                    {twitter && (\r\n                      <>\r\n                        <TwitterIcon style={{ marginRight: \"4px\" }} />\r\n                        <a\r\n                          target=\"_blank\"\r\n                          href={\"https://www.twitter.com/\" + twitter}\r\n                          style={{ textDecoration: \"none\", color: \"#d33f49\" }}\r\n                        >\r\n                          {twitter}\r\n                        </a>\r\n                      </>\r\n                    )}\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </>\r\n        )}\r\n        {prixerDataState === \"edit\" && (\r\n          <>\r\n            <Box style={{ textAlign: \"end\", marginBottom: \"4px\" }}>\r\n              {JSON.parse(localStorage.getItem(\"token\")) &&\r\n                JSON.parse(localStorage.getItem(\"token\")).username ===\r\n                  username && (\r\n                  <Button\r\n                    color=\"primary\"\r\n                    onClick={handleProfileDataEdit}\r\n                    variant=\"contained\"\r\n                    style={{ marginBottom: \"8px\" }}\r\n                  >\r\n                    Editar\r\n                  </Button>\r\n                )}\r\n            </Box>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n                <Box>\r\n                  <Box\r\n                    marginBottom={2}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    {avatarObj ? (\r\n                      <Avatar className={classes.avatar}>\r\n                        <label htmlFor=\"file-input\">\r\n                          <img\r\n                            src={avatarObj}\r\n                            alt=\"Prixer profile avatar\"\r\n                            style={{ maxHeight: 200 }}\r\n                          />\r\n                        </label>\r\n                        <input\r\n                          style={{ display: \"none\" }}\r\n                          accept=\"image/*\"\r\n                          id=\"file-input\"\r\n                          type=\"file\"\r\n                          onChange={onImageChange}\r\n                          required\r\n                        />\r\n                      </Avatar>\r\n                    ) : (\r\n                      <Avatar className={classes.avatar}>\r\n                        <label htmlFor=\"file-input\">\r\n                          <AddIcon\r\n                            style={{ width: 60, height: 60, color: \"#d33f49\" }}\r\n                          />\r\n                        </label>\r\n                        <input\r\n                          style={{ display: \"none\" }}\r\n                          accept=\"image/*\"\r\n                          id=\"file-input\"\r\n                          type=\"file\"\r\n                          onChange={onImageChange}\r\n                        />\r\n                      </Avatar>\r\n                    )}\r\n                  </Box>\r\n                  <Box style={{ marginBottom: \"8px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      label=\"Nombre\"\r\n                      value={firstName}\r\n                      onChange={(e) => {\r\n                        setFirstName(e.target.value);\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                  <Box style={{ marginBottom: \"8px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      variant=\"outlined\"\r\n                      label=\"Apellido\"\r\n                      value={lastName}\r\n                      onChange={(e) => {\r\n                        setLastName(e.target.value);\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                  <Box>\r\n                    <FormControl\r\n                      className={classes.formControl}\r\n                      style={{ width: \"100%\", marginBottom: 20 }}\r\n                    >\r\n                      <InputLabel id=\"demo-mutiple-name-label\">\r\n                        Especialidad\r\n                      </InputLabel>\r\n                      <Select\r\n                        labelId=\"demo-multiple-name-label\"\r\n                        id=\"demo-multiple-name\"\r\n                        multiple\r\n                        value={specialtyArt}\r\n                        onChange={(e) => setSpecialtyArt(e) || handleChange(e)}\r\n                        MenuProps={MenuProps}\r\n                      >\r\n                        {[\"Fotografía\", \"Diseño\", \"Artes plásticas\"].map(\r\n                          (specialty) => (\r\n                            <MenuItem\r\n                              key={specialty}\r\n                              value={specialty}\r\n                              style={getStyles(specialty, specialtyArt, theme)}\r\n                            >\r\n                              {specialty}\r\n                            </MenuItem>\r\n                          )\r\n                        )}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Box>\r\n                  <Box style={{ marginBottom: \"8px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"instagram\"\r\n                      variant=\"outlined\"\r\n                      label=\"Instagram\"\r\n                      onChange={(e) => {\r\n                        setInstagram(e.target.value);\r\n                      }}\r\n                      value={instagram}\r\n                    />\r\n                  </Box>\r\n                  <Box style={{ marginBottom: \"8px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"facebook\"\r\n                      variant=\"outlined\"\r\n                      label=\"Facebook\"\r\n                      onChange={(e) => {\r\n                        setFacebook(e.target.value);\r\n                      }}\r\n                      value={facebook}\r\n                    />\r\n                  </Box>\r\n                  <Box style={{ marginBottom: \"8px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"twitter\"\r\n                      variant=\"outlined\"\r\n                      label=\"Twitter\"\r\n                      onChange={(e) => {\r\n                        setTwitter(e.target.value);\r\n                      }}\r\n                      value={twitter}\r\n                    />\r\n                  </Box>\r\n                  <Box>\r\n                    <TextField\r\n                      fullWidth\r\n                      id=\"description\"\r\n                      label=\"Descripción\"\r\n                      onChange={(e) => {\r\n                        setDescription(e.target.value);\r\n                      }}\r\n                      value={description}\r\n                      inputProps={{ maxLength: 300 }}\r\n                      multiline\r\n                      item\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Paper>\r\n    </div>\r\n  ) : (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Backdrop className={classes.backdrop} open={backdrop}>\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} container>\r\n            <Grid item xs container direction=\"column\" spacing={2}>\r\n              <Grid item xs>\r\n                <Typography gutterBottom variant=\"subtitle1\">\r\n                  Increíble, pero cierto\r\n                </Typography>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  Este usuario no existe\r\n                </Typography>\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                  Inténtalo de nuevo | ig: Wrong\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\utils\\cropImage.js",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\sharedComponents\\artUploader\\easyCropper.jsx",["469","470","471","472","473"],"import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useState, useCallback } from 'react';\r\nimport Cropper from 'react-easy-crop'\r\n\r\nconst useStyles = makeStyles((theme) => ({}));\r\n\r\n\r\nexport default function EasyCropper(props) {\r\n    const  { art, ar, croppedArt, setCroppedArt, index, setCroppedAreaPixels  } = props;\r\n    const classes = useStyles();\r\n    const [aspect, setAspect] = useState(croppedArt[index].aspect);\r\n    const [crop, setCrop] = useState(croppedArt[index].crop);\r\n    const [zoom, setZoom] = useState(croppedArt[index].zoom);\r\n    const croppedArtTemp = croppedArt;\r\n    \r\n    const onCropComplete = useCallback(async (croppedArea, croppedAreaPixels) => {\r\n        croppedArtTemp[index].crop.x = croppedAreaPixels.x;\r\n        croppedArtTemp[index].crop.y = croppedAreaPixels.y;\r\n        setCroppedAreaPixels(croppedAreaPixels);\r\n        setCroppedArt(croppedArtTemp);     \r\n    });\r\n\r\n    return (\r\n        // <div style={{display:'flex', flexDirection:'column', justifyContent:'center'}}>\r\n            <Cropper\r\n            image={art}\r\n            crop={crop}\r\n            zoom={zoom}\r\n            aspect={aspect}\r\n            onCropChange={setCrop}\r\n            onCropComplete={onCropComplete}\r\n            onZoomChange={setZoom}\r\n            />\r\n        // </div>\r\n  )\r\n}","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\readConsumers.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\createPaymentMethod.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\createConsumer.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\updatePaymentMethod.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\paymentMethodCrud\\readPaymentMethods.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\consumerCrud\\updateConsumer.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\readProducts.jsx",["474","475","476"],"import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Title from \"../adminMain/Title\";\r\nimport axios from \"axios\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport default function ReadProducts(props) {\r\n  const history = useHistory();\r\n  const [rows, setRows] = useState();\r\n  const [deleteSuccess, setDelete] = useState();\r\n  const [deleteOpen, setDeleteOpen] = useState(false);\r\n\r\n  const getRows = () => {\r\n    const base_url =\r\n      process.env.REACT_APP_BACKEND_URL + \"/admin/product/read-all\";\r\n    axios\r\n      .get(base_url)\r\n      .then((response) => {\r\n        console.log(response.data.products);\r\n        setRows(response.data.products);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getRows();\r\n  }, []);\r\n\r\n  const handleActive = (product, action) => {\r\n    props.setProduct(product);\r\n    localStorage.setItem('product', JSON.stringify(product));\r\n    history.push(\"/admin/product/\" + action + \"/\" + product._id);\r\n  };\r\n\r\n  const deleteProduct = async (id) => {\r\n    const URI = process.env.REACT_APP_BACKEND_URL + `/product/delete/${id}`;\r\n    const res = await axios.delete(URI);\r\n    setDelete(res.data);\r\n    getRows();\r\n    setDeleteOpen(true);\r\n    setTimeout(() => {\r\n      setDeleteOpen(false);\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Productos</Title>\r\n      {rows && (\r\n        <Table size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\"></TableCell>\r\n              <TableCell align=\"center\">Imagen</TableCell>\r\n              <TableCell align=\"center\">Nombre</TableCell>\r\n              <TableCell align=\"center\">Activo</TableCell>\r\n              <TableCell align=\"center\">Categoría</TableCell>\r\n              <TableCell align=\"center\">PVP desde-hasta</TableCell>\r\n              <TableCell align=\"center\">PVM desde-hasta</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows &&\r\n              rows.map((row) => (\r\n                <TableRow key={row._id}>\r\n                  <TableCell align=\"center\">\r\n                    <Fab\r\n                      color=\"default\"\r\n                      style={{ width: 35, height: 35 }}\r\n                      aria-label=\"edit\"\r\n                      onClick={(e) => {\r\n                        handleActive(row, \"update\");\r\n                      }}\r\n                    >\r\n                      <EditIcon />\r\n                    </Fab>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    {row.sources.images[0].type == 'images' ? (\r\n                      <>\r\n                        <img\r\n                          src={row.sources.images[0].url}\r\n                          width={150}\r\n                          alt=\"imageProduct\"\r\n                        />\r\n                        <Typography\r\n                          style={{ fontSize: \"1rem\", color: \"#bdbdbd\" }}\r\n                        >{`Cantidad de imagenes: ${row.sources.images.length}`}</Typography>\r\n                      </>\r\n                    ) :\r\n                    <div>\r\n                    Video de Youtube\r\n                    </div>\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">{row.name}</TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Checkbox\r\n                      disabled\r\n                      checked={row.active}\r\n                      color=\"primary\"\r\n                      inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">{row.category}</TableCell>\r\n                  <TableCell align=\"center\">\r\n                    {row.publicPrice.from}-{row.publicPrice.from}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    {row.prixerPrice.from}-{row.prixerPrice.to}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Fab\r\n                      color=\"default\"\r\n                      style={{ width: 35, height: 35 }}\r\n                      aria-label=\"Delete\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        deleteProduct(row._id);\r\n                      }}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </Fab>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      )}\r\n      <Snackbar\r\n        open={deleteOpen}\r\n        autoHideDuration={1000}\r\n        message={deleteSuccess?.productResult}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\createProduct.jsx",["477","478","479","480","481","482","483","484"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Title from '../adminMain/Title';\r\nimport axios from 'axios';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import OutlinedInput from '@material-ui/core/OutlinedInput';\r\n// import InputLabel from '@material-ui/core/InputLabel';\r\n// import InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n// import Visibility from '@material-ui/icons/Visibility';\r\n// import VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport clsx from \"clsx\";\r\n// import validations from '../../utils/validations';\r\nimport HighlightOffOutlinedIcon from \"@material-ui/icons/HighlightOffOutlined\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n  loaderImage: {\r\n    width: \"120%\",\r\n    border: \"2px\",\r\n    height: \"30vh\",\r\n    borderStyle: \"groove\",\r\n    borderColor: \"#d33f49\",\r\n    backgroundColor: \"#ededed\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  imageLoad: {\r\n    maxWidth: \"100%\",\r\n    maxHeight: \"100%\",\r\n    padding: \"5px\",\r\n    marginTop: \"5px\",\r\n  },\r\n  formHead: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignContent: \"center\",\r\n    justifyContent: \"space-evenly\",\r\n    alignItems: \"center\",\r\n  },\r\n  buttonImgLoader: {\r\n    cursor: \"pointer\",\r\n    padding: \"5px\",\r\n  },\r\n  buttonEdit: {\r\n    cursor: \"pointer\",\r\n    padding: \"5px\",\r\n  },\r\n}));\r\n\r\nexport default function CreateProduct() {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const isDesktop = useMediaQuery(theme.breakpoints.up('md'));\r\n    const isDeskTop = useMediaQuery(theme.breakpoints.up('sm'));\r\n    const [ active, setActive ] = useState(false);\r\n    const [ productName, setProductName ] = useState('');\r\n    const [ description, setDescription ] = useState('');\r\n    const [ category, setCategory ] = useState('');\r\n    const [ considerations, setConsiderations ] = useState('');\r\n    const [images, newImages] = useState({images : []});\r\n    const [ videoUrl, setVideoUrl ] = useState('')\r\n    const [ videoPreview, setVideoPreview ] = useState('')\r\n    const [fromPublicPrice, setFromPublicPrice] = useState('');\r\n    const [ toPublicPrice, setToPublicPrice ] = useState('');\r\n    const [ fromPrixerPrice, setFromPrixerPrice ] = useState('');\r\n    const [ toPrixerPrice, setToPrixerPrice ] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [buttonState, setButtonState] = useState(false);\r\n    const [ hasSpecialVar, setHasSpecialVar ] = useState(false);\r\n    const [ specialVars, setSpecialVars ] = useState(false);\r\n    const [imageLoader, setLoadImage] = useState({loader: [], filename: 'Subir imagenes'})\r\n    const history = useHistory();\r\n\r\n    //Error states.\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    const [snackBarError, setSnackBarError] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [loadOpen, setLoadOpen] = useState(false);\r\n    const [loaDOpen, setLoaDOpen] = useState(false);\r\n    const [mustImage, setMustImages] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n        setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n      setOpen(false);\r\n  };\r\n\r\n    //Preview de imagen antes de enviar\r\n    const convertToBase64 = (blob) => {\r\n      return new Promise((resolve) => {\r\n        var reader = new FileReader();\r\n        reader.onload = function () {\r\n          resolve(reader.result);\r\n        };\r\n        reader.readAsDataURL(blob);\r\n      });\r\n    };\r\n\r\n  const loadImage = async (e) => {\r\n    e.preventDefault();\r\n    if (imageLoader.loader.length > 4) {\r\n      setLoadOpen(true);\r\n      setTimeout(() => {\r\n        setLoadOpen(false);\r\n      }, 3000);\r\n    } else {\r\n      const file = e.target.files[0];\r\n      const resizedString = await convertToBase64(file);\r\n      if (imageLoader.loader.length >= 4) {\r\n        return null;\r\n      } else {\r\n        imageLoader.loader.push(resizedString);\r\n        if (images.images.length >= 4) {\r\n          return null;\r\n        } else {\r\n          images.images.push(file);\r\n        }\r\n      }\r\n      setLoadImage({ loader: imageLoader.loader, filename: file.name });\r\n    }\r\n  };\r\n\r\n  const replaceImage = async (e, index) => {\r\n    e.preventDefault();\r\n    const file = e.target.files[0];\r\n    const resizedString = await convertToBase64(file);\r\n    imageLoader.loader[index] = resizedString;\r\n    images.images[index] = file;\r\n    setLoadImage({ loader: imageLoader.loader, filename: file.name });\r\n  };\r\n\r\n  const modifyString = (a, sti) => {\r\n      const url = sti.split(' ')\r\n      const width = sti.replace('560', '326').replace('315', '326');\r\n      const previewMp4 = sti.replace('1350', '510').replace('494', '350');\r\n      setVideoUrl(width)\r\n      setVideoPreview(previewMp4)\r\n      // const index = url[3].indexOf()\r\n      // sti.replace(index, '?controls=0\\\"')\r\n    //sti[79]\r\n  }\r\n\r\n  const handleSubmit = async (e)=> {\r\n      e.preventDefault();\r\n      if(images.images.length > 4)\r\n      {\r\n        setLoaDOpen(true)\r\n        setTimeout(() => {\r\n          setLoaDOpen(false)\r\n        }, 3000)\r\n      }else{\r\n        if(images.images.length <= 0 && videoUrl == ''){\r\n          setMustImages(true)\r\n          setTimeout(() => {\r\n            setMustImages(false)\r\n          }, 3000)\r\n        } else {\r\n        if (\r\n          !active &&\r\n          !productName &&\r\n          !description &&\r\n          !category &&\r\n          !considerations &&\r\n          // !fixedPublicPrice &&\r\n          !fromPublicPrice &&\r\n          !toPublicPrice &&\r\n          // !fixedPrixerPrice &&\r\n          !fromPrixerPrice &&\r\n          !toPrixerPrice &&\r\n          !images\r\n        ) {\r\n          setErrorMessage(\"Por favor completa todos los campos requeridos.\");\r\n          setSnackBarError(true);\r\n          e.preventDefault();\r\n        } else {\r\n          setLoading(true);\r\n          setButtonState(true);\r\n          const formData = new FormData();\r\n          const data = {\r\n            publicPrice: {\r\n              from: fromPublicPrice,\r\n              to: toPublicPrice,\r\n            },\r\n            prixerPrice: {\r\n              from: fromPrixerPrice,\r\n              to: toPrixerPrice,\r\n            },\r\n            specialVars: [\r\n              {\r\n                'name': '',\r\n                'isSpecialVarVisible': ''\r\n              }\r\n            ]\r\n        }\r\n        formData.append('active', active)\r\n        formData.append('name', productName)\r\n        formData.append('description', description)\r\n        formData.append('category', category)\r\n        formData.append('considerations', considerations)\r\n        formData.append('publicPriceFrom', data.publicPrice.from)\r\n        formData.append('publicPriceTo', data.publicPrice.to)\r\n        formData.append('prixerPriceFrom', data.prixerPrice.from)\r\n        formData.append('prixerPriceTo', data.prixerPrice.to)\r\n        formData.append('hasSpecialVar', hasSpecialVar)\r\n        formData.append('video', videoUrl)\r\n        images.images.map(file => formData.append('productImages', file))\r\n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/product/create\";\r\n        const response = await axios.post(base_url, formData);\r\n        if(response.data.success === false){\r\n          setLoading(false);\r\n          setButtonState(false);\r\n          setErrorMessage(response.data.message);\r\n          setSnackBarError(true);\r\n        } else {\r\n          setErrorMessage('Registro de producto exitoso.');\r\n          setSnackBarError(true);\r\n          setActive('');\r\n          setProductName('');\r\n          setDescription('');\r\n          setCategory('');\r\n          setConsiderations('');\r\n        //   setFixedPublicPrice('');\r\n          setFromPublicPrice('');\r\n          setToPublicPrice('');\r\n        //   setFixedPrixerPrice('');\r\n          setFromPrixerPrice('');\r\n          setToPrixerPrice('');\r\n          history.push('/admin/product/read');\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n  console.log(images.images)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        <Backdrop className={classes.backdrop} open={loading}>\r\n          <CircularProgress />\r\n        </Backdrop>\r\n      }\r\n      <Title>Productos</Title>\r\n      <form\r\n        className={classes.form}\r\n        encType=\"multipart/form-data\"\r\n        noValidate\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Grid container spacing={2}>\r\n          <Grid container spacing={2}>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              sm={12}\r\n              md={4}\r\n              lg={4}\r\n              xl={4}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <FormControl variant=\"outlined\">\r\n                <Button variant=\"contained\" component=\"label\">\r\n                  Upload File\r\n                  <input\r\n                    name=\"productImages\"\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    hidden\r\n                    onChange={(a) => {\r\n                      a.preventDefault();\r\n                      loadImage(a);\r\n                    }}\r\n                  />\r\n                </Button>\r\n                - O -\r\n                <Button variant=\"contained\" componenet=\"label\" onClick={handleClickOpen}>\r\n                 Upload video\r\n                </Button>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              sm={12}\r\n              md={8}\r\n              lg={8}\r\n              xl={8}\r\n              style={{ display: \"flex\" }}\r\n            >\r\n              {imageLoader.loader &&\r\n                imageLoader.loader.map((img, key_id) => {\r\n                  return (\r\n                    <div\r\n                      style={{\r\n                        width: \"25%\",\r\n                        // maxHeight: \"200px\",\r\n                        marginRight: \"4px\",\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          // marginBottom: \"-32px\",\r\n                          textAlign: \"right\",\r\n                        }}\r\n                      >\r\n                        <IconButton\r\n                          variant=\"text\"\r\n                          className={classes.buttonImgLoader}\r\n                          style={{ color: \"#d33f49\" }}\r\n                          component=\"label\"\r\n                        >\r\n                          <input\r\n                            name=\"productImages\"\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            hidden\r\n                            onChange={(a) => {\r\n                              const i = imageLoader.loader.indexOf(img);\r\n                              replaceImage(a, i);\r\n                            }}\r\n                          />\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          variant=\"text\"\r\n                          className={classes.buttonImgLoader}\r\n                          style={{ color: \"#d33f49\" }}\r\n                          onClick={(d) => {\r\n                            imageLoader.loader.splice(key_id, 1);\r\n                            images.images.splice(key_id, 1);\r\n                            setLoadImage({\r\n                              loader: imageLoader.loader,\r\n                              filename: \"Subir Imagenes\",\r\n                            });\r\n                            newImages({ images: images.images });\r\n                          }}\r\n                        >\r\n                          <HighlightOffOutlinedIcon />\r\n                        </IconButton>\r\n                      </div>\r\n\r\n                      <img\r\n                        style={{\r\n                          width: \"100%\",\r\n                          // height: \"200px\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        src={img}\r\n                        alt=\"+\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n            </Grid>\r\n            <Grid container xs={isDesktop ? 6 : 12}>\r\n              <Grid item xs={6}>\r\n                <Checkbox\r\n                  checked={active}\r\n                  color=\"primary\"\r\n                  inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                  onChange={() => {\r\n                    active ? setActive(false) : setActive(true);\r\n                  }}\r\n                />{\" \"}\r\n                Habilitado / Visible\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Checkbox\r\n                  checked={hasSpecialVar}\r\n                  color=\"primary\"\r\n                  inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                  onChange={() => {\r\n                    hasSpecialVar\r\n                      ? setHasSpecialVar(false)\r\n                      : setHasSpecialVar(true);\r\n                  }}\r\n                />{\" \"}\r\n                ¿Tiene variables especiales?\r\n              </Grid>\r\n            </Grid>\r\n            {hasSpecialVar && (\r\n              <Grid container xs={12} spacing={2}>\r\n                <Grid container style={{ marginTop: 20 }}>\r\n                  <h3>Variables especiales</h3>\r\n                </Grid>\r\n                <>\r\n                  {specialVars &&\r\n                    specialVars.map((specialVar, i) => (\r\n                      <Grid\r\n                        container\r\n                        spacing={2}\r\n                        xs={12}\r\n                        style={{ marginBottom: 10 }}\r\n                      >\r\n                        <Grid item xs={12} md={5}>\r\n                          <FormControl\r\n                            className={clsx(classes.margin, classes.textField)}\r\n                            variant=\"outlined\"\r\n                            xs={12}\r\n                            fullWidth={true}\r\n                          >\r\n                            <TextField\r\n                              variant=\"outlined\"\r\n                              required\r\n                              fullWidth\r\n                              id={specialVar}\r\n                              label=\"Nombre\"\r\n                              name=\"specialVar\"\r\n                              autoComplete=\"specialVar\"\r\n                              value={specialVar.name}\r\n                              onChange={(e) => {\r\n                                setSpecialVars(\r\n                                  specialVar\r\n                                    .slice(0, i)\r\n                                    .concat({\r\n                                      name: e.target.value,\r\n                                      isSpecialVarVisible:\r\n                                        specialVars.isSpecialVarVisible,\r\n                                    })\r\n                                    .concat(specialVars.slice(i + 1))\r\n                                );\r\n                              }}\r\n                            />\r\n                          </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={5}>\r\n                          <FormControl\r\n                            className={clsx(classes.margin, classes.textField)}\r\n                            variant=\"outlined\"\r\n                            xs={12}\r\n                            fullWidth={true}\r\n                          >\r\n                            <Checkbox\r\n                              variant=\"outlined\"\r\n                              required\r\n                              fullWidth\r\n                              id=\"isSpecialVarVisible\"\r\n                              label=\"Visible\"\r\n                              name=\"isSpecialVarVisible\"\r\n                              autoComplete=\"isSpecialVarVisible\"\r\n                              value={specialVar.isSpecialVarVisible}\r\n                              onChange={(e) => {\r\n                                setSpecialVars(\r\n                                  specialVars\r\n                                    .slice(0, i)\r\n                                    .concat({\r\n                                      name: specialVars.name,\r\n                                      isSpecialVarVisible: e.target.value,\r\n                                    })\r\n                                    .concat(specialVars.slice(i + 1))\r\n                                );\r\n                              }}\r\n                            />\r\n                          </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              setSpecialVars(\r\n                                specialVars\r\n                                  .slice(0, i)\r\n                                  .concat(specialVars.slice(i + 1))\r\n                              );\r\n                            }}\r\n                            disabled={buttonState}\r\n                            style={{ marginTop: 20 }}\r\n                          >\r\n                            -\r\n                          </Button>\r\n                        </Grid>\r\n                      </Grid>\r\n                    ))}\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    onClick={() => {\r\n                      setSpecialVars(\r\n                        specialVars.concat({\r\n                          name: \"\",\r\n                          isSpecialVarVisible: \"\",\r\n                        })\r\n                      );\r\n                    }}\r\n                    disabled={buttonState}\r\n                    style={{ marginTop: 20 }}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                </>\r\n              </Grid>\r\n            )}\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  display=\"inline\"\r\n                  id=\"productName\"\r\n                  label=\"Nombre\"\r\n                  name=\"productName\"\r\n                  autoComplete=\"productName\"\r\n                  value={productName}\r\n                  onChange={(e) => {\r\n                    setProductName(e.target.value);\r\n                  }}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                xs={12}\r\n                fullWidth={true}\r\n              >\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  display=\"inline\"\r\n                  fullWidth\r\n                  id=\"category\"\r\n                  label=\"Categoría\"\r\n                  name=\"category\"\r\n                  autoComplete=\"category\"\r\n                  value={category}\r\n                  onChange={(e) => {\r\n                    setCategory(e.target.value);\r\n                  }}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                xs={12}\r\n                fullWidth={true}\r\n              >\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  multiline\r\n                  fullWidth\r\n                  rows={2}\r\n                  id=\"description\"\r\n                  label=\"Descripción\"\r\n                  name=\"description\"\r\n                  autoComplete=\"description\"\r\n                  value={description}\r\n                  onChange={(e) => {\r\n                    setDescription(e.target.value);\r\n                  }}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                xs={12}\r\n                fullWidth={true}\r\n              >\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  multiline\r\n                  rows={2}\r\n                  id=\"considerations\"\r\n                  label=\"Consideraciones\"\r\n                  name=\"considerations\"\r\n                  autoComplete=\"considerations\"\r\n                  value={considerations}\r\n                  onChange={(e) => {\r\n                    setConsiderations(e.target.value);\r\n                  }}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ marginTop: 20 }}>\r\n            <Title>PVP</Title>\r\n          </Grid>\r\n          <Grid container spacing={2}>\r\n            {/* <Grid item xs={4} md={4}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fixedPublicPrice\"\r\n                        label=\"Fijo\"\r\n                        name=\"fixedPublicPrice\"\r\n                        autoComplete=\"fixedPublicPrice\"\r\n                        value={fixedPublicPrice}\r\n                        onChange={(e) => {setFixedPublicPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid> */}\r\n            <Grid item xs={4} md={5}>\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                xs={12}\r\n                fullWidth={true}\r\n              >\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"fromPublicPrice\"\r\n                  label=\"Desde\"\r\n                  name=\"fromPublicPrice\"\r\n                  autoComplete=\"fromPublicPrice\"\r\n                  value={fromPublicPrice}\r\n                  onChange={(e) => {\r\n                    setFromPublicPrice(e.target.value);\r\n                  }}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={4} md={5}>\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                xs={12}\r\n                fullWidth={true}\r\n              >\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"toPublicPrice\"\r\n                  label=\"Hasta\"\r\n                  name=\"toPublicPrice\"\r\n                  autoComplete=\"toPublicPrice\"\r\n                  value={toPublicPrice}\r\n                  onChange={(e) => {\r\n                    setToPublicPrice(e.target.value);\r\n                  }}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ marginTop: 20 }}>\r\n            <Title>PVM</Title>\r\n          </Grid>\r\n          <Grid container spacing={2}>\r\n            {/* <Grid item xs={4} md={4}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fixedPrixerPrice\"\r\n                        label=\"Fijo\"\r\n                        name=\"fixedPrixerPrice\"\r\n                        autoComplete=\"fixedPrixerPrice\"\r\n                        value={fixedPrixerPrice}\r\n                        onChange={(e) => {setFixedPrixerPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid> */}\r\n                <Grid item xs={4} md={5}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fromPrixerPrice\"\r\n                        label=\"Desde\"\r\n                        name=\"fromPrixerPrice\"\r\n                        autoComplete=\"fromPrixerPrice\"\r\n                        value={fromPrixerPrice}\r\n                        onChange={(e) => {setFromPrixerPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={4} md={5}>\r\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"toPrixerPrice\"\r\n                        label=\"Hasta\"\r\n                        name=\"toPrixerPrice\"\r\n                        autoComplete=\"toPrixerPrice\"\r\n                        value={toPrixerPrice}\r\n                        onChange={(e) => {setToPrixerPrice(e.target.value);}}\r\n                    />\r\n                    </FormControl>\r\n                </Grid>\r\n                </Grid>\r\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={buttonState} style={{ marginTop: 20}}>\r\n                Crear\r\n              </Button>\r\n        </Grid>\r\n        </form>\r\n      <Dialog open={open} onClose={handleClose}>\r\n      <DialogTitle>Youtube Url</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          Copia y pega la url que quieres mostrar en el carrusel de imagenes\r\n        </DialogContentText>\r\n        <div id='ll'>\r\n        </div>\r\n        <TextField\r\n        onChange={(a)=>{\r\n          const div = document.getElementById('ll');\r\n          modifyString(a, a.target.value)\r\n          div.innerHTML = videoPreview;\r\n        }}\r\n        value={videoUrl}\r\n          autoFocus\r\n          label=\"Url\"\r\n          type=\"text\"\r\n          fullWidth\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Aceptar\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n        <Snackbar\r\n          open={snackBarError}\r\n          autoHideDuration={1000}\r\n          message={errorMessage}\r\n          className={classes.snackbar}\r\n        />\r\n        <Snackbar\r\n          open={loadOpen}\r\n          autoHideDuration={1000}\r\n          message={'No puedes colocar mas de 4 fotos'}\r\n          className={classes.snackbar}\r\n        />\r\n        <Snackbar\r\n          open={loaDOpen}\r\n          autoHideDuration={1000}\r\n          message={'No puedes enviar mas de 4 fotos'}\r\n          className={classes.snackbar}\r\n        />\r\n        <Snackbar\r\n          open={mustImage}\r\n          autoHideDuration={1000}\r\n          message={'No puedes crear un producto sin foto. Agrega 1 o mas'}\r\n          className={classes.snackbar}\r\n        />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\disableProduct.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\updateProduct.jsx",["485","486","487","488","489","490","491","492","493","494","495"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\disableAdmin.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\updateAdmin.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\createAdmin.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\orders.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\chart.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminCrud\\readAdmins.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\dashboard\\deposits.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\adminMain\\products\\variants.jsx",[],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\variants\\readVariants.jsx",["496","497","498","499","500","501","502","503","504","505","506","507","508"],"C:\\Users\\Usuario\\documents\\prixelart-frontend\\src\\admin\\productCrud\\variants\\createVariant.jsx",["509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552"],"import React from 'react';\r\nimport {useState} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Title from '../../adminMain/Title';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport clsx from 'clsx';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { nanoid } from 'nanoid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default function CreateVariant(props) {\r\n    const classes = useStyles();\r\n    const [ active, setActive ] = useState(props.variant && props.variant.active || false);\r\n    const [ attributes, setAttributes ] = useState(props.variant && props.variant.attributes || [{ name:'', value:''}]);\r\n    const [ buttonAttState, setButtonAttState] = useState();\r\n    const [ variantName, setVariantName ] = useState(props.variant && props.variant.name || '');\r\n    const [ description, setDescription ] = useState(props.variant && props.variant.description || '');\r\n    const [ category, setCategory ] = useState(props.variant && props.variant.category || '');\r\n    const [ considerations, setConsiderations ] = useState(props.variant && props.variant.considerations || '');\r\n    const [publicPriceEq, setPublicPriceEq] = useState(props.variant && props.variant.publicPrice.equation || '');\r\n    const [fromPublicPrice, setFromPublicPrice] = useState(props.variant && props.variant.publicPrice.from || '');\r\n    const [ toPublicPrice, setToPublicPrice ] = useState(props.variant && props.variant.publicPrice.to || '');\r\n    const [ prixerPriceEq, setPrixerPriceEq ] = useState(props.variant && props.variant.prixerPrice.equation || '');\r\n    const [ fromPrixerPrice, setFromPrixerPrice ] = useState(props.variant && props.variant.prixerPrice.from || '');\r\n    const [ toPrixerPrice, setToPrixerPrice ] = useState(props.variant && props.variant.prixerPrice.to || '');\r\n    const [loading, setLoading] = useState(false);\r\n    const [buttonState, setButtonState] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const [ thumbUrl, setThumbUrl ] = useState(props.variant && props.variant.thumbUrl || '');\r\n\r\n    //Error states.\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    const [snackBarError, setSnackBarError] = useState(false);\r\n    const [passwordError, setPasswordError] = useState();\r\n    const [emailError, setEmailError] = useState();\r\n\r\n    const insertVariants = (productData, variants)=> {\r\n        let updatedVariants = productData;\r\n        updatedVariants.variants = productData.variants.filter((v)=>{ if(v._id != props.variant._id) return v});\r\n        variants._id = props.variant._id\r\n        updatedVariants.variants.unshift(variants);\r\n\r\n        return updatedVariants;\r\n    }\r\n\r\n\r\n    const handleSubmit = async (e)=> {\r\n      e.preventDefault();\r\n      if(!active && \r\n        !variantName && \r\n        !description && \r\n        !category && \r\n        !considerations && \r\n        !publicPriceEq &&\r\n        !fromPublicPrice &&\r\n        !toPublicPrice && \r\n        !prixerPriceEq &&\r\n        !fromPrixerPrice &&\r\n        !toPrixerPrice &&\r\n        !thumbUrl){\r\n        setErrorMessage('Por favor completa todos los campos requeridos.');\r\n        setSnackBarError(true);\r\n        e.preventDefault();\r\n      } else {\r\n        setLoading(true);\r\n        setButtonState(true);\r\n\r\n        const productData = props.product;\r\n\r\n        const variants = {\r\n            '_id': props.variant && props.variant._id || nanoid(),\r\n            'thumbUrl': thumbUrl,\r\n            'active' : active,\r\n            'name' : variantName,\r\n            'description' : description,\r\n            'category' : category,\r\n            'considerations' : considerations,\r\n            publicPrice: {\r\n                'from': fromPublicPrice,\r\n                'to': toPublicPrice,\r\n                'equation': publicPriceEq\r\n            },\r\n            prixerPrice: {\r\n                'from': fromPrixerPrice,\r\n                'to': toPrixerPrice,\r\n                'equation': prixerPriceEq\r\n            }\r\n        }\r\n\r\n        variants.attributes ?\r\n            variants.attributes.push(...attributes)\r\n        : variants.attributes = attributes;\r\n        let updatedWithVariants = {};\r\n        \r\n        if(props.variant) {\r\n            updatedWithVariants = insertVariants(productData, variants);\r\n        } else {\r\n            productData.variants.unshift(variants);\r\n            updatedWithVariants = productData;\r\n        }\r\n        \r\n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/product/update\";\r\n        const response = await axios.post(base_url,updatedWithVariants)\r\n\r\n        if(response.data.success === false){\r\n          setLoading(false);\r\n          setButtonState(false);\r\n          setErrorMessage(response.data.message);\r\n          setSnackBarError(true);\r\n          props.setVariant('');\r\n        } else {\r\n          setErrorMessage('Actualización de producto exitoso.');\r\n          setSnackBarError(true);\r\n          setActive('');\r\n          setThumbUrl('');\r\n          setVariantName('');\r\n          setDescription('');\r\n          setCategory('');\r\n          setConsiderations('');\r\n          setPublicPriceEq('');\r\n          setFromPublicPrice('');\r\n          setToPublicPrice('');\r\n          setPrixerPriceEq('');\r\n          setFromPrixerPrice('');\r\n          setToPrixerPrice('');\r\n          props.setVariant('');\r\n          setLoading(false);\r\n          history.push({pathname:\"/admin/product/read\"});\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    {\r\n    <Backdrop className={classes.backdrop} open={loading}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n    }\r\n      <Title>Variantes</Title>\r\n        <form noValidate onSubmit={handleSubmit}>\r\n            <Grid container spacing={2}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            display=\"inline\"\r\n                            id=\"thumbUrl\"\r\n                            label=\"ThumbUrl\"\r\n                            name=\"thumbUrl\"\r\n                            product         value={thumbUrl}\r\n                            onChange={(e) => {setThumbUrl(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                        <Checkbox\r\n                            checked={active}\r\n                            color=\"primary\" \r\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            onChange={()=>{active?setActive(false):setActive(true)}}\r\n                        /> Habilitado / Visible\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            display=\"inline\"\r\n                            id=\"variantName\"\r\n                            label=\"Nombre\"\r\n                            name=\"variantName\"\r\n                            autoComplete=\"variantName\"\r\n                            value={variantName}\r\n                            onChange={(e) => {setVariantName(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            multiline\r\n                            fullWidth\r\n                            rows={2}\r\n                            id=\"description\"\r\n                            label=\"Descripción\"\r\n                            name=\"description\"\r\n                            autoComplete=\"description\"\r\n                            value={description}\r\n                            onChange={(e) => {setDescription(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            multiline\r\n                            rows={2}\r\n                            id=\"considerations\"\r\n                            label=\"Consideraciones\"\r\n                            name=\"considerations\"\r\n                            autoComplete=\"considerations\"\r\n                            value={considerations}\r\n                            onChange={(e) => {setConsiderations(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container style={{marginTop: 20}}>\r\n                    <h3>Precios Público</h3>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} md={12}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"publicPriceEquation\"\r\n                            label=\"Ecuación\"\r\n                            name=\"publicPriceEquation\"\r\n                            autoComplete=\"publicPriceEquation\"\r\n                            value={publicPriceEq}\r\n                            onChange={(e) => {setPublicPriceEq(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid container xs={12} md={12} spacing={2} style={{margin:0}}>\r\n                        <Grid item xs={6} md={6}>\r\n                            <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"fromPublicPrice\"\r\n                                label=\"Desde\"\r\n                                name=\"fromPublicPrice\"\r\n                                autoComplete=\"fromPublicPrice\"\r\n                                value={fromPublicPrice}\r\n                                onChange={(e) => {setFromPublicPrice(e.target.value);}}\r\n                            />\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={6}>\r\n                            <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"toPublicPrice\"\r\n                                label=\"Hasta\"\r\n                                name=\"toPublicPrice\"\r\n                                autoComplete=\"toPublicPrice\"\r\n                                value={toPublicPrice}\r\n                                onChange={(e) => {setToPublicPrice(e.target.value);}}\r\n                            />\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container style={{marginTop: 20}}>\r\n                    <h3>Precios Prixers</h3>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={4} md={4}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"prixerPriceEq\"\r\n                            label=\"Ecuación\"\r\n                            name=\"prixerPriceEq\"\r\n                            autoComplete=\"prixerPriceEq\"\r\n                            value={prixerPriceEq}\r\n                            onChange={(e) => {setPrixerPriceEq(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={4} md={5}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"fromPrixerPrice\"\r\n                            label=\"Desde\"\r\n                            name=\"fromPrixerPrice\"\r\n                            autoComplete=\"fromPrixerPrice\"\r\n                            value={fromPrixerPrice}\r\n                            onChange={(e) => {setFromPrixerPrice(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={4} md={5}>\r\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"toPrixerPrice\"\r\n                            label=\"Hasta\"\r\n                            name=\"toPrixerPrice\"\r\n                            autoComplete=\"toPrixerPrice\"\r\n                            value={toPrixerPrice}\r\n                            onChange={(e) => {setToPrixerPrice(e.target.value);}}\r\n                        />\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container xs={12} spacing={2}>\r\n                    <Grid container style={{marginTop: 20}}>\r\n                        <h3>Atributos</h3>\r\n                    </Grid>\r\n                        {   \r\n                        attributes &&\r\n                            attributes.map((att, i)=>(\r\n                            <Grid container spacing={2} xs={12} style={{marginBottom: 10}}>\r\n                                <Grid item xs={12} md={5}>\r\n                                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        fullWidth\r\n                                        id=\"attribute\"\r\n                                        label=\"Nombre\"\r\n                                        name=\"attribute\"\r\n                                        autoComplete=\"attribute\"\r\n                                        value={att.name}\r\n                                        onChange={(e) => {\r\n                                            setAttributes(attributes.slice(0,i).concat({'name': e.target.value, 'value': att.value}).concat(attributes.slice(i+1,)));\r\n                                        }}\r\n                                    />\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={5}>\r\n                                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        fullWidth\r\n                                        id=\"attributeValue\"\r\n                                        label=\"Valor\"\r\n                                        name=\"attributeValue\"\r\n                                        autoComplete=\"attributeValue\"\r\n                                        value={att.value}\r\n                                        onChange={(e) => {\r\n                                            setAttributes(attributes.slice(0,i).concat({'name': att.name, 'value': e.target.value}).concat(attributes.slice(i+1,)));\r\n                                        }}\r\n                                    />\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={2}>\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={()=>{ setAttributes(attributes.slice(0, i).concat(attributes.slice(i+1,)))}} disabled={buttonState} style={{ marginTop: 20}}>\r\n                                    -\r\n                                </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                            ))\r\n                        }\r\n                    <Grid item xs={12} align=\"center\">\r\n                    <Button variant=\"contained\" color=\"default\" onClick={()=>{setAttributes(attributes.concat({ name:'', value:'' }))}} disabled={buttonState} style={{ marginTop: 20}}>\r\n                        +\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={buttonState} style={{ marginTop: 20}}>\r\n                    {props.variant && \"Actualizar\" || \"Crear\"}\r\n                </Button>\r\n            </Grid>\r\n        </form>\r\n        <Snackbar\r\n          open={snackBarError}\r\n          autoHideDuration={1000}\r\n          message={errorMessage}\r\n          className={classes.snackbar}\r\n        />\r\n    </React.Fragment>\r\n  );\r\n}",{"ruleId":"553","replacedBy":"554"},{"ruleId":"555","replacedBy":"556"},{"ruleId":"557","severity":1,"message":"558","line":31,"column":10,"nodeType":"559","messageId":"560","endLine":31,"endColumn":26},{"ruleId":"557","severity":1,"message":"561","line":32,"column":8,"nodeType":"559","messageId":"560","endLine":32,"endColumn":16},{"ruleId":"557","severity":1,"message":"562","line":33,"column":8,"nodeType":"559","messageId":"560","endLine":33,"endColumn":13},{"ruleId":"557","severity":1,"message":"563","line":96,"column":10,"nodeType":"559","messageId":"560","endLine":96,"endColumn":21},{"ruleId":"557","severity":1,"message":"564","line":100,"column":17,"nodeType":"559","messageId":"560","endLine":100,"endColumn":25},{"ruleId":"557","severity":1,"message":"565","line":102,"column":9,"nodeType":"559","messageId":"560","endLine":102,"endColumn":18},{"ruleId":"557","severity":1,"message":"566","line":104,"column":9,"nodeType":"559","messageId":"560","endLine":104,"endColumn":23},{"ruleId":"557","severity":1,"message":"567","line":113,"column":9,"nodeType":"559","messageId":"560","endLine":113,"endColumn":13},{"ruleId":"568","severity":1,"message":"569","line":179,"column":3,"nodeType":"559","endLine":179,"endColumn":12,"suggestions":"570"},{"ruleId":"557","severity":1,"message":"571","line":2,"column":8,"nodeType":"559","messageId":"560","endLine":2,"endColumn":14},{"ruleId":"557","severity":1,"message":"572","line":13,"column":8,"nodeType":"559","messageId":"560","endLine":13,"endColumn":15},{"ruleId":"557","severity":1,"message":"573","line":146,"column":10,"nodeType":"559","messageId":"560","endLine":146,"endColumn":16},{"ruleId":"557","severity":1,"message":"574","line":146,"column":18,"nodeType":"559","messageId":"560","endLine":146,"endColumn":27},{"ruleId":"557","severity":1,"message":"575","line":147,"column":10,"nodeType":"559","messageId":"560","endLine":147,"endColumn":19},{"ruleId":"557","severity":1,"message":"576","line":147,"column":21,"nodeType":"559","messageId":"560","endLine":147,"endColumn":33},{"ruleId":"557","severity":1,"message":"563","line":148,"column":10,"nodeType":"559","messageId":"560","endLine":148,"endColumn":21},{"ruleId":"557","severity":1,"message":"577","line":154,"column":10,"nodeType":"559","messageId":"560","endLine":154,"endColumn":16},{"ruleId":"557","severity":1,"message":"578","line":154,"column":18,"nodeType":"559","messageId":"560","endLine":154,"endColumn":27},{"ruleId":"557","severity":1,"message":"565","line":155,"column":9,"nodeType":"559","messageId":"560","endLine":155,"endColumn":18},{"ruleId":"579","severity":1,"message":"580","line":470,"column":13,"nodeType":"581","endLine":478,"endColumn":14},{"ruleId":"557","severity":1,"message":"582","line":8,"column":8,"nodeType":"559","messageId":"560","endLine":8,"endColumn":17},{"ruleId":"557","severity":1,"message":"583","line":17,"column":8,"nodeType":"559","messageId":"560","endLine":17,"endColumn":20},{"ruleId":"557","severity":1,"message":"584","line":64,"column":9,"nodeType":"559","messageId":"560","endLine":64,"endColumn":16},{"ruleId":"557","severity":1,"message":"585","line":68,"column":10,"nodeType":"559","messageId":"560","endLine":68,"endColumn":17},{"ruleId":"557","severity":1,"message":"586","line":75,"column":10,"nodeType":"559","messageId":"560","endLine":75,"endColumn":16},{"ruleId":"557","severity":1,"message":"587","line":75,"column":18,"nodeType":"559","messageId":"560","endLine":75,"endColumn":27},{"ruleId":"557","severity":1,"message":"588","line":132,"column":9,"nodeType":"559","messageId":"560","endLine":132,"endColumn":26},{"ruleId":"557","severity":1,"message":"589","line":252,"column":9,"nodeType":"559","messageId":"560","endLine":252,"endColumn":12},{"ruleId":"557","severity":1,"message":"589","line":267,"column":11,"nodeType":"559","messageId":"560","endLine":267,"endColumn":14},{"ruleId":"568","severity":1,"message":"590","line":289,"column":6,"nodeType":"591","endLine":289,"endColumn":8,"suggestions":"592"},{"ruleId":"593","severity":1,"message":"594","line":308,"column":42,"nodeType":"595","messageId":"596","endLine":308,"endColumn":44},{"ruleId":"568","severity":1,"message":"597","line":324,"column":6,"nodeType":"591","endLine":324,"endColumn":20,"suggestions":"598"},{"ruleId":"593","severity":1,"message":"594","line":482,"column":74,"nodeType":"595","messageId":"596","endLine":482,"endColumn":76},{"ruleId":"593","severity":1,"message":"594","line":496,"column":74,"nodeType":"595","messageId":"596","endLine":496,"endColumn":76},{"ruleId":"557","severity":1,"message":"599","line":1,"column":27,"nodeType":"559","messageId":"560","endLine":1,"endColumn":35},{"ruleId":"600","severity":1,"message":"601","line":250,"column":15,"nodeType":"602","messageId":"596","endLine":250,"endColumn":25},{"ruleId":"557","severity":1,"message":"603","line":22,"column":8,"nodeType":"559","messageId":"560","endLine":22,"endColumn":18},{"ruleId":"557","severity":1,"message":"604","line":23,"column":8,"nodeType":"559","messageId":"560","endLine":23,"endColumn":21},{"ruleId":"557","severity":1,"message":"605","line":24,"column":8,"nodeType":"559","messageId":"560","endLine":24,"endColumn":18},{"ruleId":"557","severity":1,"message":"606","line":25,"column":8,"nodeType":"559","messageId":"560","endLine":25,"endColumn":22},{"ruleId":"557","severity":1,"message":"607","line":26,"column":8,"nodeType":"559","messageId":"560","endLine":26,"endColumn":19},{"ruleId":"557","severity":1,"message":"608","line":27,"column":8,"nodeType":"559","messageId":"560","endLine":27,"endColumn":18},{"ruleId":"557","severity":1,"message":"609","line":28,"column":8,"nodeType":"559","messageId":"560","endLine":28,"endColumn":21},{"ruleId":"557","severity":1,"message":"610","line":29,"column":8,"nodeType":"559","messageId":"560","endLine":29,"endColumn":12},{"ruleId":"568","severity":1,"message":"611","line":85,"column":3,"nodeType":"559","endLine":85,"endColumn":12,"suggestions":"612"},{"ruleId":"557","severity":1,"message":"613","line":70,"column":9,"nodeType":"559","messageId":"560","endLine":70,"endColumn":17},{"ruleId":"568","severity":1,"message":"614","line":113,"column":6,"nodeType":"591","endLine":113,"endColumn":19,"suggestions":"615"},{"ruleId":"557","severity":1,"message":"616","line":47,"column":7,"nodeType":"559","messageId":"560","endLine":47,"endColumn":16},{"ruleId":"557","severity":1,"message":"589","line":64,"column":11,"nodeType":"559","messageId":"560","endLine":64,"endColumn":14},{"ruleId":"557","severity":1,"message":"574","line":97,"column":18,"nodeType":"559","messageId":"560","endLine":97,"endColumn":27},{"ruleId":"557","severity":1,"message":"617","line":103,"column":10,"nodeType":"559","messageId":"560","endLine":103,"endColumn":18},{"ruleId":"557","severity":1,"message":"618","line":107,"column":10,"nodeType":"559","messageId":"560","endLine":107,"endColumn":21},{"ruleId":"557","severity":1,"message":"589","line":123,"column":11,"nodeType":"559","messageId":"560","endLine":123,"endColumn":14},{"ruleId":"557","severity":1,"message":"619","line":154,"column":13,"nodeType":"559","messageId":"560","endLine":154,"endColumn":21},{"ruleId":"557","severity":1,"message":"589","line":193,"column":9,"nodeType":"559","messageId":"560","endLine":193,"endColumn":12},{"ruleId":"557","severity":1,"message":"619","line":206,"column":11,"nodeType":"559","messageId":"560","endLine":206,"endColumn":19},{"ruleId":"557","severity":1,"message":"619","line":243,"column":11,"nodeType":"559","messageId":"560","endLine":243,"endColumn":19},{"ruleId":"557","severity":1,"message":"620","line":1,"column":28,"nodeType":"559","messageId":"560","endLine":1,"endColumn":39},{"ruleId":"557","severity":1,"message":"621","line":19,"column":8,"nodeType":"559","messageId":"560","endLine":19,"endColumn":15},{"ruleId":"557","severity":1,"message":"622","line":187,"column":10,"nodeType":"559","messageId":"560","endLine":187,"endColumn":22},{"ruleId":"557","severity":1,"message":"623","line":187,"column":24,"nodeType":"559","messageId":"560","endLine":187,"endColumn":39},{"ruleId":"557","severity":1,"message":"624","line":192,"column":20,"nodeType":"559","messageId":"560","endLine":192,"endColumn":31},{"ruleId":"568","severity":1,"message":"625","line":220,"column":6,"nodeType":"591","endLine":225,"endColumn":4,"suggestions":"626"},{"ruleId":"593","severity":1,"message":"594","line":336,"column":13,"nodeType":"595","messageId":"596","endLine":336,"endColumn":15},{"ruleId":"593","severity":1,"message":"594","line":352,"column":26,"nodeType":"595","messageId":"596","endLine":352,"endColumn":28},{"ruleId":"557","severity":1,"message":"627","line":423,"column":12,"nodeType":"559","messageId":"560","endLine":423,"endColumn":22},{"ruleId":"557","severity":1,"message":"628","line":479,"column":9,"nodeType":"559","messageId":"560","endLine":479,"endColumn":20},{"ruleId":"629","severity":1,"message":"630","line":480,"column":24,"nodeType":"631","messageId":"632","endLine":480,"endColumn":26},{"ruleId":"557","severity":1,"message":"633","line":4,"column":8,"nodeType":"559","messageId":"560","endLine":4,"endColumn":13},{"ruleId":"557","severity":1,"message":"565","line":64,"column":9,"nodeType":"559","messageId":"560","endLine":64,"endColumn":18},{"ruleId":"557","severity":1,"message":"634","line":65,"column":9,"nodeType":"559","messageId":"560","endLine":65,"endColumn":18},{"ruleId":"557","severity":1,"message":"635","line":12,"column":8,"nodeType":"559","messageId":"560","endLine":12,"endColumn":16},{"ruleId":"557","severity":1,"message":"636","line":14,"column":8,"nodeType":"559","messageId":"560","endLine":14,"endColumn":18},{"ruleId":"557","severity":1,"message":"637","line":19,"column":8,"nodeType":"559","messageId":"560","endLine":19,"endColumn":12},{"ruleId":"557","severity":1,"message":"617","line":74,"column":10,"nodeType":"559","messageId":"560","endLine":74,"endColumn":18},{"ruleId":"568","severity":1,"message":"638","line":82,"column":13,"nodeType":"631","endLine":84,"endColumn":4},{"ruleId":"557","severity":1,"message":"619","line":114,"column":11,"nodeType":"559","messageId":"560","endLine":114,"endColumn":19},{"ruleId":"557","severity":1,"message":"639","line":1,"column":17,"nodeType":"559","messageId":"560","endLine":1,"endColumn":25},{"ruleId":"557","severity":1,"message":"640","line":1,"column":27,"nodeType":"559","messageId":"560","endLine":1,"endColumn":36},{"ruleId":"557","severity":1,"message":"640","line":1,"column":27,"nodeType":"559","messageId":"560","endLine":1,"endColumn":36},{"ruleId":"557","severity":1,"message":"619","line":39,"column":11,"nodeType":"559","messageId":"560","endLine":39,"endColumn":19},{"ruleId":"600","severity":1,"message":"641","line":103,"column":19,"nodeType":"602","messageId":"596","endLine":103,"endColumn":26},{"ruleId":"557","severity":1,"message":"605","line":5,"column":18,"nodeType":"559","messageId":"560","endLine":5,"endColumn":28},{"ruleId":"557","severity":1,"message":"642","line":10,"column":3,"nodeType":"559","messageId":"560","endLine":10,"endColumn":12},{"ruleId":"557","severity":1,"message":"643","line":11,"column":3,"nodeType":"559","messageId":"560","endLine":11,"endColumn":14},{"ruleId":"557","severity":1,"message":"644","line":12,"column":3,"nodeType":"559","messageId":"560","endLine":12,"endColumn":8},{"ruleId":"557","severity":1,"message":"645","line":13,"column":3,"nodeType":"559","messageId":"560","endLine":13,"endColumn":12},{"ruleId":"557","severity":1,"message":"634","line":88,"column":9,"nodeType":"559","messageId":"560","endLine":88,"endColumn":18},{"ruleId":"557","severity":1,"message":"646","line":97,"column":10,"nodeType":"559","messageId":"560","endLine":97,"endColumn":14},{"ruleId":"557","severity":1,"message":"647","line":121,"column":9,"nodeType":"559","messageId":"560","endLine":121,"endColumn":20},{"ruleId":"557","severity":1,"message":"589","line":164,"column":9,"nodeType":"559","messageId":"560","endLine":164,"endColumn":12},{"ruleId":"557","severity":1,"message":"589","line":199,"column":9,"nodeType":"559","messageId":"560","endLine":199,"endColumn":12},{"ruleId":"557","severity":1,"message":"589","line":218,"column":9,"nodeType":"559","messageId":"560","endLine":218,"endColumn":12},{"ruleId":"593","severity":1,"message":"648","line":317,"column":31,"nodeType":"595","messageId":"596","endLine":317,"endColumn":33},{"ruleId":"649","severity":1,"message":"650","line":500,"column":19,"nodeType":"581","endLine":500,"endColumn":67},{"ruleId":"651","severity":1,"message":"652","line":501,"column":21,"nodeType":"581","endLine":505,"endColumn":22},{"ruleId":"629","severity":1,"message":"630","line":19,"column":23,"nodeType":"631","messageId":"632","endLine":19,"endColumn":25},{"ruleId":"593","severity":1,"message":"594","line":21,"column":23,"nodeType":"595","messageId":"596","endLine":21,"endColumn":25},{"ruleId":"629","severity":1,"message":"653","line":33,"column":39,"nodeType":"631","messageId":"654","endLine":33,"endColumn":41},{"ruleId":"593","severity":1,"message":"594","line":34,"column":25,"nodeType":"595","messageId":"596","endLine":34,"endColumn":27},{"ruleId":"629","severity":1,"message":"630","line":53,"column":45,"nodeType":"631","messageId":"632","endLine":53,"endColumn":47},{"ruleId":"593","severity":1,"message":"594","line":54,"column":9,"nodeType":"595","messageId":"596","endLine":54,"endColumn":11},{"ruleId":"593","severity":1,"message":"594","line":56,"column":16,"nodeType":"595","messageId":"596","endLine":56,"endColumn":18},{"ruleId":"593","severity":1,"message":"648","line":70,"column":47,"nodeType":"595","messageId":"596","endLine":70,"endColumn":49},{"ruleId":"593","severity":1,"message":"594","line":70,"column":75,"nodeType":"595","messageId":"596","endLine":70,"endColumn":77},{"ruleId":"593","severity":1,"message":"648","line":76,"column":28,"nodeType":"595","messageId":"596","endLine":76,"endColumn":30},{"ruleId":"655","severity":1,"message":"656","line":79,"column":44,"nodeType":"657","messageId":"596","endLine":79,"endColumn":48},{"ruleId":"655","severity":1,"message":"656","line":80,"column":44,"nodeType":"657","messageId":"596","endLine":80,"endColumn":48},{"ruleId":"557","severity":1,"message":"658","line":1,"column":28,"nodeType":"559","messageId":"560","endLine":1,"endColumn":47},{"ruleId":"557","severity":1,"message":"659","line":70,"column":12,"nodeType":"559","messageId":"560","endLine":70,"endColumn":24},{"ruleId":"557","severity":1,"message":"660","line":70,"column":26,"nodeType":"559","messageId":"560","endLine":70,"endColumn":41},{"ruleId":"557","severity":1,"message":"661","line":71,"column":12,"nodeType":"559","messageId":"560","endLine":71,"endColumn":26},{"ruleId":"557","severity":1,"message":"662","line":71,"column":28,"nodeType":"559","messageId":"560","endLine":71,"endColumn":45},{"ruleId":"557","severity":1,"message":"663","line":72,"column":12,"nodeType":"559","messageId":"560","endLine":72,"endColumn":25},{"ruleId":"557","severity":1,"message":"664","line":72,"column":27,"nodeType":"559","messageId":"560","endLine":72,"endColumn":43},{"ruleId":"568","severity":1,"message":"665","line":100,"column":6,"nodeType":"591","endLine":100,"endColumn":25,"suggestions":"666"},{"ruleId":"593","severity":1,"message":"594","line":120,"column":41,"nodeType":"595","messageId":"596","endLine":120,"endColumn":43},{"ruleId":"667","severity":1,"message":"668","line":166,"column":21,"nodeType":"669","endLine":166,"endColumn":41},{"ruleId":"557","severity":1,"message":"634","line":113,"column":9,"nodeType":"559","messageId":"560","endLine":113,"endColumn":18},{"ruleId":"557","severity":1,"message":"670","line":13,"column":8,"nodeType":"559","messageId":"560","endLine":13,"endColumn":19},{"ruleId":"557","severity":1,"message":"671","line":18,"column":8,"nodeType":"559","messageId":"560","endLine":18,"endColumn":19},{"ruleId":"557","severity":1,"message":"672","line":19,"column":8,"nodeType":"559","messageId":"560","endLine":19,"endColumn":20},{"ruleId":"557","severity":1,"message":"673","line":10,"column":8,"nodeType":"559","messageId":"560","endLine":10,"endColumn":24},{"ruleId":"557","severity":1,"message":"674","line":93,"column":10,"nodeType":"559","messageId":"560","endLine":93,"endColumn":24},{"ruleId":"629","severity":1,"message":"630","line":103,"column":35,"nodeType":"631","messageId":"632","endLine":103,"endColumn":37},{"ruleId":"593","severity":1,"message":"648","line":212,"column":43,"nodeType":"595","messageId":"596","endLine":212,"endColumn":45},{"ruleId":"593","severity":1,"message":"648","line":227,"column":43,"nodeType":"595","messageId":"596","endLine":227,"endColumn":45},{"ruleId":"593","severity":1,"message":"648","line":271,"column":68,"nodeType":"595","messageId":"596","endLine":271,"endColumn":70},{"ruleId":"593","severity":1,"message":"648","line":332,"column":68,"nodeType":"595","messageId":"596","endLine":332,"endColumn":70},{"ruleId":"629","severity":1,"message":"630","line":430,"column":39,"nodeType":"631","messageId":"632","endLine":430,"endColumn":41},{"ruleId":"557","severity":1,"message":"675","line":432,"column":27,"nodeType":"559","messageId":"560","endLine":432,"endColumn":31},{"ruleId":"557","severity":1,"message":"676","line":118,"column":10,"nodeType":"559","messageId":"560","endLine":118,"endColumn":15},{"ruleId":"568","severity":1,"message":"677","line":172,"column":6,"nodeType":"591","endLine":172,"endColumn":28,"suggestions":"678"},{"ruleId":"649","severity":1,"message":"650","line":368,"column":21,"nodeType":"581","endLine":372,"endColumn":22},{"ruleId":"649","severity":1,"message":"650","line":387,"column":25,"nodeType":"581","endLine":391,"endColumn":26},{"ruleId":"649","severity":1,"message":"650","line":408,"column":25,"nodeType":"581","endLine":412,"endColumn":26},{"ruleId":"557","severity":1,"message":"640","line":1,"column":17,"nodeType":"559","messageId":"560","endLine":1,"endColumn":26},{"ruleId":"557","severity":1,"message":"679","line":10,"column":19,"nodeType":"559","messageId":"560","endLine":10,"endColumn":21},{"ruleId":"557","severity":1,"message":"680","line":11,"column":11,"nodeType":"559","messageId":"560","endLine":11,"endColumn":18},{"ruleId":"557","severity":1,"message":"681","line":12,"column":20,"nodeType":"559","messageId":"560","endLine":12,"endColumn":29},{"ruleId":"568","severity":1,"message":"682","line":17,"column":28,"nodeType":"559","endLine":17,"endColumn":39},{"ruleId":"557","severity":1,"message":"683","line":4,"column":10,"nodeType":"559","messageId":"560","endLine":4,"endColumn":20},{"ruleId":"557","severity":1,"message":"562","line":15,"column":8,"nodeType":"559","messageId":"560","endLine":15,"endColumn":13},{"ruleId":"593","severity":1,"message":"594","line":94,"column":49,"nodeType":"595","messageId":"596","endLine":94,"endColumn":51},{"ruleId":"557","severity":1,"message":"640","line":2,"column":20,"nodeType":"559","messageId":"560","endLine":2,"endColumn":29},{"ruleId":"557","severity":1,"message":"605","line":8,"column":8,"nodeType":"559","messageId":"560","endLine":8,"endColumn":18},{"ruleId":"557","severity":1,"message":"684","line":9,"column":8,"nodeType":"559","messageId":"560","endLine":9,"endColumn":14},{"ruleId":"557","severity":1,"message":"685","line":10,"column":8,"nodeType":"559","messageId":"560","endLine":10,"endColumn":16},{"ruleId":"557","severity":1,"message":"686","line":33,"column":8,"nodeType":"559","messageId":"560","endLine":33,"endColumn":11},{"ruleId":"557","severity":1,"message":"634","line":83,"column":11,"nodeType":"559","messageId":"560","endLine":83,"endColumn":20},{"ruleId":"557","severity":1,"message":"687","line":164,"column":13,"nodeType":"559","messageId":"560","endLine":164,"endColumn":16},{"ruleId":"593","severity":1,"message":"594","line":183,"column":50,"nodeType":"595","messageId":"596","endLine":183,"endColumn":52},{"ruleId":"557","severity":1,"message":"686","line":25,"column":8,"nodeType":"559","messageId":"560","endLine":25,"endColumn":11},{"ruleId":"557","severity":1,"message":"634","line":78,"column":9,"nodeType":"559","messageId":"560","endLine":78,"endColumn":18},{"ruleId":"557","severity":1,"message":"688","line":79,"column":21,"nodeType":"559","messageId":"560","endLine":79,"endColumn":33},{"ruleId":"557","severity":1,"message":"689","line":81,"column":22,"nodeType":"559","messageId":"560","endLine":81,"endColumn":35},{"ruleId":"557","severity":1,"message":"690","line":113,"column":10,"nodeType":"559","messageId":"560","endLine":113,"endColumn":18},{"ruleId":"557","severity":1,"message":"691","line":113,"column":20,"nodeType":"559","messageId":"560","endLine":113,"endColumn":31},{"ruleId":"629","severity":1,"message":"630","line":124,"column":27,"nodeType":"631","messageId":"632","endLine":124,"endColumn":29},{"ruleId":"568","severity":1,"message":"692","line":139,"column":6,"nodeType":"591","endLine":139,"endColumn":8,"suggestions":"693"},{"ruleId":"557","severity":1,"message":"687","line":186,"column":13,"nodeType":"559","messageId":"560","endLine":186,"endColumn":16},{"ruleId":"557","severity":1,"message":"694","line":188,"column":13,"nodeType":"559","messageId":"560","endLine":188,"endColumn":23},{"ruleId":"579","severity":1,"message":"580","line":334,"column":15,"nodeType":"581","endLine":334,"endColumn":48},{"ruleId":"557","severity":1,"message":"695","line":4,"column":8,"nodeType":"559","messageId":"560","endLine":4,"endColumn":12},{"ruleId":"557","severity":1,"message":"696","line":11,"column":8,"nodeType":"559","messageId":"560","endLine":11,"endColumn":13},{"ruleId":"557","severity":1,"message":"673","line":13,"column":8,"nodeType":"559","messageId":"560","endLine":13,"endColumn":24},{"ruleId":"557","severity":1,"message":"697","line":14,"column":8,"nodeType":"559","messageId":"560","endLine":14,"endColumn":16},{"ruleId":"557","severity":1,"message":"698","line":18,"column":8,"nodeType":"559","messageId":"560","endLine":18,"endColumn":14},{"ruleId":"557","severity":1,"message":"680","line":27,"column":9,"nodeType":"559","messageId":"560","endLine":27,"endColumn":16},{"ruleId":"568","severity":1,"message":"699","line":42,"column":6,"nodeType":"591","endLine":42,"endColumn":8,"suggestions":"700"},{"ruleId":"593","severity":1,"message":"594","line":46,"column":12,"nodeType":"595","messageId":"596","endLine":46,"endColumn":14},{"ruleId":"701","severity":1,"message":"702","line":48,"column":26,"nodeType":"595","messageId":"703","endLine":48,"endColumn":27},{"ruleId":"593","severity":1,"message":"594","line":50,"column":12,"nodeType":"595","messageId":"596","endLine":50,"endColumn":14},{"ruleId":"701","severity":1,"message":"702","line":52,"column":26,"nodeType":"595","messageId":"703","endLine":52,"endColumn":27},{"ruleId":"593","severity":1,"message":"594","line":54,"column":12,"nodeType":"595","messageId":"596","endLine":54,"endColumn":14},{"ruleId":"651","severity":1,"message":"652","line":99,"column":21,"nodeType":"581","endLine":102,"endColumn":23},{"ruleId":"557","severity":1,"message":"603","line":13,"column":8,"nodeType":"559","messageId":"560","endLine":13,"endColumn":18},{"ruleId":"557","severity":1,"message":"604","line":14,"column":8,"nodeType":"559","messageId":"560","endLine":14,"endColumn":21},{"ruleId":"557","severity":1,"message":"605","line":15,"column":8,"nodeType":"559","messageId":"560","endLine":15,"endColumn":18},{"ruleId":"557","severity":1,"message":"606","line":16,"column":8,"nodeType":"559","messageId":"560","endLine":16,"endColumn":22},{"ruleId":"557","severity":1,"message":"608","line":18,"column":8,"nodeType":"559","messageId":"560","endLine":18,"endColumn":18},{"ruleId":"557","severity":1,"message":"609","line":19,"column":8,"nodeType":"559","messageId":"560","endLine":19,"endColumn":21},{"ruleId":"704","severity":1,"message":"705","line":36,"column":58,"nodeType":"706","messageId":"707","endLine":36,"endColumn":60},{"ruleId":"704","severity":1,"message":"705","line":36,"column":82,"nodeType":"706","messageId":"707","endLine":36,"endColumn":84},{"ruleId":"704","severity":1,"message":"705","line":37,"column":66,"nodeType":"706","messageId":"707","endLine":37,"endColumn":68},{"ruleId":"704","severity":1,"message":"705","line":37,"column":94,"nodeType":"706","messageId":"707","endLine":37,"endColumn":96},{"ruleId":"557","severity":1,"message":"708","line":38,"column":13,"nodeType":"559","messageId":"560","endLine":38,"endColumn":27},{"ruleId":"557","severity":1,"message":"709","line":38,"column":29,"nodeType":"559","messageId":"560","endLine":38,"endColumn":46},{"ruleId":"704","severity":1,"message":"705","line":39,"column":68,"nodeType":"706","messageId":"707","endLine":39,"endColumn":70},{"ruleId":"704","severity":1,"message":"705","line":39,"column":90,"nodeType":"706","messageId":"707","endLine":39,"endColumn":92},{"ruleId":"704","severity":1,"message":"705","line":40,"column":68,"nodeType":"706","messageId":"707","endLine":40,"endColumn":70},{"ruleId":"704","severity":1,"message":"705","line":40,"column":97,"nodeType":"706","messageId":"707","endLine":40,"endColumn":99},{"ruleId":"704","severity":1,"message":"705","line":41,"column":62,"nodeType":"706","messageId":"707","endLine":41,"endColumn":64},{"ruleId":"704","severity":1,"message":"705","line":41,"column":88,"nodeType":"706","messageId":"707","endLine":41,"endColumn":90},{"ruleId":"704","severity":1,"message":"705","line":42,"column":74,"nodeType":"706","messageId":"707","endLine":42,"endColumn":76},{"ruleId":"704","severity":1,"message":"705","line":42,"column":106,"nodeType":"706","messageId":"707","endLine":42,"endColumn":108},{"ruleId":"704","severity":1,"message":"705","line":43,"column":70,"nodeType":"706","messageId":"707","endLine":43,"endColumn":72},{"ruleId":"704","severity":1,"message":"705","line":43,"column":108,"nodeType":"706","messageId":"707","endLine":43,"endColumn":110},{"ruleId":"704","severity":1,"message":"705","line":44,"column":74,"nodeType":"706","messageId":"707","endLine":44,"endColumn":76},{"ruleId":"704","severity":1,"message":"705","line":44,"column":108,"nodeType":"706","messageId":"707","endLine":44,"endColumn":110},{"ruleId":"704","severity":1,"message":"705","line":45,"column":72,"nodeType":"706","messageId":"707","endLine":45,"endColumn":74},{"ruleId":"704","severity":1,"message":"705","line":45,"column":104,"nodeType":"706","messageId":"707","endLine":45,"endColumn":106},{"ruleId":"704","severity":1,"message":"705","line":46,"column":72,"nodeType":"706","messageId":"707","endLine":46,"endColumn":74},{"ruleId":"704","severity":1,"message":"705","line":46,"column":110,"nodeType":"706","messageId":"707","endLine":46,"endColumn":112},{"ruleId":"704","severity":1,"message":"705","line":47,"column":76,"nodeType":"706","messageId":"707","endLine":47,"endColumn":78},{"ruleId":"704","severity":1,"message":"705","line":47,"column":110,"nodeType":"706","messageId":"707","endLine":47,"endColumn":112},{"ruleId":"704","severity":1,"message":"705","line":48,"column":72,"nodeType":"706","messageId":"707","endLine":48,"endColumn":74},{"ruleId":"704","severity":1,"message":"705","line":48,"column":104,"nodeType":"706","messageId":"707","endLine":48,"endColumn":106},{"ruleId":"704","severity":1,"message":"705","line":53,"column":62,"nodeType":"706","messageId":"707","endLine":53,"endColumn":64},{"ruleId":"704","severity":1,"message":"705","line":53,"column":88,"nodeType":"706","messageId":"707","endLine":53,"endColumn":90},{"ruleId":"557","severity":1,"message":"710","line":58,"column":12,"nodeType":"559","messageId":"560","endLine":58,"endColumn":25},{"ruleId":"557","severity":1,"message":"711","line":58,"column":27,"nodeType":"559","messageId":"560","endLine":58,"endColumn":43},{"ruleId":"557","severity":1,"message":"712","line":59,"column":12,"nodeType":"559","messageId":"560","endLine":59,"endColumn":22},{"ruleId":"557","severity":1,"message":"713","line":59,"column":24,"nodeType":"559","messageId":"560","endLine":59,"endColumn":37},{"ruleId":"629","severity":1,"message":"714","line":63,"column":67,"nodeType":"631","messageId":"654","endLine":63,"endColumn":69},{"ruleId":"593","severity":1,"message":"648","line":63,"column":80,"nodeType":"595","messageId":"596","endLine":63,"endColumn":82},{"ruleId":"704","severity":1,"message":"705","line":95,"column":34,"nodeType":"706","messageId":"707","endLine":95,"endColumn":36},{"ruleId":"704","severity":1,"message":"705","line":95,"column":55,"nodeType":"706","messageId":"707","endLine":95,"endColumn":57},{"ruleId":"704","severity":1,"message":"705","line":401,"column":36,"nodeType":"706","messageId":"707","endLine":401,"endColumn":38},{"ruleId":"704","severity":1,"message":"705","line":401,"column":52,"nodeType":"706","messageId":"707","endLine":401,"endColumn":54},"no-native-reassign",["715"],"no-negated-in-lhs",["716"],"no-unused-vars","'FormControlLabel' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","'Modal' is defined but never used.","'buttonState' is assigned a value but never used.","'setValue' is assigned a value but never used.","'isDesktop' is assigned a value but never used.","'handleOnChange' is assigned a value but never used.","'body' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setButtonState'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [email, username, password] as a second argument to the useEffect Hook.",["717"],"'Avatar' is defined but never used.","'AddIcon' is defined but never used.","'avatar' is assigned a value but never used.","'setAvatar' is assigned a value but never used.","'avatarObj' is assigned a value but never used.","'setAvatarObj' is assigned a value but never used.","'change' is assigned a value but never used.","'setChange' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'CardMedia' is defined but never used.","'Autocomplete' is defined but never used.","'history' is assigned a value but never used.","'loading' is assigned a value but never used.","'newTag' is assigned a value but never used.","'setNewTag' is assigned a value but never used.","'handleArtTagsEdit' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'readArt'. Either include it or remove the dependency array.","ArrayExpression",["718"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'selectedArt', 'updatedTile.artId', 'updatedTile.artLocation', 'updatedTile.artType', 'updatedTile.category', 'updatedTile.description', 'updatedTile.tags', and 'updatedTile.title'. Either include them or remove the dependency array.",["719"],"'Suspense' is defined but never used.","no-dupe-keys","Duplicate key 'marginLeft'.","ObjectExpression","'IconButton' is defined but never used.","'OutlinedInput' is defined but never used.","'InputLabel' is defined but never used.","'InputAdornment' is defined but never used.","'FormControl' is defined but never used.","'Visibility' is defined but never used.","'VisibilityOff' is defined but never used.","'clsx' is defined but never used.","React Hook useEffect contains a call to 'setErrorMessage'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [token] as a second argument to the useEffect Hook.",["720"],"'isMobile' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'globalParams' and 'props.prixerUsername'. Either include them or remove the dependency array.",["721"],"'MenuProps' is assigned a value but never used.","'backdrop' is assigned a value but never used.","'inputChange' is assigned a value but never used.","'response' is assigned a value but never used.","'useCallback' is defined but never used.","'Cropper' is defined but never used.","'thumbnailUrl' is assigned a value but never used.","'setThumbnailUrl' is assigned a value but never used.","'setPublicId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'artType' and 'handleMaxPrintCalc'. Either include them or remove the dependency array.",["722"],"'blobToFile' is defined but never used.","'removeCrops' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'axios' is defined but never used.","'isDeskTop' is assigned a value but never used.","'Snackbar' is defined but never used.","'PrixerGrid' is defined but never used.","'logo' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","'useState' is defined but never used.","'useEffect' is defined but never used.","Duplicate key 'padding'.","'FormGroup' is defined but never used.","'FilledInput' is defined but never used.","'Input' is defined but never used.","'TextField' is defined but never used.","'Open' is assigned a value but never used.","'createOpenF' is assigned a value but never used.","Expected '!==' and instead saw '!='.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-eval","eval can be harmful.","CallExpression","'useImperativeHandle' is defined but never used.","'errorMessage' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","'snackBarAction' is assigned a value but never used.","'setSnackBarAction' is assigned a value but never used.","'snackBarError' is assigned a value but never used.","'setSnackBarError' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'art', 'croppedArtTemp', and 'setCroppedArt'. Either include them or remove the dependency array.",["723"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'LoyaltyIcon' is defined but never used.","'Preferences' is defined but never used.","'Testimonials' is defined but never used.","'CircularProgress' is defined but never used.","'imagesProducts' is assigned a value but never used.","'test' is assigned a value but never used.","'ready' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["724"],"'ar' is assigned a value but never used.","'classes' is assigned a value but never used.","'setAspect' is assigned a value but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'makeStyles' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Box' is defined but never used.","'url' is assigned a value but never used.","'setProductId' is assigned a value but never used.","'setImagesList' is assigned a value but never used.","'thumbUrl' is assigned a value but never used.","'setThumbUrl' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'imageLoader.loader' and 'imagesList'. Either include them or remove the dependency array.",["725"],"'previewMp4' is assigned a value but never used.","'Link' is defined but never used.","'Title' is defined but never used.","'Backdrop' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'base_url' and 'props.product'. Either include them or remove the dependency array.",["726"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'buttonAttState' is assigned a value but never used.","'setButtonAttState' is assigned a value but never used.","'passwordError' is assigned a value but never used.","'setPasswordError' is assigned a value but never used.","'emailError' is assigned a value but never used.","'setEmailError' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","no-global-assign","no-unsafe-negation",{"desc":"727","fix":"728"},{"desc":"729","fix":"730"},{"desc":"731","fix":"732"},{"desc":"733","fix":"734"},{"desc":"735","fix":"736"},{"desc":"737","fix":"738"},{"desc":"739","fix":"740"},{"desc":"741","fix":"742"},{"desc":"743","fix":"744"},{"desc":"745","fix":"746"},"Add dependencies array: [email, username, password]",{"range":"747","text":"748"},"Update the dependencies array to be: [readArt]",{"range":"749","text":"750"},"Update the dependencies array to be: [artDataState, selectedArt, updatedTile.artId, updatedTile.artLocation, updatedTile.artType, updatedTile.category, updatedTile.description, updatedTile.tags, updatedTile.title]",{"range":"751","text":"752"},"Add dependencies array: [token]",{"range":"753","text":"754"},"Update the dependencies array to be: [globalParams, props.prixerUsername, searchValue]",{"range":"755","text":"756"},"Update the dependencies array to be: [originalPhotoWidth, originalPhotoHeight, originalPhotoPpi, originalPhotoIso, artType, handleMaxPrintCalc]",{"range":"757","text":"758"},"Update the dependencies array to be: [art, croppedAreaPixels, croppedArtTemp, setCroppedArt]",{"range":"759","text":"760"},"Update the dependencies array to be: [history, props.prixerUsername]",{"range":"761","text":"762"},"Update the dependencies array to be: [imageLoader.loader, imagesList]",{"range":"763","text":"764"},"Update the dependencies array to be: [base_url, props.product]",{"range":"765","text":"766"},[6270,6270],", [email, username, password]",[8963,8965],"[readArt]",[10049,10063],"[artDataState, selectedArt, updatedTile.artId, updatedTile.artLocation, updatedTile.artType, updatedTile.category, updatedTile.description, updatedTile.tags, updatedTile.title]",[3479,3479],", [token]",[3717,3730],"[globalParams, props.prixerUsername, searchValue]",[5774,5877],"[originalPhotoWidth, originalPhotoHeight, originalPhotoPpi, originalPhotoIso, artType, handleMaxPrintCalc]",[2941,2960],"[art, croppedAreaPixels, croppedArtTemp, setCroppedArt]",[5404,5426],"[history, props.prixerUsername]",[4860,4862],"[imageLoader.loader, imagesList]",[1483,1485],"[base_url, props.product]"]