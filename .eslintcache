[{"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/index.js":"1","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/theme.js":"2","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/App.js":"3","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/serviceWorker.js":"4","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/utils/expire.js":"5","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/fullscreenPhoto/fullscreenPhoto.jsx":"6","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/gallery/gallery.jsx":"7","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/products/productsCatalog.jsx":"8","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/passwordChange/passwordChange.jsx":"9","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/register/userRegistration.jsx":"10","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/register/prixerRegistration.jsx":"11","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/passwordReset/forgotPassword.jsx":"12","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/adminLogin/adminLoginPage.jsx":"13","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/passwordReset/passwordReset.jsx":"14","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/login/loginPage.jsx":"15","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/adminMain.jsx":"16","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/prixerProfile.jsx":"17","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/home/home.jsx":"18","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/utils/utils.js":"19","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/utils/validations.js":"20","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/products/productsGrid.jsx":"21","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/appBar/appBar.jsx":"22","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/grid/grid.jsx":"23","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/floatingAddButton/floatingAddButton.jsx":"24","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/Copyright/copyright.jsx":"25","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/artUploader/artUploader.jsx":"26","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/orders/orders.jsx":"27","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/orders/paymentMethods.jsx":"28","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/consumers/consumers.jsx":"29","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/products/products.jsx":"30","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/dashboard/dashboard.jsx":"31","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/adminUser/adminUser.jsx":"32","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/products/services.js":"33","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/disableProduct.jsx":"34","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/readProducts.jsx":"35","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/updateProduct.jsx":"36","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/createProduct.jsx":"37","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminCrud/disableAdmin.jsx":"38","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminCrud/createAdmin.jsx":"39","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminCrud/readAdmins.jsx":"40","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminCrud/updateAdmin.jsx":"41","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/dashboard/orders.jsx":"42","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/dashboard/deposits.jsx":"43","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/dashboard/chart.jsx":"44","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/orders/orderServices.js":"45","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/consumerCrud/readConsumers.jsx":"46","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/consumerCrud/updateConsumer.jsx":"47","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/consumerCrud/createConsumer.jsx":"48","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/paymentMethodCrud/createPaymentMethod.jsx":"49","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/orderCrud/updateOrder.jsx":"50","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/paymentMethodCrud/readPaymentMethods.jsx":"51","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/orderCrud/createOrder/createOrder.jsx":"52","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/paymentMethodCrud/updatePaymentMethod.jsx":"53","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/products/variants.jsx":"54","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/Title.jsx":"55","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/consumerCrud/consumerServices.js":"56","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/searchBar/searchBar.jsx":"57","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/orderCrud/createOrder/orderDetails.jsx":"58","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/orderCrud/createOrder/orderBasicInfo.jsx":"59","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/variants/readVariants.jsx":"60","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/variants/createVariant.jsx":"61","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/artUploader/aspectRatioSelector.jsx":"62","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/simpleDialog/simpleDialog.jsx":"63","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/prixerGrid/prixerGrid.jsx":"64","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/utils/cropImage.js":"65","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/artUploader/easyCropper.jsx":"66","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/listItems.jsx":"67","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/prixerOptions/prixerOptions.jsx":"68","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/userData/userData.jsx":"69"},{"size":931,"mtime":1661180740281,"results":"70","hashOfConfig":"71"},{"size":397,"mtime":1661180740989,"results":"72","hashOfConfig":"71"},{"size":3257,"mtime":1661180740269,"results":"73","hashOfConfig":"71"},{"size":5086,"mtime":1661180740289,"results":"74","hashOfConfig":"71"},{"size":403,"mtime":1661180740989,"results":"75","hashOfConfig":"71"},{"size":24549,"mtime":1661180740281,"results":"76","hashOfConfig":"71"},{"size":2510,"mtime":1661180740281,"results":"77","hashOfConfig":"71"},{"size":2332,"mtime":1661180740285,"results":"78","hashOfConfig":"71"},{"size":8532,"mtime":1661180740285,"results":"79","hashOfConfig":"71"},{"size":10439,"mtime":1661180740289,"results":"80","hashOfConfig":"71"},{"size":8560,"mtime":1661180740289,"results":"81","hashOfConfig":"71"},{"size":4659,"mtime":1661180740285,"results":"82","hashOfConfig":"71"},{"size":8838,"mtime":1661180740281,"results":"83","hashOfConfig":"71"},{"size":7155,"mtime":1661180740285,"results":"84","hashOfConfig":"71"},{"size":9576,"mtime":1661180740281,"results":"85","hashOfConfig":"71"},{"size":6503,"mtime":1661180740273,"results":"86","hashOfConfig":"71"},{"size":2349,"mtime":1661284163715,"results":"87","hashOfConfig":"71"},{"size":14051,"mtime":1661370030480,"results":"88","hashOfConfig":"71"},{"size":2686,"mtime":1661180740989,"results":"89","hashOfConfig":"71"},{"size":594,"mtime":1661180740989,"results":"90","hashOfConfig":"71"},{"size":11222,"mtime":1661180740285,"results":"91","hashOfConfig":"71"},{"size":4642,"mtime":1661184476586,"results":"92","hashOfConfig":"71"},{"size":5419,"mtime":1661284163715,"results":"93","hashOfConfig":"71"},{"size":1438,"mtime":1661180740289,"results":"94","hashOfConfig":"71"},{"size":484,"mtime":1661180740289,"results":"95","hashOfConfig":"71"},{"size":26420,"mtime":1661180740289,"results":"96","hashOfConfig":"71"},{"size":5260,"mtime":1661180740273,"results":"97","hashOfConfig":"71"},{"size":5061,"mtime":1661180740273,"results":"98","hashOfConfig":"71"},{"size":4836,"mtime":1661180740273,"results":"99","hashOfConfig":"71"},{"size":4906,"mtime":1661180740273,"results":"100","hashOfConfig":"71"},{"size":3186,"mtime":1661180740273,"results":"101","hashOfConfig":"71"},{"size":4445,"mtime":1661284163607,"results":"102","hashOfConfig":"71"},{"size":2757,"mtime":1661180740285,"results":"103","hashOfConfig":"71"},{"size":0,"mtime":1661180740277,"results":"104","hashOfConfig":"71"},{"size":2983,"mtime":1661180740277,"results":"105","hashOfConfig":"71"},{"size":15825,"mtime":1661180740277,"results":"106","hashOfConfig":"71"},{"size":18716,"mtime":1661180740277,"results":"107","hashOfConfig":"71"},{"size":0,"mtime":1661180740269,"results":"108","hashOfConfig":"71"},{"size":8660,"mtime":1661180740269,"results":"109","hashOfConfig":"71"},{"size":2088,"mtime":1661180740269,"results":"110","hashOfConfig":"71"},{"size":0,"mtime":1661180740269,"results":"111","hashOfConfig":"71"},{"size":2351,"mtime":1661180740273,"results":"112","hashOfConfig":"71"},{"size":847,"mtime":1661180740273,"results":"113","hashOfConfig":"71"},{"size":1429,"mtime":1661180740273,"results":"114","hashOfConfig":"71"},{"size":2689,"mtime":1661180740273,"results":"115","hashOfConfig":"71"},{"size":2918,"mtime":1661180740273,"results":"116","hashOfConfig":"71"},{"size":17190,"mtime":1661180740273,"results":"117","hashOfConfig":"71"},{"size":16295,"mtime":1661180740273,"results":"118","hashOfConfig":"71"},{"size":6375,"mtime":1661180740277,"results":"119","hashOfConfig":"71"},{"size":8690,"mtime":1661180740277,"results":"120","hashOfConfig":"71"},{"size":2992,"mtime":1661180740277,"results":"121","hashOfConfig":"71"},{"size":12594,"mtime":1661180740277,"results":"122","hashOfConfig":"71"},{"size":6795,"mtime":1661180740277,"results":"123","hashOfConfig":"71"},{"size":5131,"mtime":1661180740273,"results":"124","hashOfConfig":"71"},{"size":342,"mtime":1661180740273,"results":"125","hashOfConfig":"71"},{"size":1050,"mtime":1661180740273,"results":"126","hashOfConfig":"71"},{"size":1739,"mtime":1661180740989,"results":"127","hashOfConfig":"71"},{"size":39047,"mtime":1661180740277,"results":"128","hashOfConfig":"71"},{"size":15659,"mtime":1661180740277,"results":"129","hashOfConfig":"71"},{"size":3649,"mtime":1661180740277,"results":"130","hashOfConfig":"71"},{"size":19154,"mtime":1661180740277,"results":"131","hashOfConfig":"71"},{"size":6737,"mtime":1661180740289,"results":"132","hashOfConfig":"71"},{"size":1815,"mtime":1661180740989,"results":"133","hashOfConfig":"71"},{"size":3248,"mtime":1661284163715,"results":"134","hashOfConfig":"71"},{"size":2327,"mtime":1661180740989,"results":"135","hashOfConfig":"71"},{"size":1317,"mtime":1661180740289,"results":"136","hashOfConfig":"71"},{"size":3710,"mtime":1661180740273,"results":"137","hashOfConfig":"71"},{"size":923,"mtime":1661180740285,"results":"138","hashOfConfig":"71"},{"size":11899,"mtime":1661180740285,"results":"139","hashOfConfig":"71"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},"njpg8e",{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"142"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"142"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"142"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"142"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"142"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"142"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"142"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"142"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"142"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"142"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"142"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"142"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"142"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"142"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"142"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"142"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"142"},"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/index.js",[],["296","297"],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/theme.js",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/App.js",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/serviceWorker.js",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/utils/expire.js",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/fullscreenPhoto/fullscreenPhoto.jsx",["298","299","300","301","302"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport axios from 'axios';\nimport AppBar from '../../sharedComponents/appBar/appBar';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FloatingAddButton from '../../sharedComponents/floatingAddButton/floatingAddButton';\nimport ArtUploader from '../../sharedComponents/artUploader/artUploader';\nimport WhatsAppIcon from '@material-ui/icons/WhatsApp';\nimport utils from '../../utils/utils';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Img from \"react-cool-img\";\n\nconst useStyles = makeStyles((theme)=> ({\n  loading: {\n    display: 'flex',\n    '& > * + *': {\n      marginLeft: theme.spacing(2),\n    },\n    marginLeft: \"50vw\",\n    marginTop: \"50vh\"\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'left',\n    maxWidth: 850,\n    flexGrow:1\n  },\n  root: {\n    width: '100vw'\n  },\n  float: {\n    position:'relative',\n    marginLeft:'87%'\n  }\n}));\n\nconst photoIsos = [\n  '100',\n  '200',\n  '400'\n]\n\nexport default function FullscreePhoto(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [ready, setReady] = useState(false);\n  const [tiles, setTiles] = useState([]);\n  const [updatedTile, setUpdatedTile] = useState([]);\n  const [artDataState, setArtDataState] = useState();\n  const [snackBar, setSnackBar] = useState(false);\n  const [snackBarMessage, setSnackBarMessage] = useState(false);\n  const [openArtFormDialog, setOpenArtFormDialog] = useState(false);\n\nconst handleArtEdit = (e, tile)=> {\n  if(artDataState===tile.artId) {\n    setUpdatedTile(tile);\n    setArtDataState('');\n  } else {\n    setArtDataState(tile.artId);\n  } \n}\n\nconst handleArtDescriptionEdit = async (e, tile)=> {\n  let tempTiles = tiles;\n  let result = await descriptionEdit(tempTiles,tile, e);\n  setTiles(result);\n}\n\nconst handleArtTitleEdit = async (e, tile)=> {\n  let tempTiles = tiles;\n  let result = await titleEdit(tempTiles, tile, e);\n  setTiles(result);\n}\n\nconst handleOriginalPhotoHeight = async (e, tile)=> {\n  let tempTiles = tiles;\n  let result = await originalPhotoHeightEdit(tempTiles, tile, e);\n  setTiles(result);\n}\n\nconst handleOriginalPhotoWidth = async (e, tile)=> {\n  let tempTiles = tiles;\n  let result = await originalPhotoWidthEdit(tempTiles, tile, e);\n  setTiles(result);\n}\n\nconst handleOriginalPhotoPpi = async (e, tile)=> {\n  let tempTiles = tiles;\n  let result = await originalPhotoPpiEdit(tempTiles, tile, e);\n  setTiles(result);\n}\n\nconst handleOriginalPhotoIso = async (e, tile)=> {\n  let tempTiles = tiles;\n  let result = await originalPhotoIsoEdit(tempTiles, tile, e);\n  setTiles(result);\n}\n\nconst handleArtTagsEdit = async (e, tile, tags)=> {\n  let tempTiles = tiles;\n  let result = await tagsEdit(tempTiles, tile, e, tags);\n  setTiles(result);\n}\n\nconst handleArtLocationEdit = async (e, tile)=> {\n  let tempTiles = tiles;\n  let result = await locationEdit(tempTiles, tile, e);\n  setTiles(result);\n}\n\nfunction tagsEdit(tempTiles, tile, e, tags) {\n  return tempTiles.map((item) => {\n    if (item.artId === tile.artId) {\n      item.tags = tags\n    }\n    return item;\n  });\n}\n\nfunction locationEdit(tempTiles, tile, e) {\n  return tempTiles.map((item) => {\n    if (item.artId === tile.artId) {\n      item.artLocation = e.target.value\n    }\n    return item;\n  });\n}\n\nfunction titleEdit(tempTiles, tile, e) {\n  return tempTiles.map((item) => {\n    if (item.artId === tile.artId) {\n      item.title = e.target.value\n    }\n    return item;\n  });\n}\n\nfunction originalPhotoHeightEdit(tempTiles, tile, e) {\n  return tempTiles.map((item) => {\n    if (item.artId === tile.artId) {\n      item.originalPhotoHeight = e.target.value\n    }\n    return item;\n  });\n}\n\nfunction originalPhotoWidthEdit(tempTiles, tile, e) {\n  return tempTiles.map((item) => {\n    if (item.artId === tile.artId) {\n      item.originalPhotoWidth = e.target.value\n    }\n    return item;\n  });\n}\n\nfunction originalPhotoPpiEdit(tempTiles, tile, e) {\n  return tempTiles.map((item) => {\n    if (item.artId === tile.artId) {\n      item.originalPhotoPpi = e.target.value\n    }\n    return item;\n  });\n}\n\nfunction originalPhotoIsoEdit(tempTiles, tile, e) {\n  return tempTiles.map((item) => {\n    if (item.artId === tile.artId) {\n      item.originalPhotoIso = e.target.value\n    }\n    return item;\n  });\n}\n\nfunction descriptionEdit(tempTiles, tile, e) {\n  return tempTiles.map((item)=> {\n    if(item.artId === tile.artId) {\n      item.description = e.target.value;\n    }\n    return item;\n  });\n}\n\nconst maxPrintValues = (tile)=> {\n\n  const [maxPrintWidthCm, maxPrintHeightCm] = \n    utils.maxPrintCalc(\n      tile.originalPhotoWidth, \n      tile.originalPhotoHeight, \n      tile.originalPhotoPpi, \n      tile.originalPhotoIso\n      );\n\n  return maxPrintWidthCm + \" x \" + maxPrintHeightCm + \" cm\";\n        \n}\n\nconst navigateToPrixer = (e, prixerUsername)=> {\n  // history.push({pathname:'/'+ prixerUsername});\n}\n\n// const copyCodeToClipboard = (e, tile) => {\n//   const el = document.createElement('textarea');\n//   el.value = utils.generateArtMessage(tile, 'copy');\n//   document.body.appendChild(el);\n//   el.select();\n//   document.execCommand('copy');\n//   document.body.removeChild(el);\n// }\n  \nuseEffect(()=> {\n  if(tiles){\n    const base_url= process.env.REACT_APP_BACKEND_URL + \"/art/read-by-prixer\";\n    const data = {\n      username: props.match.params.username\n    }\n    axios.post(base_url, data)\n    .then(response =>{\n      if(tiles.length !== response.data.arts.length) {\n        setTiles(response.data.arts);\n        setReady(true);\n        if(document.getElementById(props.match.params.artId)) {\n          document.getElementById(props.match.params.artId).scrollIntoView({\n              behavior: 'smooth',\n              block: 'center',\n            });\n        } else {\n          setSnackBarMessage('Arte no encontrado, por favor inténtalo de nuevo.');\n          setSnackBar(true);\n        }\n      }\n    });\n  }\n  }, []);\n\n  useEffect(()=>{\n    if(artDataState === '') {\n      const base_url= process.env.REACT_APP_BACKEND_URL + \"/art/update\";\n      const data= {\n          'title': updatedTile.title,\n          'description': updatedTile.description,\n          'tags': updatedTile.tags,\n          'imageUrl': updatedTile.imageUrl,\n          'thumbnailUrl': updatedTile.thumbnailUrl,\n          'userId': updatedTile.userId,\n          'category': updatedTile.category,\n          'license': updatedTile.license,\n          'use': updatedTile.use,\n          'prixerUsername': updatedTile.prixerUsername,\n          'status': updatedTile.status,\n          'publicId': updatedTile.publicId,\n          '_id': updatedTile._id,\n          'artId': updatedTile.artId,\n          'artType': updatedTile.artType,\n          'originalPhotoWidth': updatedTile.originalPhotoWidth,\n          'originalPhotoHeight': updatedTile.originalPhotoHeight,\n          'originalPhotoIso': updatedTile.originalPhotoIso,\n          'originalPhotoPpi': updatedTile.originalPhotoPpi,\n          'artLocation': updatedTile.artLocation\n          };\n          axios.post(base_url,data)\n          .then(response =>{\n            if(response.data.data.success){\n              setSnackBarMessage(response.data.data.artResult);\n              setSnackBar(true);\n            } else {\n              setSnackBarMessage(response.data.data.error_message);\n              setSnackBar(true);\n            }\n          })\n          .catch(error =>{\n              console.log(error.response)\n          })\n    }\n  }, [artDataState])\n\n\n  return (\n      !ready? \n      <div className={classes.loading}>\n        <CircularProgress />\n      </div> \n      :\n      <Container component=\"main\" className={classes.paper}>\n      <div style={{position:'fixed', zIndex:'20', marginTop: 10}}>\n      <AppBar />\n      </div>\n      <div style={{marginTop: 55}}>\n      {tiles ?\n      tiles.map((tile) => (\n        (artDataState !== tile.artId) ?\n        <div id={tile.artId} key={tile.artId}>\n        <Card style={{marginTop: 35}}>\n            <CardActionArea>\n                {/* <CardMedia\n                component=\"img\"\n                alt=\"Contemplative Reptile\"\n                image={tile.imageUrl}\n                title=\"Contemplative Reptile\"\n                /> */}\n                <Img \n                  placeholder=\"/imgLoading.svg\"\n                  style={{ backgroundColor: \"#eeeeee\", width: '100%' }}\n                  src={tile.largeThumbUrl || tile.thumbnailUrl} \n                  debounce={1000} // Default is 300 (ms)\n                  cache\n                  error=\"/imgError.svg\"\n                  srcSet={tile.smallThumbUrl + ' 600w, ' + tile.mediumThumbUrl + ' 850w, ' + tile.largeThumbUrl + ' 1300w'}\n                  sizes=\"(min-width: 960px) 1300px, (min-width: 640px) 850px, 600px\"\n                  alt={tile.title}\n                  id={tile.artId}\n                />\n                <CardContent>\n                  <Grid item container xs={12} sm={12} style={{whiteSpace: 'nowrap', padding:0, margin:0}} justify=\"space-between\">\n                    <Typography style={{display:'inline-block', fontSize: '0.8em', paddingLeft:0}}> \n                        ID: {tile.artId}\n                    </Typography>\n                    <div onClick={navigateToPrixer(tile.prixerUsername)}>\n                    <Typography gutterBottom variant=\"h7\" component=\"h2\" style={{display:'inline-block', right: 0, textAlign:'right', margin:0, fontSize: 12}}>\n                      Prixer: {tile.prixerUsername}\n                    </Typography>\n                    </div>\n                  </Grid>\n                <Grid item container xs={12} sm={12} justify=\"space-between\" style={{textAlign:'left', padding:0, margin:0}}>\n                  <Grid item xs={6} sm={6} style={{textAlign:'left', padding:0, margin:0}}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{margin:0}}>\n                        {tile.title}\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid item container xs={12} sm={12} style={{textAlign:'left', padding:0, margin:0}}>\n                  { tile.artLocation &&\n                    <Typography style={{fontSize: '0.8em', paddingBottom: 10, paddingLeft: 3}}> \n                      Ubicación: {tile.artLocation}\n                    </Typography>\n                  }\n                </Grid>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" style={{whiteSpace: 'pre-line', fontSize: '1.1em', marginBottom: 10}}>\n                    {tile.description}\n                </Typography>\n                {\n                  (tile.originalPhotoHeight && tile.originalPhotoWidth) &&\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                      Máximo para impresión: {maxPrintValues(tile)}\n                  </Typography>\n                }\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                {/* <Button size=\"small\" color=\"primary\">\n                  Comparte\n                </Button> */}\n                <Button size=\"small\" color=\"primary\" onClick={(e)=>{window.open(utils.generateWaMessage(tile), '_blank');}}>\n                  <WhatsAppIcon /> Escríbenos\n                </Button>\n                {\n                JSON.parse(localStorage.getItem('token')) &&\n                JSON.parse(localStorage.getItem('token')).username == tile.prixerUsername &&\n                    <Button size=\"small\" color=\"primary\" onClick={(e)=>{handleArtEdit(e, tile)}}>\n                      Editar\n                    </Button>\n                }\n                {/* <Button size=\"small\" color=\"primary\" onClick={(e)=>{copyCodeToClipboard(e, tile)}}>\n                  <FileCopyIcon/>\n                </Button> */}\n            </CardActions>\n        </Card>\n        </div>\n      :\n      <Card id={tile.artId} key={tile.artId}>\n      <CardActionArea>\n          {/* <CardMedia\n          component=\"img\"\n          alt=\"img\"\n          image={tile.imageUrl}\n          title=\"img\"\n          /> */}\n          <Img\n            placeholder=\"/imgLoading.svg\"\n            style={{ backgroundColor: \"#eeeeee\", height: '100%' }}\n            src={tile.largeThumbUrl || tile.thumbnailUrl} \n            debounce={1000} // Default is 300 (ms)\n            cache\n            error=\"/imgError.svg\"\n            srcSet={tile.smallThumbUrl + ' 600w, ' + tile.mediumThumbUrl + ' 850w, ' + tile.largeThumbUrl + ' 1300w'}\n            sizes=\"(min-width: 960px) 1300px, (min-width: 640px) 850px, 600px\"\n            alt={tile.title} \n            id={tile.artId}\n          />\n          <CardContent>\n          <Grid item xs={12} container>\n            <Grid item xs container direction=\"column\">\n              <Grid item xs>\n                <Grid item xs>\n                  <TextField \n                  fullWidth id='artTitle' \n                  label=\"Titulo del arte\" \n                  variant=\"outlined\"\n                  value={tile.title} \n                  onChange={(e)=> {handleArtTitleEdit(e, tile)}} />\n                </Grid>\n                {\n                tile.artType === 'Foto' &&\n                <React.Fragment>\n                  <Grid item container xs={12} style={{paddingTop: 15, paddingBottom: 15}}>\n                    <Grid item xs={12} sm={12} style={{textAlign:'left'}}>\n                      <Typography style={{whiteSpace: 'pre-line', fontSize: '1.3em'}}> Medida del archivo original </Typography>\n                    </Grid>\n                    {\n                    (tile.originalPhotoWidth && tile.originalPhotoHeight) &&\n                      <Grid item container xs={12} sm={12} style={{paddingTop: 15}} justify=\"space-between\">\n                        <Grid item xs={5} sm={5}>\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"originalPhotoWidth\"\n                            label=\"Ancho\"\n                            type=\"number\"\n                            name=\"originalPhotoWidth\"\n                            autoComplete=\"originalPhotoWidth\"\n                            value={tile.originalPhotoWidth}\n                            onChange={(e)=>{\n                              handleOriginalPhotoWidth(e, tile);\n                              if(e.target.value < 2000) {\n                                setSnackBarMessage('La foto original debe tener un ancho mayor a 2.000 px.');\n                                setSnackBar(true);\n                              }\n                            }}\n                          />\n                        </Grid>\n                          <Typography style={{paddingTop: 13}}> x </Typography>\n                        <Grid item xs={5} sm={5}>\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            type=\"number\"\n                            id=\"originalPhotoHeight\"\n                            label=\"Alto\"\n                            name=\"originalPhotoHeight\"\n                            autoComplete=\"originalPhotoHeight\"\n                            value={tile.originalPhotoHeight}\n                            onChange={(e)=>{\n                              handleOriginalPhotoHeight(e, tile);\n                              if(e.target.value < 2000) {\n                                setSnackBarMessage('La foto original debe tener un alto mayor a 2.000 px.');\n                                setSnackBar(true);\n                              }\n                            }}\n                          />\n                        </Grid>\n                          <Typography style={{paddingTop: 13, paddingLeft: 2}}> px </Typography>\n                      </Grid>\n                    }\n                    <Grid item container xs={12} sm={12} style={{paddingTop: 15}} justify=\"space-between\">\n                      <Grid item xs={5} sm={5}>\n                            <TextField\n                              variant=\"outlined\"\n                              fullWidth\n                              type=\"number\"\n                              id=\"originalPhotoPpi\"\n                              label=\"PPI\"\n                              name=\"originalPhotoPpi\"\n                              autoComplete=\"originalPhotoPpi\"\n                              value={tile.originalPhotoPpi}\n                              onChange={(e)=>{\n                                handleOriginalPhotoPpi(e, tile);\n                                if(e.target.value < 100) {\n                                  setSnackBarMessage('La foto original debe ser mayor a 100 ppi.');\n                                  setSnackBar(true);\n                                }\n                              }}\n                            />\n                      </Grid>\n                      <Grid item xs={5} sm={6} style={{paddingLeft: 0}}>\n                        <FormControl variant=\"outlined\" style={{width:\"100%\"}}>\n                          <InputLabel id=\"originalPhotoIsoLabel\" style={{width:\"100%\"}}>ISO</InputLabel>\n                          <Select\n                            labelId=\"originalPhotoIsoLabel\"\n                            id=\"originalPhotoIso\"\n                            value={tile.originalPhotoIso}\n                            onChange={(e)=>{\n                              handleOriginalPhotoIso(e, tile);\n                            }}\n                            label=\"originalPhotoIso\"\n                          >\n                            <MenuItem value=\"\">\n                              <em></em>\n                            </MenuItem>\n                            { photoIsos.map((n)=> (\n                                <MenuItem key={n} value={n}>{n}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container xs={12} justify=\"space-between\">\n                    <Grid item xs={12} sm={12} style={{textAlign:'left'}}>\n                      <Typography style={{whiteSpace: 'pre-line', fontSize: '1.3em'}}> Medida máxima para impresión:</Typography>\n                    </Grid>\n                    <Grid item xs={12} sm={12} style={{textAlign:'left'}}>\n                      <Typography style={{whiteSpace: 'pre-line', fontSize: '1.3em'}}>  {maxPrintValues(tile)} </Typography>\n                    </Grid>\n                  </Grid>\n                  <Grid item container xs={12}>\n                  </Grid>\n                </React.Fragment>\n                }\n                {/* <Grid item container xs={12} style={{marginBottom: 15}}>\n                  <Grid item xs={4} sm={4}>\n                    <Typography style={{whiteSpace: 'pre-line', padding: 15, fontSize: '0.7em'}}> Máximo para <br/> impresión (cm) </Typography>\n                  </Grid>\n                  <Grid item container xs={8} sm={8}>\n                    <Grid item xs={5} sm={5}>\n                      <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        id=\"originalArtWidth\"\n                        label=\"Ancho\"\n                        name=\"originalArtWidth\"\n                        autoComplete=\"originalArtHeight\"\n                        value={tile.originalArtWidth}\n                        onChange={(e)=> {handleArtOriginalWidthEdit(e, tile)}}\n                      />\n                    </Grid>\n                      <Typography style={{padding: 10}}> x </Typography>\n                    <Grid item xs={5} sm={5}>\n                      <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        id=\"originalArtHeight\"\n                        label=\"Alto\"\n                        name=\"originalArtHeight\"\n                        autoComplete=\"originalArtHeight\"\n                        value={tile.originalArtHeight}\n                        onChange={(e)=> {handleArtOriginalHeightEdit(e, tile)}}\n                      />\n                    </Grid>\n                  </Grid>\n                </Grid> */}\n                <Grid item xs style={{marginBottom:20, marginTop: 20}}>  \n                  <TextField \n                    multiline rows={2} \n                    fullWidth id='artDescription'\n                    variant=\"outlined\" \n                    label=\"Descripción del arte\" \n                    value={tile.description} \n                    onChange={(e)=> {handleArtDescriptionEdit(e, tile)}} />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <Autocomplete\n                      multiple\n                      freeSolo\n                      id=\"tags-outlined\"\n                      options={[]}\n                      defaultValue={[]}\n                      value={tile.tags}\n                      onChange={(e, tags, reason) => {\n                        handleArtTagsEdit(e, tile, tags);\n                      }}\n                      renderInput={params => (\n                        <TextField\n                            {...params}\n                            onKeyDown={e => {\n                              if (e.key === 13 && e.target.value) {\n                                handleArtTagsEdit(e, tile);\n                              }\n                            }}\n                            variant=\"outlined\"\n                            label=\"Etiquetas\"\n                            placeholder=\"tags\"\n                        />\n                      )}\n                  />\n                </Grid>\n                <Grid item xs={12} style={{paddingTop: 15}}>\n                  <TextField\n                    variant=\"outlined\"\n                    fullWidth\n                    id=\"artLocation\"\n                    label=\"Ubicación\"\n                    name=\"artLocation\"\n                    autoComplete=\"artLocation\"\n                    value={tile.artLocation}\n                    onChange={(e)=>handleArtLocationEdit(e, tile)}\n                  />\n                </Grid> \n              </Grid>\n            </Grid>\n          </Grid>\n          </CardContent>\n            </CardActionArea>\n            <CardActions>\n                {/* <Button size=\"small\" color=\"primary\">\n                Comparte\n                </Button> */}\n                {\n                JSON.parse(localStorage.getItem('token')) &&\n                JSON.parse(localStorage.getItem('token')).username &&\n                  <Button size=\"small\" color=\"primary\" onClick={(e)=>{handleArtEdit(e, tile)}}>\n                    Guardar\n                  </Button>\n                }\n            </CardActions>\n        </Card>\n          ))\n          :\n          <p>Prueba prueba</p>\n        }\n        {\n          openArtFormDialog &&\n          <ArtUploader  \n            openArtFormDialog={openArtFormDialog} \n            setOpenArtFormDialog={setOpenArtFormDialog} \n            />\n        }\n        {\n          JSON.parse(localStorage.getItem('token')) &&\n          JSON.parse(localStorage.getItem('token')).username &&\n          <Grid className={classes.float}>\n            <FloatingAddButton setOpenArtFormDialog={setOpenArtFormDialog} />\n          </Grid>\n        }\n        <Snackbar\n          open={snackBar}\n          autoHideDuration={2000}\n          message={snackBarMessage}\n          className={classes.snackbar}\n          onClose={() => setSnackBar(false)}\n        />\n    </div>\n    </Container>\n  );\n}\n\n","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/gallery/gallery.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/products/productsCatalog.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/passwordChange/passwordChange.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/register/userRegistration.jsx",["303"],"//Llevar el Password a un componente propio.\n\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\n\nimport validations from '../utils/validations';\nimport Copyright from '../sharedComponents/Copyright/copyright';\n\n//material-ui\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport clsx from 'clsx';\nimport jwt from 'jwt-decode';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  snackbar: {\n    [theme.breakpoints.down('xs')]: {\n      bottom: 90,\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    withoutLabel: {\n      marginTop: theme.spacing(3),\n    },\n    textField: {\n      width: '25ch',\n    },\n  },\n}));\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [buttonState, setButtonState] = useState(true);\n\n  //Error states.\n  const [usernameError, setUsernameError] = useState();\n  const [emailError, setEmailError] = useState();\n  const [passwordError, setPasswordError] = useState();\n  const [errorMessage, setErrorMessage] = useState();\n  const [snackBarError, setSnackBarError] = useState(false);\n\n  const now = new Date();\n\n  const handleSubmit = (e)=> {\n    e.preventDefault();\n    if((!username)||(!email)||(!firstName)||(!lastName)||(!email)||(!password)) {\n      setErrorMessage('Por favor completa todos los campos requeridos.');\n      setSnackBarError(true);\n    } else {\n    const base_url= process.env.REACT_APP_BACKEND_URL + \"/register\";\n    const data= {\n      'username': username,\n      'email': email,\n      'password': password,\n      'firstName': firstName,\n      'lastName': lastName\n      };\n      setButtonState(true);\n    axios.post(base_url,data)\n    .then(response =>{\n        if(response.data.info === 'error_username'){\n          setUsernameError(true);\n          setErrorMessage(response.data.message);\n          setSnackBarError(true);\n        } else if(response.data.info === 'error_email') {\n          setEmailError(true);\n          setErrorMessage(response.data.message);\n          setSnackBarError(true);\n        } else {\n          setPasswordError(true);\n          setErrorMessage('Registro de usuario exitoso.');\n          setSnackBarError(true);\n          const token = jwt(response.data.token);\n          localStorage.setItem('token', JSON.stringify(token));\n          localStorage.setItem('tokenExpire', JSON.stringify(now.getTime() + 21600000));\n          history.push({pathname:\"/registrar/prixer\"});\n        }\n    })\n    .catch(error =>{\n        setButtonState(false);\n        console.log(error.response)\n    })\n  }\n   } \n\n   useEffect(()=>{\n     if(email && username && password){\n      if(validations.isAValidEmail(email) && validations.isAValidUsername(username) && validations.isAValidPassword(password)) {\n        setButtonState(false);\n      } else {\n        setButtonState(true);\n      }\n    } else {\n      setButtonState(true);\n    }\n   });\n\n   const handleEmailChange = (e)=> {\n    if(validations.isAValidEmail(e.target.value)) {\n      setEmail(e.target.value); \n      setEmailError(false);\n      setSnackBarError(false);\n    } else {\n      setEmail(e.target.value); \n      setErrorMessage('Por favor introduce un correo electrónico válido.');\n      setSnackBarError(true);\n      setEmailError(true); \n    }\n   }\n\n   const handleUsernameChange = (e)=> {\n    if(validations.isAValidUsername(e.target.value)) {\n      setUsername(e.target.value); \n      setUsernameError(false);\n      setSnackBarError(false);\n    } else {\n      setUsername(e.target.value); \n      setErrorMessage('Por favor introduce un nombre de usuario que solo incluya letras en minúscula y números.');\n      setSnackBarError(true);\n      setUsernameError(true); \n    }\n   }\n\n//Password\n   const handlePasswordChange = (e)=> {\n    if(validations.isAValidPassword(e.target.value)) {\n      setPassword(e.target.value); \n      setPasswordError(false);\n      setSnackBarError(false);\n    } else {\n      setPassword(e.target.value); \n      setPasswordError(true); \n      setErrorMessage('Disculpa, tu contraseña debe tener entre 8 y 15 caracteres, incluyendo al menos: una minúscula, una mayúscula, un número y un caracter especial.');\n      setSnackBarError(true);\n    }\n   }\n\n    const handleClickShowPassword = () => {\n      setShowPassword(!showPassword);\n    };\n  \n    const handleMouseDownPassword = (event) => {\n      event.preventDefault();\n    };\n//END Password\n\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Registrar\n        </Typography>\n        <form className={classes.form} onSubmit={handleSubmit} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                error={usernameError}\n                id=\"username\"\n                label=\"Usuario\"\n                name=\"username\"\n                autoComplete=\"username\"\n                vallue={username}\n                onChange={handleUsernameChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"firstName\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"Nombre\"\n                autoFocus\n                value={firstName}\n                onChange={(e)=>setFirstName(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Apellido\"\n                name=\"lastName\"\n                autoComplete=\"lname\"\n                value={lastName}\n                onChange={(e)=>setLastName(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                error={emailError}\n                id=\"email\"\n                label=\"Correo electrónico\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={email}\n                onChange={handleEmailChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n              <InputLabel htmlFor=\"outlined-adornment-password\">Contraseña</InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-password\"\n                type={showPassword ? 'text' : 'password'}\n                value={password}\n                label=\"Contraseña\"\n                error={passwordError}\n                onChange={handlePasswordChange}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      onMouseDown={handleMouseDownPassword}\n                      edge=\"end\"\n                    >\n                      {showPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                labelWidth={100}\n              />\n            </FormControl>\n            </Grid>\n            {/* <Grid item xs={12}>\n              <FormControlLabel\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                label=\"Acepto las condiciones de uso.\"\n              />\n            </Grid> */}\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            disabled={buttonState}\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            value=\"submit\"\n          >\n            Registrarme\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"#\" onClick={()=>{history.push({pathname:\"/iniciar\"})}} variant=\"body2\">\n                ¿Ya tienes una cuenta? Inicia sesión.\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n      <Snackbar\n          open={snackBarError}\n          autoHideDuration={6000}\n          message={errorMessage}\n          className={classes.snackbar}\n        />\n    </Container>\n  );\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/register/prixerRegistration.jsx",["304","305","306","307","308","309"],"import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport AddIcon from '@material-ui/icons/Add';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport { useState } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://prixelart.com/\">\n        prixelart.com\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: \"#fff\",\n    width: '160px',\n    height: '160px'\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  snackbar: {\n    [theme.breakpoints.down('xs')]: {\n      bottom: 90,\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    withoutLabel: {\n      marginTop: theme.spacing(3),\n    },\n    textField: {\n      width: '25ch',\n    },\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  loading: {\n    display: 'flex',\n    '& > * + *': {\n      marginLeft: theme.spacing(0),\n    },\n    marginLeft: \"50%\"\n  }\n}));\n\nexport default function PrixerRegistration() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [specialty, setSpecialty] = useState('Ambas');\n  const [instagram, setInstagram] = useState('');\n  const [dateOfBirth, setDateOfBirth] = useState();\n  const [phone, setPhone] = useState('');\n  const [country, setCountry] = useState('');\n  const [city, setCity] = useState('');\n  const [avatar, setAvatar] = useState('');\n  const [avatarObj, setAvatarObj] = useState('');\n  const [buttonState, setButtonState] = useState(false);\n  const [loading, setLoading] = useState(false);\n  \n\n  //Error states.\n  const [errorMessage, setErrorMessage] = useState();\n  const [snackBarError, setSnackBarError] = useState(false);\n\n  const handleSubmit = async (e)=> {\n    e.preventDefault();\n    if((!instagram)||(!dateOfBirth)||(!phone)||(!country)||(!city)) {\n    // ||(!avatar)) {\n      setErrorMessage('Por favor completa todos los campos requeridos.');\n      setSnackBarError(true);\n    } else {\n      setLoading(true);\n      setButtonState(true);\n      const base_url= process.env.REACT_APP_BACKEND_URL + \"/prixer-registration\";\n      // const cldAvatarUrl = await uploadToCld();\n      const data= {\n          'specialty': specialty,\n          'instagram': instagram,\n          'dateOfBirth': dateOfBirth,\n          'phone': phone,\n          'country': country,\n          'city': city,\n          // 'avatar': cldAvatarUrl,\n          'username': JSON.parse(localStorage.getItem('token')).username\n          };\n      axios.post(base_url,data)\n      .then(response =>{\n        if(response.data.success === false){\n          setLoading(false);\n          setButtonState(false);\n          setErrorMessage(response.data.message);\n          setSnackBarError(true);\n        } else {\n          setErrorMessage('Registro de Prixer exitoso.');\n          setSnackBarError(true);\n          history.push({pathname:\"/\"+response.data.prixerData.username});\n        }\n      })\n      .catch(error =>{\n          setLoading(false);\n          setButtonState(false);\n          console.log(error.response)\n      })\n    }\n   } \n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n        Comparte con tus futuros clientes\n        </Typography>\n        <form onSubmit={handleSubmit} className={classes.form} noValidate>\n          <Grid container spacing={3}>\n            {\n            loading && \n              <div class={classes.loading}>\n                <CircularProgress />\n              </div>\n            }\n            <Grid item xs={3}>\n            <InputLabel id=\"demo-simple-select-label\">Especialidad</InputLabel>\n                <Select\n                labelId=\"specialty\"\n                id=\"specialty\"\n                label='Especialidad'\n                disabled={buttonState}\n                value={specialty}\n                onChange={(e)=>{setSpecialty(e.target.value)}}\n                >\n                <MenuItem value=\"Fotografía\">Fotografía</MenuItem>\n                <MenuItem value=\"Diseño\">Diseño</MenuItem>\n                <MenuItem value=\"Ambas\">Ambas</MenuItem>\n                </Select>  \n            </Grid>\n            <Grid item xs={9} sm={9}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"instagram\"\n                variant=\"outlined\"\n                required\n                disabled={buttonState}\n                fullWidth\n                value={instagram}\n                id=\"instagram\"\n                label=\"Instagram\"\n                autoFocus\n                onChange={(e)=>{setInstagram(e.target.value)}}\n              />\n            </Grid>\n            <Grid item xs={6} sm={6}>\n              <TextField\n                id=\"dateOfBirth\"\n                label=\"Fecha de Nacimiento\"\n                type=\"date\"\n                disabled={buttonState}\n                // value={dateOfBirth}\n                format=\"dd-MM-yyyy\"\n                defaultValue=\"06-07-2016\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={(e)=>{setDateOfBirth(new Date(e.target.value))}}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                disabled={buttonState}\n                id=\"phone\"\n                label=\"Teléfono\"\n                value={phone}\n                onChange={(e)=>{setPhone(e.target.value)}}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"country\"\n                disabled={buttonState}\n                label=\"País\"\n                value={country}\n                type=\"country\"\n                id=\"country\"\n                autoComplete=\"current-password\"\n                onChange={(e)=>{setCountry(e.target.value)}}\n              />\n            </Grid><Grid item xs={6}>\n              <TextField\n                variant=\"outlined\"\n                disabled={buttonState}\n                required\n                fullWidth\n                name=\"city\"\n                label=\"Ciudad\"\n                value={city}\n                type=\"city\"\n                id=\"city\"\n                autoComplete=\"current-password\"\n                onChange={(e)=>{setCity(e.target.value)}}\n              />\n            </Grid>\n          </Grid>\n            {/* <Grid item xs={12}>\n              <FormControlLabel\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                label=\"Acepto los Términos y condiciones.\"\n              />\n            </Grid> */}\n          <Button\n            type=\"submit\"\n            fullWidth\n            disabled={buttonState}\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            value=\"submit\"\n          >\n            Guardar e ir a mi perfil\n          </Button>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n      <Snackbar\n          open={snackBarError}\n          autoHideDuration={1000}\n          message={errorMessage}\n          className={classes.snackbar}\n        />\n    </Container>\n  );\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/passwordReset/forgotPassword.jsx",["310","311","312","313","314","315","316","317"],"//Llevar el Password a un componente propio.\n\nimport React from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\n\n\nimport Copyright from '../../sharedComponents/Copyright/copyright';\n\n//material-ui\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  snackbar: {\n    [theme.breakpoints.down('xs')]: {\n      bottom: 90,\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    withoutLabel: {\n      marginTop: theme.spacing(3),\n    },\n    textField: {\n      width: '25ch',\n    },\n  },\n}));\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default function ForgotPassword() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [email, setEmail] = useState('');\n\n  //Error states.\n  const [errorMessage, setErrorMessage] = useState();\n  const [snackBarError, setSnackBarError] = useState(false);\n\n  const handleSubmit = (e)=> {\n    e.preventDefault();\n    if(!email) {\n      setErrorMessage('Por favor indica tu correo electrónico registrado para reestablecer tu contraseña.');\n      setSnackBarError(true);\n    } else {\n    const base_url= process.env.REACT_APP_BACKEND_URL + \"/forgot-password\";\n    const data= {\n      'email': email,\n      };\n    axios.post(base_url,data)\n    .then(async response =>{\n        if(!response.data.success){\n        //   setCurrentPasswordError(true);\n          setErrorMessage(response.data.info);\n          setSnackBarError(true);\n        } else {\n          setErrorMessage('Hemos enviado un enlace a tu correo electrónico.');\n          setSnackBarError(true);\n          await sleep(3000);\n          history.push({pathname:'/'});\n        }\n    })\n    .catch(error =>{\n        console.log(error.response)\n    })\n  }\n   } \n\n\n   const handleEmailChange = (e)=> {\n     setEmail(e.target.value)\n   }\n\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Solicita el cambio de contraseña\n        </Typography>\n        <form className={classes.form} onSubmit={handleSubmit} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <TextField\n                    variant=\"outlined\"\n                    required\n                    fullWidth\n                    // error={emailError}\n                    id=\"email\"\n                    label=\"Correo electrónico\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    value={email}\n                    onChange={handleEmailChange}\n                />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            value=\"submit\"\n          >\n            Recuperar acceso\n          </Button>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n      <Snackbar\n          open={snackBarError}\n          autoHideDuration={6000}\n          message={errorMessage}\n          className={classes.snackbar}\n        />\n    </Container>\n  );\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/adminLogin/adminLoginPage.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/passwordReset/passwordReset.jsx",["318"],"//Llevar el Password a un componente propio.\n\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\n\nimport validations from '../../utils/validations';\nimport Copyright from '../../sharedComponents/Copyright/copyright';\n\n//material-ui\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport clsx from 'clsx';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  snackbar: {\n    [theme.breakpoints.down('xs')]: {\n      bottom: 90,\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    withoutLabel: {\n      marginTop: theme.spacing(3),\n    },\n    textField: {\n      width: '25ch',\n    },\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: theme.palette.primary.main,\n  },\n}));\n\nexport default function PasswordReset(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [newPassword, setNewPassword] = useState('');\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const token = props.match.params.token;\n  const [backdrop, setBackdrop] = useState(true);\n\n  //Error states.\n  const [newPasswordError, setNewPasswordError] = useState();\n  const [errorMessage, setErrorMessage] = useState();\n  const [snackBarError, setSnackBarError] = useState(false);\n\n//FALTA AGREGAR AQUI LA VALIDACION DE QUE EL LINK EXISTE.\n  useEffect(()=>{\n\n    if(!token) {\n        setErrorMessage('Token inválido o expirado. Por favor inténtalo de nuevo.');\n        setSnackBarError(true);\n    } else {\n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/pw-token-check\";\n        const data= {\n          'token': token\n          };\n        axios.post(base_url,data)\n        .then(response =>{\n            if(!response.data.success){\n                setErrorMessage(response.data.info);\n                setSnackBarError(true);\n            } else {\n                setBackdrop(false);\n            }\n        })\n        .catch(error =>{\n            console.log(error.response)\n        })\n      }\n\n  });\n\n  const handleSubmit = (e)=> {\n    e.preventDefault();\n    if((!newPassword)) {\n      setErrorMessage('Por favor completa todos los campos requeridos.');\n      setSnackBarError(true);\n    } else {\n    const base_url= process.env.REACT_APP_BACKEND_URL + \"/reset-password\";\n    const data= {\n      'token': token,\n      'newPassword': newPassword\n      };\n    axios.post(base_url,data)\n    .then(response =>{\n        if(!response.data.success){\n          setNewPasswordError(true);\n          setErrorMessage(\"Por favor intentar nuevamente\");\n          setSnackBarError(true);\n        } else {\n          setErrorMessage(response.data.info);\n          setSnackBarError(true);\n          history.push({pathname:'/iniciar'});\n        }\n    })\n    .catch(error =>{\n        console.log(error.response)\n    })\n  }\n   } \n\n//New password\nconst handleNewPasswordChange = (e)=> {\n    if(validations.isAValidPassword(e.target.value)) {\n      setNewPassword(e.target.value); \n      setNewPasswordError(false);\n      setSnackBarError(false);\n    } else {\n      setNewPassword(e.target.value); \n      setNewPasswordError(true); \n      setErrorMessage('Disculpa, tu contraseña nueva debe tener entre 8 y 15 caracteres, incluyendo al menos: una minúscula, una mayúscula, un número y un caracter especial.');\n      setSnackBarError(true);\n    }\n   }\n\n    const handleClickShowNewPassword = () => {\n      setShowNewPassword(!showNewPassword);\n    };\n  \n    const handleMouseDownNewPassword = (event) => {\n      event.preventDefault();\n    };\n//END New password\n\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n    <Backdrop className={classes.backdrop} open={backdrop}>\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Cambia tu contraseña\n        </Typography>\n        <form className={classes.form} onSubmit={handleSubmit} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n            <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n              <InputLabel htmlFor=\"new-password\">Contraseña nueva</InputLabel>\n              <OutlinedInput\n                id=\"new-password\"\n                type={showNewPassword ? 'text' : 'password'}\n                value={newPassword}\n                label=\"Contraseña nueva\"\n                error={newPasswordError}\n                onChange={handleNewPasswordChange}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowNewPassword}\n                      onMouseDown={handleMouseDownNewPassword}\n                      edge=\"end\"\n                    >\n                      {showNewPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                labelWidth={100}\n              />\n            </FormControl>\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            value=\"submit\"\n          >\n            Cambiar contraseña\n          </Button>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n      <Snackbar\n          open={snackBarError}\n          autoHideDuration={6000}\n          message={errorMessage}\n          className={classes.snackbar}\n        />\n    </Container>\n  );\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/login/loginPage.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/adminMain.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/prixerProfile.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/home/home.jsx",["319","320","321"],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/utils/utils.js",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/utils/validations.js",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/products/productsGrid.jsx",["322","323","324","325","326","327"],"//[]      17. Búsqueda de Prixers.\n//[]      21. Términos y condiciones.\n//[]      16. Filtros para las búsquedas (Por etiqueta).\n//[]      25. Editar datos de la imagen en la tarjeta del grid grande.\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport { isWidthUp } from '@material-ui/core/withWidth';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport WhatsAppIcon from '@material-ui/icons/WhatsApp';\nimport utils from '../utils/utils';\nimport axios from 'axios';\n\n\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport { setProductAtts, getAttributes, getEquation } from './services.js';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    overflow: 'hidden',\n    alignContent: \"space-between\",\n    padding: 10,\n    marginTop: 10,\n    width: '50%',\n    backgroundColor: theme.palette.background.paper,\n    [theme.breakpoints.down('sm')]: {\n      maxWidth: 300\n    },\n    [theme.breakpoints.up('sm')]: {\n      maxWidth: 330\n    },\n    [theme.breakpoints.up('lg')]: {\n      maxWidth: 330\n    },\n    [theme.breakpoints.up('xl')]: {\n      maxWidth: 330\n    }\n  },\n  gridList: {\n    overflow: 'hidden',\n    padding: 10,\n    width: '100%',\n    height: '100%',\n    justifyContent: 'space-around',\n  },\n  img: {\n    width: '100%'\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: theme.palette.primary.main,\n  },\n  form: {\n    width: '100%'\n  }\n}));\n\nconst getGridListCols = () => {\n  if (isWidthUp('md', 200)) {\n    return 4;\n  }\n\n  return 1;\n}\n\nexport default function ProductGrid(props) {\n  const classes = useStyles();\n  const [tiles, setTiles] = useState();\n  const [width, setWidth] = useState([]);\n  const [height, setHeight] = useState([]);\n\n  useEffect(() => {\n    const base_url = process.env.REACT_APP_BACKEND_URL + \"/product/read-all\";\n    axios.get(base_url)\n      .then(async (response) => {\n        let productsAttTemp1 = response.data.products\n        await productsAttTemp1.map(async (p, iProd, pArr) => {\n          productsAttTemp1 = await getEquation(p, iProd, pArr);\n        });\n        setTiles(getAttributes(productsAttTemp1));\n      });\n  }, []);\n\n  return (\n    <GridList cellHeight={'auto'} className={classes.gridList} cols={getGridListCols()}>\n      {tiles ?\n        tiles.map((tile, iProd, productsArr) => (\n          <Card className={classes.root}>\n            <CardActionArea style={{ alignContent: \"space-between\" }}>\n              <CardMedia>\n                <img src={tile.thumbUrl} className={classes.img} alt=\"product thumbnail\" />\n              </CardMedia>\n              <CardContent>\n                <Typography gutterBottom style={{ padding: 0, marginBotom: 12, width: 10 }} variant=\"h5\" component=\"h2\">\n                  {tile.name}\n                </Typography>\n                <Typography gutterBottom style={{ fontSize: 15, padding: 0, marginBottom: 15 }} variant=\"h5\" component=\"h2\">\n                  {\n                    (JSON.parse(localStorage.getItem('token')) &&\n                      JSON.parse(localStorage.getItem('token')).username) ?\n                      (tile.needsEquation && tile.prixerEquation && tile.prixerEquation != 0) ?\n                        \"PVP: $\" + Math.round(parseFloat(tile.publicEquation)) + \" \\n PVM: $\" + Math.round(parseFloat(tile.prixerEquation)) :\n                        \"PVP: $\" + tile.publicPrice.from + \" - \" + tile.publicPrice.to + \" \\n PVM: $\" + tile.prixerPrice.from + \" - \" + tile.prixerPrice.to\n                      :\n                      (tile.needsEquation && tile.publicEquation && tile.publicEquation != 0) ?\n                        \"PVP: $\" + Math.round(parseFloat(tile.publicEquation)) :\n                        \"PVP: \" + tile.publicPrice.from + \" - \" + tile.publicPrice.to\n                  }\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  {tile.description}\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n            {\n              tile.hasSpecialVar &&\n              <>\n                <CardActions style={{ width: '25%' }}>\n                  {/* <Grid container xs={12} md={12} spacing={2}> */}\n                  <Grid item xs={12} md={12}>\n                    <FormControl variant=\"outlined\" className={classes.form}>\n                      <TextField\n                        variant=\"outlined\"\n                        display=\"inline\"\n                        id=\"width\"\n                        label=\"Ancho\"\n                        name=\"width\"\n                        autoComplete=\"width\"\n                        value={width[iProd]}\n                        onChange={async (e) => {\n                          if (!e.target.value) {\n                            let w = width;\n                            w[iProd] = e.target.value;\n                            setWidth([...w]);\n                            let l = await getEquation(tile, iProd, tiles, width, height);\n                            setTiles([...l]);\n                          } else {\n                            if (/^\\d+$/.test(e.target.value) && e.target.value[0] !== \"0\") {\n                              if (e.target.value && e.target.value != 0) {\n                                let w = width;\n                                w[iProd] = e.target.value;\n                                setWidth([...w]);\n                                let l = await getEquation(tile, iProd, tiles, width, height);\n                                setTiles([...l]);\n                              } else {\n                                let w = width;\n                                w[iProd] = e.target.value;\n                                setWidth([...w]);\n                                let l = await getEquation(tile, iProd, tiles, width, height);\n                                setTiles([...l]);\n                              }\n                            }\n                          }\n                        }}\n                      />\n                    </FormControl>\n                  </Grid>\n                </CardActions>\n                <CardActions style={{ width: '25%' }}>\n                  <Grid item xs={12} md={12}>\n                    <FormControl variant=\"outlined\" className={classes.form}>\n                      <TextField\n                        variant=\"outlined\"\n                        display=\"inline\"\n                        id=\"height\"\n                        label=\"Alto\"\n                        name=\"height\"\n                        autoComplete=\"height\"\n                        value={height[iProd]}\n                        onChange={async (e) => {\n                          if (!e.target.value) {\n                            let h = height;\n                            h[iProd] = e.target.value;\n                            setHeight([...h]);\n                            let l = await getEquation(tile, iProd, tiles, width, height);\n                            setTiles([...l]);\n                          } else {\n                            if (/^\\d+$/.test(e.target.value) && e.target.value[0] !== \"0\") {\n                              if (e.target.value && e.target.value != 0) {\n                                let h = height;\n                                h[iProd] = e.target.value;\n                                setHeight([...h]);\n                                let l = await getEquation(tile, iProd, tiles, width, height);\n                                setTiles([...l]);\n                              } else {\n                                let h = height;\n                                h[iProd] = e.target.value;\n                                setHeight([...h]);\n                                let l = await getEquation(tile, iProd, tiles, width, height);\n                                setTiles([...l]);\n                              }\n                            }\n                          }\n                        }}\n                      />\n                    </FormControl>\n                  </Grid>\n                  {/* </Grid> */}\n                </CardActions>\n              </>\n            }\n            {\n              tile.attributes &&\n              tile.attributes.map((att, iAtt, attributesArr) => (\n                <CardActions key={iAtt} style={{ width: '50%' }}>\n                  <Grid item xs={12} sm={12} md={12}>\n                    <FormControl variant=\"outlined\" className={classes.form} xs={12} sm={12} md={12}>\n                      <InputLabel required id=\"att.name\">{att.name}</InputLabel>\n                      <Select\n                        labelId=\"artTypeLabel\"\n                        id=\"artType\"\n                        value={tile.selection && tile.selection[iAtt]}\n                        onChange={\n                          async (e) => {\n                            const pAtts = await setProductAtts(e.target.value, attributesArr, iProd, iAtt, productsArr, width, height);\n\n                            if (pAtts) {\n                              setTiles(pAtts.pAtt ? [...pAtts.pAtt] : [...pAtts.att]);\n                            }\n                          }\n                        }\n                        label={att.selection}\n                      >\n                        <MenuItem value=\"\">\n                          <em></em>\n                        </MenuItem>\n                        {\n                          att.value &&\n                          att.value.map((n, i) => (\n                            <MenuItem key={n} value={n}>{n}</MenuItem>\n                          ))\n                        }\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                </CardActions>\n              ))\n            }\n            <CardActions>\n              <Button size=\"small\" color=\"primary\" onClick={(e) => { window.open(utils.generateWaProductMessage(tile), '_blank'); }}>\n                Información <WhatsAppIcon />\n              </Button>\n            </CardActions>\n            <CardActions>\n              {\n                tile.variants &&\n                tile.variants.map((v) => {\n                  if (v.attributes) {\n                    const test = v.attributes.reduce((r, a) => {\n                      return (a.name in tile.attributes) === true\n                    }, true)\n                  }\n                })\n              }\n            </CardActions>\n          </Card>\n        )\n        )\n        :\n        <h1>Pronto encontrarás los productos ideales para ti.</h1>\n      }\n    </GridList>\n  );\n}\n","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/appBar/appBar.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/grid/grid.jsx",["328"],"//[]      17. Búsqueda de Prixers.\n//[]      21. Términos y condiciones.\n//[]      16. Filtros para las búsquedas (Por etiqueta).\n//[]      25. Editar datos de la imagen en la tarjeta del grid grande.\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Img from \"react-cool-img\";\n\nimport utils from '../../utils/utils';\nimport SearchBar from '../../sharedComponents/searchBar/searchBar.jsx';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    // maxWidth: 850,\n    paddingTop: 15\n  },\n  img: {\n    [theme.breakpoints.down('sm')]: {\n      maxHeight: 180\n    },\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 300,\n      maxHeight: 450\n    },\n    [theme.breakpoints.up('lg')]: {\n      minHeight: 350,\n      maxHeight: 450\n    },\n    [theme.breakpoints.up('xl')]: {\n      minHeight: 450,\n      maxHeight: 450\n    }\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: theme.palette.primary.main,\n  },\n}));\n\nexport default function Grid(props) {\n  const classes = useStyles();\n  const [tiles, setTiles] = useState([]);\n  const history = useHistory();\n  let globalParams = new URLSearchParams(window.location.search);\n  const [searchValue, setSearchValue] = useState(globalParams.get('name') || null);\n  const [backdrop, setBackdrop] = useState(true);\n  const theme = useTheme();\n  const isDesktop = useMediaQuery(theme.breakpoints.up('md'));\n\n  useEffect(()=> {\n    if(props.prixerUsername || globalParams.get('prixer')) {\n      if(searchValue) {\n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/art/read-by-username-by-query\";\n        const params = {\n          text: searchValue,\n          username: props.prixerUsername || globalParams.get('prixer')\n        }\n        axios.get(base_url, {params})\n        .then(response =>{\n          setTiles(utils.shuffle(response.data.arts));\n          setBackdrop(false);\n        });\n      } else {\n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/art/read-by-prixer\";\n        const body = {\n          username: props.prixerUsername || globalParams.get('prixer')\n        }\n        axios.post(base_url, body)\n        .then(response =>{\n          setTiles(utils.shuffle(response.data.arts));\n          setBackdrop(false);\n        });\n      }\n    } else if(searchValue){\n      const base_url= process.env.REACT_APP_BACKEND_URL + \"/art/read-by-query\";\n      const params = {\n        text: searchValue\n      }\n      axios.get(base_url, {params})\n      .then(response =>{\n        setTiles(utils.shuffle(response.data.arts));\n        setBackdrop(false);\n      });\n    } else {\n      const base_url= process.env.REACT_APP_BACKEND_URL + \"/art/read-all\";\n      axios.get(base_url)\n      .then(response =>{\n        setTiles(utils.shuffle(response.data.arts));\n        setBackdrop(false);\n      });\n    }\n  }, [searchValue]);\n\nconst handleFullImage = (e, tile)=> {\n  history.push({pathname:\"/\"+tile.prixerUsername+'/art/'+e.target.id});\n}\n\nconst searchPhotos = (e, queryValue) => {\n  setSearchValue(queryValue);\n  if(props.prixerUsername || globalParams.get('prixer')){\n    if(globalParams.get('prixer')){\n      history.push({pathname:'/galeria/s?prixer='+globalParams.get('prixer')+'&name='+queryValue});\n    } else {\n      history.push({pathname:'/galeria/s?prixer='+props.prixerUsername+'&name='+queryValue});\n    }\n  } else {\n    history.push({pathname:'/galeria/s?name='+queryValue});\n  }\n  e.preventDefault();\n};\n\n  return (\n    <div className={classes.root}>\n        <Backdrop className={classes.backdrop} open={backdrop}>\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n        <SearchBar searchPhotos={searchPhotos} searchValue={searchValue} setSearchValue={setSearchValue}/>\n      <GridList cellSize={\"auto\"}  className={classes.gridList} cols={isDesktop ? 4 : 2 } >\n         {tiles ?\n         tiles.map((tile) => (\n          <GridListTile key={tile.artId} cols={1} onClick={(e)=>{handleFullImage(e, tile)}} className={classes.img}>\n            <Img\n            placeholder=\"/imgLoading.svg\"\n            style={{ backgroundColor: \"#eeeeee\", height: '100%' }}\n            src={tile.squareThumbUrl}\n            debounce={1000}\n            cache\n            error='/imgError.svg'\n            // srcSet={tile.smallThumbUrl + ' 600w, ' + tile.mediumThumbUrl + ' 850w, ' + tile.largeThumbUrl + ' 1300w'}\n            // sizes=\"(min-width: 1600px) 850px, (min-width: 960px) 450px, (min-width: 640px) 400px, 200px\"\n            sizes=\"(min-width: 1600px) 850px, (min-width: 960px) 450px, (min-width: 640px) 200px, (min-width: 375px) 80px\"\n            alt={tile.title}\n            id={tile.artId}\n            />\n          </GridListTile>\n        ))\n        :\n        <h1>Pronto encontrarás todo el arte que buscas.</h1>\n      }\n      </GridList>\n    </div>\n  );\n}\n","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/floatingAddButton/floatingAddButton.jsx",["329"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport axios from 'axios';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      // margin: theme.spacing(1),\n      margin: 0,\n      top: 'auto',\n      // marginLeft:333,\n      bottom: 20,\n      left: 'auto',\n      position: 'fixed'\n    },\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n  uwStyles: {\n    palette: {\n        window: \"#ffffff\",\n        sourceBg: \"#f4f4f5\",\n        windowBorder: \"#90a0b3\",\n        tabIcon: \"#000000\",\n        inactiveTabIcon: \"#d33f49\",\n        menuIcons: \"#555a5f\",\n        link: theme.palette.primary.main,\n        action: \"#339933\",\n        inProgress: theme.palette.primary.main,\n        complete: \"#339933\",\n        error: \"#cc0000\",\n        textDark: \"#000000\",\n        textLight: \"#fcfffd\"\n    },\n    fonts: {\n        default: null,\n        \"sans-serif\": {\n            url: null,\n            active: true\n        }\n    }\n  }\n}));\n\nexport default function FloatingAddButton(props) {\n  const classes = useStyles();\n  \n  const handleClick = ()=> {\n    props.setOpenArtFormDialog(true);\n  }\n\n  return (\n    <div className={classes.root}>\n      <Fab color=\"primary\" aria-label=\"add\" onClick={handleClick}>\n        <AddPhotoAlternateIcon/>\n      </Fab>\n    </div>\n  );\n}\n","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/Copyright/copyright.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/artUploader/artUploader.jsx",["330","331","332","333","334","335","336","337","338","339","340"],"import React, { useEffect, useCallback } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport utils from '../../utils/utils.js';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AspectRatioSelector from './aspectRatioSelector'\nimport Cropper from 'react-easy-crop'\n\n\n\n\nimport { useState } from 'react';\nimport axios from 'axios';\n\nimport Copyright from '../Copyright/copyright';\n\n//material-ui\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nconst useStyles = makeStyles((theme) => ({\n  img: {\n    maxWidth: '80vw',\n    maxHeight: '300px',\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover',\n    objectPosition: '50% 50%',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    width: '100%',\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(0),\n  },\n  snackbar: {\n    [theme.breakpoints.down('xs')]: {\n      bottom: 90,\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    withoutLabel: {\n      marginTop: theme.spacing(3),\n    },\n    textField: {\n      width: '25ch',\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: theme.palette.primary.main,\n  },\n}));\n\nconst photoIsos = [\n  '100',\n  '200',\n  '400'\n]\n\nconst artTypes = [\n  'Diseño',\n  'Foto'\n];\n\n// const useValues = [\n//   'Impresión',\n//   'Catálogo',\n//   'Privado para clientes',\n// ];\n\nconst categories = [\n  'Abstracto',\n  'Animales',\n  'Arquitectura',\n  'Atardecer',\n  'Cacao',\n  'Café',\n  'Carros',\n  'Ciudades',\n  'Edificios',\n  'Fauna',\n  'Flora',\n  'Lanchas, barcos o yates',\n  'Montañas',\n  'Naturaleza',\n  'Navidad',\n  'Playas',\n  'Puentes',\n  'Surrealista',\n  'Transportes',\n  'Vehículos'\n]\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\nconst aspectRatios = [\n  { id: 1, name: '1:1', aspect: 1, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\n  { id: 2, name: '3:1', aspect: 3, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\n  { id: 3, name: '2:1', aspect: 2, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\n  { id: 4, name: '3:2', aspect: 3/2, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\n  { id: 5, name: '2:3', aspect: 2/3, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\n  { id: 6, name: '1:2', aspect: 1/2, thumb: '', crop: { x: 0, y: 0 }, zoom: 1, cropped: false },\n]\n\nexport default function ArtUploader(props) {\n  const classes = useStyles();\n\n  const [title, setTitle] = useState('');\n  const [artUrl, setArtUrl] = useState();\n  const [thumbnailUrl, setThumbnailUrl] = useState();\n  const [category, setCategory] = useState('');\n  const [description, setDescription] = useState('');\n  const [tags, setTags] = useState(['foto', 'arte']);\n  const [publicId, setPublicId] = useState('');\n  const [originalPhotoHeight, setOriginalPhotoHeight] = useState('');\n  const [originalPhotoWidth, setOriginalPhotoWidth] = useState('');\n  const [originalPhotoIso, setOriginalPhotoIso] = useState('');\n  const [originalPhotoPpi, setOriginalPhotoPpi] = useState('');\n  const [maxPrintHeightCm, setMaxPrintHeightCm] = useState('');\n  const [maxPrintWidthCm, setMaxPrintWidthCm] = useState('');\n  const [artType, setArtType] = useState('');\n  const [location, setLocation] = useState('');\n  const [requiredPhoto, setRequiredPhoto] = useState('');\n  const [uploaded, setUploaded] = useState(false);\n  const [mimeType, setMimeType] = useState('');\n  const [backdrop, setBackdrop] = useState(false);\n  const [croppedArt, setCroppedArt] = useState(aspectRatios);\n  const [uploadedArtMeta, setUploadedArtMeta] = useState({ width:0, height:0, size: 0});\n\n  //Error states.\n  const [errorMessage, setErrorMessage] = useState();\n  const [snackBarAction, setSnackBarAction] = useState();\n  const [snackBarError, setSnackBarError] = useState(false);\n\n  useEffect(() => {\n    if (artType === 'Foto') {\n      handleMaxPrintCalc();\n    }\n  }, [originalPhotoWidth, originalPhotoHeight, originalPhotoPpi, originalPhotoIso]);\n\n  const handleArtTypeChange = (e) => {\n    if (!e.target.value) {\n      setRequiredPhoto(false);\n      setErrorMessage('Por favor indica a qué categoría pertenece el arte.');\n      setSnackBarError(true);\n    } else {\n      if (e.target.value === 'Foto') { setRequiredPhoto(true); }\n      setArtType(e.target.value);\n    }\n  }\n\n  const handleCategoryChange = (e) => {\n    setCategory(e.target.value);\n  }\n\n  const handleClose = () => {\n    props.setOpenArtFormDialog(false);\n  };\n\n  const handleMaxPrintCalc = () => {\n    if (originalPhotoWidth && originalPhotoHeight && originalPhotoPpi && originalPhotoIso) {\n      const [widthCm, heightCm] = utils.maxPrintCalc(originalPhotoWidth, originalPhotoHeight, originalPhotoPpi, originalPhotoIso);\n      setMaxPrintWidthCm(widthCm);\n      setMaxPrintHeightCm(heightCm);\n    } else if (!originalPhotoIso && originalPhotoWidth && originalPhotoHeight && originalPhotoPpi) {\n      setErrorMessage('Por favor indica a el ISO de la foto. ');\n      setSnackBarAction(<Button target=\"_blank\" style={{ color: \"#fff\" }} href=\"https://www.ionos.es/digitalguide/paginas-web/diseno-web/que-son-los-datos-exif/#:~:text=los%20datos%20EXIF.-,EXIF%20con%20el%20bot%C3%B3n%20derecho%20del%20rat%C3%B3n,de%20archivo%20y%20el%20nombre).\">\n        Aprende cómo\n      </Button>);\n      setSnackBarError(true);\n    } else if (originalPhotoIso && (!originalPhotoWidth || !originalPhotoHeight) && originalPhotoPpi) {\n      setErrorMessage('Por favor indica a el Ancho y Alto de la foto. ');\n      setSnackBarAction(<Button target=\"_blank\" style={{ color: \"#fff\" }} href=\"https://www.ionos.es/digitalguide/paginas-web/diseno-web/que-son-los-datos-exif/#:~:text=los%20datos%20EXIF.-,EXIF%20con%20el%20bot%C3%B3n%20derecho%20del%20rat%C3%B3n,de%20archivo%20y%20el%20nombre).\">\n        Aprende cómo\n      </Button>);\n      setSnackBarError(true);\n    } else if (originalPhotoIso && originalPhotoWidth && originalPhotoHeight && !originalPhotoPpi) {\n      setErrorMessage('Por favor indica a los PPI de la foto. ');\n      setSnackBarAction(<Button target=\"_blank\" style={{ color: \"#fff\" }} href=\"https://www.ionos.es/digitalguide/paginas-web/diseno-web/que-son-los-datos-exif/#:~:text=los%20datos%20EXIF.-,EXIF%20con%20el%20bot%C3%B3n%20derecho%20del%20rat%C3%B3n,de%20archivo%20y%20el%20nombre).\">\n        Aprende cómo\n      </Button>);\n      setSnackBarError(true);\n    } else {\n      setErrorMessage('Por favor completa los campos requeridos.');\n      setSnackBarAction(<Button target=\"_blank\" style={{ color: \"#fff\" }} href=\"https://www.ionos.es/digitalguide/paginas-web/diseno-web/que-son-los-datos-exif/#:~:text=los%20datos%20EXIF.-,EXIF%20con%20el%20bot%C3%B3n%20derecho%20del%20rat%C3%B3n,de%20archivo%20y%20el%20nombre).\">\n        Aprende cómo\n      </Button>);\n      setSnackBarError(true);\n    }\n  }\n\n  const allCrops = ()=> {\n    const sum = croppedArt.reduce((prev, art, i)=>{\n      if(art.cropped){\n        return prev + 1;\n      } else {\n        return prev + 0;\n      }\n    }, 0)\n    if(sum == croppedArt.length) {\n      return [null, true];\n    } else {\n      return [croppedArt.length - sum, false];\n    }\n  }\n\n  const handleSubmit = async()=> {\n    try {\n      const [ pendingCrops, isCrops ] = allCrops()\n      if(!isCrops) {\n        setErrorMessage('Por favor realiza los '+ pendingCrops +' recortes restantes de tu arte antes de continuar.');\n        if(pendingCrops == 1){setErrorMessage('Tu arte está casi listo, solo falta realizar '+ pendingCrops +' recorte para continuar.');}\n        setSnackBarError(true);\n      } else {\n      if (title && description && category && tags) {\n        if ((artType === 'Diseño') || (originalPhotoWidth && originalPhotoHeight && originalPhotoPpi && originalPhotoIso)) {\n          setBackdrop(true);\n          await newArtPost();\n        } else {\n          setErrorMessage('Por favor indica ancho, alto, PPI e ISO de la foto. ');\n          setSnackBarError(true);\n        }\n      } else {\n        setErrorMessage('Por favor completa el todos los campos.');\n        setSnackBarError(true);\n      }\n    }\n  } catch (err) {\n    console.log(err);\n    setBackdrop(false);\n    props.setOpenArtFormDialog(false);\n    setErrorMessage('Ocurrió un error inesperado, por favor valida e inicia sesión.');\n    setSnackBarError(true);\n  }\n  }\n\n  const getMimeType = (img) => {\n    const fileReader = new FileReader();\n    let type = '';\n    fileReader.onloadend = function (e) {\n      const arr = (new Uint8Array(e.target.result)).subarray(0, 4);\n      let header = \"\";\n      for (var i = 0; i < arr.length; i++) {\n        header += arr[i].toString(16);\n      }\n\n      switch (header) {\n        case \"89504e47\":\n            type = \"image/png\";\n            break;\n        case \"ffd8ffe0\":\n        case \"ffd8ffe1\":\n        case \"ffd8ffe2\":\n        case \"ffd8ffe3\":\n        case \"ffd8ffe8\":\n            type = \"image/jpeg\";\n            break;\n        default:\n            type = \"unknown\";\n            break;\n    }\n      setMimeType(type);\n    };\n    fileReader.readAsArrayBuffer(img);\n  }\n\n  function blobToFile(theBlob, fileName){\n    //A Blob() is almost a File() - it's just missing the two properties below which we will add\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    return theBlob;\n  }\n  \n  const handleArtChange = async (e) => {\n    let artMeta = {};\n    getMimeType(e.target.files[0]);\n    if (e.target.files && e.target.files[0]) {\n      if(mimeType === 'unknow') {\n        e.target.value = '';\n        setSnackBarError(true);\n        setErrorMessage('Disculpa, pero el formato de tu arte no está permitido por los momentos.');\n        console.log('error, file format not allowed');\n      } else if (e.target.files[0].size >= 5120000) {\n        setSnackBarError(true);\n        setErrorMessage('Disculpa, el arte que subiste es muy grande. El máximo por los momentos es de 5 MB.');\n      } else {\n        var img = new Image();\n        var objectUrl = URL.createObjectURL(e.target.files[0]);\n        img.onload = function () {\n          if (img.width <= 900 && img.height <= 900) {\n            setSnackBarError(true);\n            setErrorMessage('Disculpa, tanto el ancho como el alto de tu arte es menor al establecido. Por favor sube un arte con mayor resolución.');\n          } else if (img.width <= 900) {\n            setSnackBarError(true);\n            setErrorMessage('Disculpa, el ancho de tu arte es menor al establecido. Por favor sube un arte con mayor resolución.');\n          } else if (img.height <= 900) {\n            setSnackBarError(true);\n            setErrorMessage('Disculpa, el alto de tu arte es menor al establecido. Por favor sube un arte con mayor resolución.');\n          } else {\n            artMeta.width = img.width;\n            artMeta.height = img.height;\n            setUploadedArtMeta(artMeta);\n            setUploaded(objectUrl);\n          }\n        };\n        img.src = objectUrl;\n        setArtUrl(e.target.files[0]);\n        artMeta.size = e.target.files[0].size;\n\n      }\n    }\n  }\n\n  const removeCrops = ()=> {\n    croppedArt.map((n)=>{\n      delete n.thumb;\n    });\n  }\n\n  async function newArtPost() {\n    var formData = new FormData();\n    formData.append('title', title);\n    formData.append('description', description);\n    formData.append('category', category);\n    formData.append('tags', tags);\n    formData.append('uploadedArtMeta', uploadedArtMeta);\n    formData.append('crops', JSON.stringify(croppedArt));\n    formData.append('userId', JSON.parse(localStorage.getItem('token')).id);\n    formData.append('prixerUsername', JSON.parse(localStorage.getItem('token')).username);\n    formData.append('status', 'Active');\n    formData.append('publicId', publicId);\n    formData.append('artType', artType);\n    formData.append('originalPhotoWidth', originalPhotoWidth);\n    formData.append('originalPhotoHeight', originalPhotoHeight);\n    formData.append('originalPhotoIso', originalPhotoIso);\n    formData.append('originalPhotoPpi', originalPhotoPpi);\n    formData.append('artLocation', location);\n    formData.append('imageUrl', artUrl);\n    const base_url = process.env.REACT_APP_BACKEND_URL + \"/art/create\";\n    const data = await axios.post(base_url, formData, {'Content-Type': 'multipart/form-data'});\n    if (data.data.success) {\n      props.setOpenArtFormDialog(false);\n      setBackdrop(false);\n      window.location.reload();\n    } else {\n      setErrorMessage('Por favor vuelve a intentarlo, puede que exista algún inconveniente de conexión. Si aún no lo has hecho por favor inicia sesión.');\n      setSnackBarError(true);\n    }\n  }\n\n  return (\n    <div>\n      <Dialog xs={12} open={props.openArtFormDialog} onClose={handleClose} TransitionComponent={Transition}>\n        <Backdrop className={classes.backdrop} open={backdrop}>\n          <CircularProgress color=\"inherit\" />\n          <p>Esto puede tardar unos pocos minutos.</p>\n        </Backdrop>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Comparte tu Arte\n            </Typography>\n            <Button autoFocus color=\"inherit\" onClick={handleSubmit}>\n              Guardar\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <Container component=\"main\" maxWidth=\"xs\">\n          <CssBaseline />\n          <div className={classes.paper}>\n            <form className={classes.form} noValidate>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <Paper variant=\"outlined\" style={{ textAlign: \"center\", 'hover':{background: '#000000'} }}>\n                      <div style={{padding:\"5%\", maxHeight: 410}}>\n                        <input type=\"file\" id=\"inputfile\" accept=\"image/jpeg, image/jpg, image/webp, image/png\"\n                          onChange={handleArtChange} style={{display:\"none\"}} />\n                          {\n                          !uploaded ? \n                            <label htmlFor=\"inputfile\">\n                            <Tooltip title={\"Carga tu arte con un mínimo de 1080px tanto de ancho como de alto. Tu Arte debe pesar máximo 5Mb y estar en formato .jpeg o .png\"}>\n                              <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\n                                Cargar arte\n                              </Button>\n                            </Tooltip>\n                            </label>\n                          :\n                          <AspectRatioSelector \n                          art={uploaded}\n                          croppedArt={croppedArt}\n                          setCroppedArt={setCroppedArt} />\n                          }\n                        </div>\n                  </Paper>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    variant=\"outlined\"\n                    required\n                    fullWidth\n                    id=\"title\"\n                    label=\"Título\"\n                    name=\"title\"\n                    autoComplete=\"title\"\n                    value={title}\n                    onChange={(e) => {\n                      setTitle(e.target.value)\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <FormControl variant=\"outlined\" className={classes.form} xs={12} sm={12} md={12}>\n                    <InputLabel required id=\"artTypeLabel\">Tipo</InputLabel>\n                    <Select\n                      labelId=\"artTypeLabel\"\n                      id=\"artType\"\n                      value={artType}\n                      onChange={handleArtTypeChange}\n                      label=\"artType\"\n                    >\n                      <MenuItem value=\"\">\n                        <em></em>\n                      </MenuItem>\n                      {artTypes.map((n) => (\n                        <MenuItem key={n} value={n}>{n}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                {\n                  artType === 'Foto' &&\n                  <React.Fragment>\n                    <Grid item container xs={12}>\n                      <Grid item xs={4} sm={4}>\n                        <Typography style={{ whiteSpace: 'pre-line', padding: 15, fontSize: '0.7em' }}> Medida del archivo <br /> original en px </Typography>\n                      </Grid>\n                      <Grid item container xs={8} sm={8}>\n                        <Grid item xs={5} sm={5}>\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            required={requiredPhoto}\n                            id=\"originalPhotoWidth\"\n                            label=\"Ancho\"\n                            type=\"number\"\n                            name=\"originalPhotoWidth\"\n                            autoComplete=\"originalPhotoWidth\"\n                            value={originalPhotoWidth}\n                            onChange={(e) => {\n                              setOriginalPhotoWidth(e.target.value);\n                              if (e.target.value < 2000) {\n                                setErrorMessage('La foto original debe tener un ancho mayor a 2.000 px.');\n                                setSnackBarError(true);\n                              }\n                            }}\n                          />\n                        </Grid>\n                        <Typography style={{ padding: 10 }}> x </Typography>\n                        <Grid item xs={5} sm={5}>\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            required={requiredPhoto}\n                            type=\"number\"\n                            id=\"originalPhotoHeight\"\n                            label=\"Alto\"\n                            name=\"originalPhotoHeight\"\n                            autoComplete=\"originalPhotoHeight\"\n                            value={originalPhotoHeight}\n                            onChange={(e) => {\n                              setOriginalPhotoHeight(e.target.value);\n                              if (e.target.value < 2000) {\n                                setErrorMessage('La foto original debe tener un alto mayor a 2.000 px.');\n                                setSnackBarError(true);\n                              }\n                            }}\n                          />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item container xs={12}>\n                      <Grid item xs={6} sm={6}>\n                        <TextField\n                          variant=\"outlined\"\n                          fullWidth\n                          required={requiredPhoto}\n                          type=\"number\"\n                          id=\"originalPhotoPpi\"\n                          label=\"PPI\"\n                          name=\"originalPhotoPpi\"\n                          autoComplete=\"originalPhotoPpi\"\n                          value={originalPhotoPpi}\n                          onChange={(e) => {\n                            setOriginalPhotoPpi(e.target.value);\n                            if (e.target.value < 100) {\n                              setErrorMessage('La foto original debe ser mayor a 100 ppi.');\n                              setSnackBarError(true);\n                            }\n                          }}\n                        />\n                      </Grid>\n                      <Grid item xs={6} sm={6}>\n                        <FormControl variant=\"outlined\" className={classes.form} xs={12} sm={12} md={12}>\n                          <InputLabel required={requiredPhoto} id=\"originalPhotoIsoLabel\">ISO</InputLabel>\n                          <Select\n                            labelId=\"originalPhotoIsoLabel\"\n                            id=\"originalPhotoIso\"\n                            value={originalPhotoIso}\n                            onChange={(e) => {\n                              setOriginalPhotoIso(e.target.value);\n                            }}\n                            label=\"originalPhotoIso\"\n                          >\n                            <MenuItem value=\"\">\n                              <em></em>\n                            </MenuItem>\n                            {photoIsos.map((n) => (\n                              <MenuItem key={n} value={n}>{n}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      </Grid>\n                    </Grid>\n                    {\n                      (originalPhotoIso && originalPhotoWidth && originalPhotoHeight) &&\n                      <Grid item container xs={12}>\n                        <Grid item xs={6} sm={6} style={{ textAlign: 'center' }}>\n                          <Typography style={{ whiteSpace: 'pre-line', padding: 15, fontSize: '1em' }}> Medida máxima <br /> para impresión</Typography>\n                        </Grid>\n                        <Grid item xs={6} sm={6} style={{ textAlign: 'center' }}>\n                          <Typography style={{ whiteSpace: 'pre-line', padding: 15, fontSize: '1.5em' }}> {maxPrintWidthCm} x {maxPrintHeightCm} cm </Typography>\n                        </Grid>\n                      </Grid>\n                    }\n                  </React.Fragment>\n                }\n                <Grid item xs={12} sm={12}>\n                  <FormControl variant=\"outlined\" className={classes.form} xs={12} sm={12} md={12}>\n                    <InputLabel required id=\"categoryLabel\">Categoría</InputLabel>\n                    <Select\n                      labelId=\"categoryLabel\"\n                      id=\"category\"\n                      value={category}\n                      onChange={handleCategoryChange}\n                      label=\"category\"\n                    >\n                      <MenuItem value=\"\">\n                        <em></em>\n                      </MenuItem>\n                      {categories.map((n) => (\n                        <MenuItem key={n} value={n}>{n}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <Autocomplete\n                    multiple\n                    freeSolo\n                    id=\"tags-outlined\"\n                    options={[]}\n                    defaultValue={[]}\n                    value={tags}\n                    onChange={(e, newval, reason) => {\n                      setTags(newval);\n                    }}\n                    renderInput={params => (\n                      <TextField\n                        required\n                        {...params}\n                        onKeyDown={e => {\n                          if (e.key === 13 && e.target.value) {\n                            setTags(tags.concat(e.target.value));\n                          }\n                        }}\n                        variant=\"outlined\"\n                        label=\"Etiquetas\"\n                        placeholder=\"Etiquetas\"\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                  <TextField\n                    autoComplete=\"description\"\n                    required\n                    name=\"description\"\n                    variant=\"outlined\"\n                    fullWidth\n                    id=\"description\"\n                    label=\"Descripción\"\n                    autoFocus\n                    multiline\n                    rows={4}\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    variant=\"outlined\"\n                    fullWidth\n                    id=\"location\"\n                    label=\"Ubicación\"\n                    name=\"location\"\n                    autoComplete=\"location\"\n                    value={location}\n                    onChange={(e) => setLocation(e.target.value)}\n                  />\n                </Grid>\n              </Grid>\n            </form>\n          </div>\n          <Box mt={5}>\n            <Copyright />\n          </Box>\n          <Snackbar\n            open={snackBarError}\n            autoHideDuration={5000}\n            message={errorMessage}\n            className={classes.snackbar}\n            action={snackBarAction}\n            onClose={() => { setSnackBarError(false); setSnackBarAction(false); }}\n          />\n        </Container>\n      </Dialog>\n    </div>\n  );\n}\n","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/orders/orders.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/orders/paymentMethods.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/consumers/consumers.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/products/products.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/dashboard/dashboard.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/adminUser/adminUser.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/products/services.js",["341","342","343","344","345","346","347","348","349","350","351","352"],"\n\nexport const setProductAtts = async (attValue, attributesArr, iProd, iAtt, productsArr, width, height)=> {\n    let att = productsArr;\n    if(att && att.length > 0 && att[iProd] && att[iProd].selection) {\n      att[iProd].selection[iAtt] = attValue;\n    }\n    const pAtt = await getEquation(att[iProd], iProd, att, width, height);\n    return { pAtt: pAtt, att: att }\n    // setTiles(pAtt.pAtt ? [...pAtt.pAtt] : [...pAtt.att]);\n\n  }\n\n\n  export const getAttributes = (products)=> {\n  let lol = products;\n  lol = products.map((p, i)=>{\n    let att = [];\n    p.variants.map((v)=>{\n      if(v.active){\n        if(att.length == 0) {\n        att = [...new Set(v.attributes.flatMap((a) => a))];\n        } else {\n          att.push(...new Set(v.attributes.flatMap((a) => a)));\n        }\n      }\n    });\n    const result = [...new Set(att.flatMap(({name}) => name))];\n    const res1 = [...new Set( \n      result.map( (a)=>{ \n        return  {\n          name: a, \n          value: [...new Set(att.map(v=> { \n            if( ( v.name==a ) && (v.value) ) {\n              return v.value;\n            }\n          }))].filter(a=>a)\n        }\n      })\n    )];\n    p.attributes = res1;\n    p.selection = [];\n    p.selection.length = p.attributes.length;\n\n    return p;\n  });\n  return lol;\n  \n}\n\nexport const structureEquation = (equation, i, width, height)=> {\n  let eq = '';\n  equation.split(/[\\s{}}]+/).map((n, j, arr)=>{\n    if(n=='width'){\n      eq = eq.concat(width[i] || 0);\n    } else if(n=='height'){\n      eq = eq.concat(height[i] || 0);\n    } else {\n      eq = eq.concat(n);\n    }\n  });\n  return eq;\n\n}\n\nexport const getEquation = async (product, iProd, productArr, width, height)=> {\n\n  if( product.selection ){\n    const filteredVars = await product.variants.filter((v, i)=>{\n      if( v.attributes && v.attributes.length != 0 && v.attributes.length == product.selection.length ){\n        return v.attributes.every(a => product.selection.includes(a.value));\n      } else {\n        return false;\n      }\n    });\n    if(filteredVars.length != 0) {\n      if (filteredVars[0].publicPrice.equation && filteredVars[0].prixerPrice.equation ) {\n        productArr[iProd].needsEquation = true;\n        productArr[iProd].publicEquation = eval(structureEquation(filteredVars[0].publicPrice.equation, iProd, width, height) || 0);\n        productArr[iProd].prixerEquation = eval(structureEquation(filteredVars[0].prixerPrice.equation, iProd, width, height) || 0);\n      } else {\n        productArr[iProd].needsEquation = false;\n      }\n    } else {\n      productArr[iProd].needsEquation = false;\n    }\n  } else {\n    productArr[iProd].needsEquation = false;\n    productArr[iProd].publicEquation = ''; \n    productArr[iProd].prixerEquation = ''; \n  }\n\n  return productArr;\n\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/disableProduct.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/readProducts.jsx",["353"],"import React from 'react';\nimport {useEffect, useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from '../adminMain/Title';\nimport axios from 'axios';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Fab from '@material-ui/core/Fab';\n\nexport default function ReadProducts(props) {\n    const history = useHistory();\n    const [rows, setRows] = useState();\n\nuseEffect(()=> {\n  const base_url= process.env.REACT_APP_BACKEND_URL + \"/admin/product/read-all\";\n    axios.get(base_url)\n    .then(response =>{\n        setRows(response.data.products);\n    })\n    .catch(error =>{\n        console.log(error);\n    })\n},[]);\n\n  const handleActive = (product, action)=> {\n    props.setProduct(product);\n    history.push('/admin/product/'+action+'/'+product._id);\n  }\n\n  return (\n    <React.Fragment>\n      <Title>Productos</Title>\n        {\n        rows &&\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\"></TableCell>\n            <TableCell align=\"center\">Imagen</TableCell>\n            <TableCell align=\"center\">Nombre</TableCell>\n            <TableCell align=\"center\">Activo</TableCell>\n            <TableCell align=\"center\">Categoría</TableCell>\n            <TableCell align=\"center\">PVP desde-hasta</TableCell>\n            <TableCell align=\"center\">PVM desde-hasta</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n        {\n        rows &&\n          rows.map((row) => (\n            <TableRow key={row._id}>\n              <TableCell align=\"center\">\n                <Fab color=\"default\" style={{width: 35, height: 35}} aria-label=\"edit\" onClick={(e)=>{handleActive(row, 'update')}}>\n                  <EditIcon/>\n                </Fab>\n              </TableCell>\n              <TableCell align=\"center\"><img alt=\"thumb\" src={row.thumbUrl} style={{width: 50, height: 'auto'}}/></TableCell>\n              <TableCell align=\"center\">{row.name}</TableCell>\n              <TableCell align=\"center\">\n                <Checkbox \n                  disabled\n                  checked={row.active}\n                  color=\"primary\" \n                  inputProps={{ 'aria-label': 'secondary checkbox' }}\n                />\n              </TableCell>\n              <TableCell align=\"center\">{row.category}</TableCell>\n              <TableCell align=\"center\">{row.publicPrice.from}-{row.publicPrice.to}</TableCell>\n              <TableCell align=\"center\">{row.prixerPrice.from}-{row.prixerPrice.to}</TableCell>\n            </TableRow>\n          ))\n        }\n        </TableBody>\n      </Table>\n} \n    </React.Fragment>\n  );\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/updateProduct.jsx",["354"],"import React from 'react';\nimport {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Title from '../adminMain/Title';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControl from '@material-ui/core/FormControl';\nimport clsx from 'clsx';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { useHistory } from 'react-router-dom';\nimport Variants from '../adminMain/products/variants';\nimport Backdrop from '@material-ui/core/Backdrop';\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n  form: {\n      height: 550\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: theme.palette.primary.main,\n  },\n}));\n\nexport default function UpdateAdmin(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [ active, setActive ] = useState(props.product.active);\n    const [ productName, setProductName ] = useState(props.product.name);\n    const [ description, setDescription ] = useState(props.product.description);\n    const [ category, setCategory ] = useState(props.product.category);\n    const [ considerations, setConsiderations ] = useState(props.product.considerations);\n    // const [fixedPublicPrice, setFixedPublicPrice] = useState('');\n    const [fromPublicPrice, setFromPublicPrice] = useState(props.product.publicPrice.from);\n    const [ toPublicPrice, setToPublicPrice ] = useState(props.product.publicPrice.to);\n    // const [ fixedPrixerPrice, setFixedPrixerPrice ] = useState('');\n    const [ fromPrixerPrice, setFromPrixerPrice ] = useState(props.product.prixerPrice.from);\n    const [ toPrixerPrice, setToPrixerPrice ] = useState(props.product.prixerPrice.to);\n    const [loading, setLoading] = useState(false);\n    const [buttonState, setButtonState] = useState(false);\n    const [showVariants, setShowVariants] = useState(false);\n    const [ activeVCrud, setActiveVCrud ] = useState('read');\n    const [ hasSpecialVar, setHasSpecialVar ] = useState(props.product.hasSpecialVar || false);\n    \n    const [ thumbUrl, setThumbUrl ] = useState(props.product.thumbUrl);\n\n    //Error states.\n    const [errorMessage, setErrorMessage] = useState();\n    const [snackBarError, setSnackBarError] = useState(false);\n\n\n    const handleSubmit = async (e)=> {\n      e.preventDefault();\n      if(!active && \n        !productName && \n        !description && \n        !category && \n        !considerations && \n        // !fixedPublicPrice &&\n        !fromPublicPrice &&\n        !toPublicPrice && \n        // !fixedPrixerPrice &&\n        !fromPrixerPrice &&\n        !toPrixerPrice &&\n        !thumbUrl){\n        setErrorMessage('Por favor completa todos los campos requeridos.');\n        setSnackBarError(true);\n        e.preventDefault();\n      } else {\n        setLoading(true);\n        setButtonState(true);\n        \n        const data = {\n            '_id': props.product._id,\n            'thumbUrl': thumbUrl,\n            'active' : active || false,\n            'name' : productName,\n            'description' : description,\n            'category' : category,\n            'considerations' : considerations,\n            publicPrice: {\n                'from': fromPublicPrice,\n                'to': toPublicPrice,\n            },\n            prixerPrice: {\n                'from': fromPrixerPrice,\n                'to': toPrixerPrice,\n            },\n            hasSpecialVar: hasSpecialVar\n        }\n        \n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/product/update\";\n        const response = await axios.post(base_url,data);\n        if(response.data.success === false){\n          setLoading(false);\n          setButtonState(false);\n          setErrorMessage(response.data.message);\n          setSnackBarError(true);\n        } else {\n          setErrorMessage('Actualización de producto exitosa.');\n          setSnackBarError(true);\n          history.push('/admin/product/read');\n        }\n      }\n\n    }\n\n    const handleVariantsClick = ()=> {\n        history.push({pathname:\"/admin/product/\"+props.product._id+\"/variant/read\"});\n        setShowVariants(true); \n        props.setProductEdit(false);\n    }\n\n  return (\n    <React.Fragment>\n    {\n        <Backdrop className={classes.backdrop} open={loading}>\n            <CircularProgress />\n        </Backdrop>\n    }\n        {\n        showVariants ?\n        <>\n        <Grid container justify=\"left\">\n            <Grid item xs={2}>\n                <button href=\"#\" onClick={()=>{setShowVariants(false); props.setProductEdit(true);}}><h2 style={{color:\"rgba(191, 191, 191, 0.5)\", marginTop:0}}>Productos </h2></button>\n            </Grid>\n            <Grid item xs={1}>\n                <button href=\"#\" onClick={()=>{setShowVariants(true); setActiveVCrud('read');}}><h2 style={{color:'#d33f49', marginTop:0}}>Variantes</h2></button>\n            </Grid>\n        </Grid>\n        <Variants product={props.product} activeVCrud={activeVCrud} setActiveVCrud={setActiveVCrud}/>\n        </>\n        :\n        <div>\n        <Grid container justify=\"left\">\n            <Grid item xs={2} style={{color:\"rgba(191, 191, 191, 0.5)\"}}>\n                <Title>Productos </Title>\n            </Grid>\n            <Grid item xs={1}>\n                <a onClick={handleVariantsClick}><h2 style={{color:\"rgba(191, 191, 191, 0.5)\", marginTop:0}}>Variantes</h2></a>\n            </Grid>\n        </Grid>\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={2}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                    <Grid item xs={12} md={6}>\n                        <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            display=\"inline\"\n                            id=\"thumbUrl\"\n                            label=\"ThumbUrl\"\n                            name=\"thumbUrl\"\n                            autoComplete=\"thumbUrl\"\n                            value={thumbUrl}\n                            onChange={(e) => {setThumbUrl(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                    <Grid container xs={6}>\n                      <Grid item xs={6}>\n                          <Checkbox \n                              checked={active}\n                              color=\"primary\" \n                              inputProps={{ 'aria-label': 'secondary checkbox' }}\n                              onChange={()=>{active?setActive(false):setActive(true)}}\n                          /> Habilitado / Visible\n                      </Grid>\n                      <Grid item xs={6}>\n                          <Checkbox\n                              checked={hasSpecialVar}\n                              color=\"primary\" \n                              inputProps={{ 'aria-label': 'secondary checkbox' }}\n                              onChange={()=>{hasSpecialVar?setHasSpecialVar(false):setHasSpecialVar(true)}}\n                          /> ¿Tiene variables especiales?\n                      </Grid>\n                    </Grid>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            display=\"inline\"\n                            id=\"productName\"\n                            label=\"Nombre\"\n                            name=\"productName\"\n                            autoComplete=\"productName\"\n                            value={productName}\n                            onChange={(e) => {setProductName(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            display=\"inline\"\n                            fullWidth\n                            id=\"category\"\n                            label=\"Categoría\"\n                            name=\"category\"\n                            autoComplete=\"category\"\n                            value={category}\n                            onChange={(e) => {setCategory(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            multiline\n                            fullWidth\n                            rows={2}\n                            id=\"description\"\n                            label=\"Descripción\"\n                            name=\"description\"\n                            autoComplete=\"description\"\n                            value={description}\n                            onChange={(e) => {setDescription(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            multiline\n                            rows={2}\n                            id=\"considerations\"\n                            label=\"Consideraciones\"\n                            name=\"considerations\"\n                            autoComplete=\"considerations\"\n                            value={considerations}\n                            onChange={(e) => {setConsiderations(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                </Grid>\n                <Grid container style={{marginTop: 20}}>\n                    <Title>PVP</Title>\n                </Grid>\n                <Grid container spacing={2}>\n                {/* <Grid item xs={4} md={4}>\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                    <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        id=\"fixedPublicPrice\"\n                        label=\"Fijo\"\n                        name=\"fixedPublicPrice\"\n                        autoComplete=\"fixedPublicPrice\"\n                        value={fixedPublicPrice}\n                        onChange={(e) => {setFixedPublicPrice(e.target.value);}}\n                    />\n                    </FormControl>\n                </Grid> */}\n                <Grid item xs={4} md={5}>\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                    <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        id=\"fromPublicPrice\"\n                        label=\"Desde\"\n                        name=\"fromPublicPrice\"\n                        autoComplete=\"fromPublicPrice\"\n                        value={fromPublicPrice}\n                        onChange={(e) => {setFromPublicPrice(e.target.value);}}\n                    />\n                    </FormControl>\n                </Grid>\n                <Grid item xs={4} md={5}>\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                    <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        id=\"toPublicPrice\"\n                        label=\"Hasta\"\n                        name=\"toPublicPrice\"\n                        autoComplete=\"toPublicPrice\"\n                        value={toPublicPrice}\n                        onChange={(e) => {setToPublicPrice(e.target.value);}}\n                    />\n                    </FormControl>\n                </Grid>\n                </Grid>\n                <Grid container style={{marginTop: 20}}>\n                    <Title>PVM</Title>\n                </Grid>\n                <Grid container spacing={2}>\n                {/* <Grid item xs={4} md={4}>\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                    <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        id=\"fixedPrixerPrice\"\n                        label=\"Fijo\"\n                        name=\"fixedPrixerPrice\"\n                        autoComplete=\"fixedPrixerPrice\"\n                        value={fixedPrixerPrice}\n                        onChange={(e) => {setFixedPrixerPrice(e.target.value);}}\n                    />\n                    </FormControl>\n                </Grid> */}\n                <Grid item xs={4} md={5}>\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                    <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        id=\"fromPrixerPrice\"\n                        label=\"Desde\"\n                        name=\"fromPrixerPrice\"\n                        autoComplete=\"fromPrixerPrice\"\n                        value={fromPrixerPrice}\n                        onChange={(e) => {setFromPrixerPrice(e.target.value);}}\n                    />\n                    </FormControl>\n                </Grid>\n                <Grid item xs={4} md={5}>\n                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                    <TextField\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        id=\"toPrixerPrice\"\n                        label=\"Hasta\"\n                        name=\"toPrixerPrice\"\n                        autoComplete=\"toPrixerPrice\"\n                        value={toPrixerPrice}\n                        onChange={(e) => {setToPrixerPrice(e.target.value);}}\n                    />\n                    </FormControl>\n                </Grid>\n                </Grid>\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={buttonState} style={{ marginTop: 20}}>\n                Actualizar\n              </Button>\n            </Grid>\n        </form>\n        </div>\n        }\n        <Snackbar\n          open={snackBarError}\n          autoHideDuration={1000}\n          message={errorMessage}\n          className={classes.snackbar}\n        />\n    </React.Fragment>\n  );\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/createProduct.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminCrud/disableAdmin.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminCrud/createAdmin.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminCrud/readAdmins.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminCrud/updateAdmin.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/dashboard/orders.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/dashboard/deposits.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/dashboard/chart.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/orders/orderServices.js",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/consumerCrud/readConsumers.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/consumerCrud/updateConsumer.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/consumerCrud/createConsumer.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/paymentMethodCrud/createPaymentMethod.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/orderCrud/updateOrder.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/paymentMethodCrud/readPaymentMethods.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/orderCrud/createOrder/createOrder.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/paymentMethodCrud/updatePaymentMethod.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/products/variants.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/Title.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/consumerCrud/consumerServices.js",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/searchBar/searchBar.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/orderCrud/createOrder/orderDetails.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/orderCrud/createOrder/orderBasicInfo.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/variants/readVariants.jsx",["355","356","357","358","359","360","361","362","363","364","365","366","367","368"],"import React from 'react';\nimport {useEffect, useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from '../../adminMain/Title';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Fab from '@material-ui/core/Fab';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function ReadVariants(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [rows, setRows] = useState();\n    const base_url= process.env.REACT_APP_BACKEND_URL + \"/product/read\";\n\nuseEffect(()=> {\n    axios.post(base_url, props.product)\n    .then(response =>{\n        response.data.products[0].variants &&\n            setRows(response.data.products[0].variants);\n    })\n    .catch(error =>{\n        console.log(error);\n    })\n},[]);\n\n  const handleActive = (variant, action)=> {\n    props.setVariant(variant);\n    action == 'create' &&\n    history.push('/admin/product'+'/'+props.product._id+'/variant/'+action);\n    action == 'read' &&\n    history.push('/admin/product'+'/'+props.product._id+'/variant/'+action);\n    action == 'update' &&\n    history.push('/admin/product'+'/'+props.product._id+'/variant/'+variant._id+'/'+action);\n  }\n\n  return (\n    <React.Fragment>\n        {\n        rows &&\n      <Table size=\"small\" style={{overflow: 'auto'}}>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\"></TableCell>\n            <TableCell align=\"center\">Imagen</TableCell>\n            <TableCell align=\"center\">Nombre</TableCell>\n            <TableCell align=\"center\">Activo</TableCell>\n            <TableCell align=\"center\">Descripción</TableCell>\n            <TableCell align=\"center\">PVP desde-hasta</TableCell>\n            <TableCell align=\"center\">PVM desde-hasta</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n        {\n        rows &&\n          rows.map((row) => (\n            <TableRow key={row._id}>\n              <TableCell align=\"center\">\n                <Fab color=\"default\" style={{width: 35, height: 35}} aria-label=\"edit\" onClick={(e)=>{handleActive(row, 'update')}}>\n                  <EditIcon/>\n                </Fab>\n              </TableCell>\n              <TableCell align=\"center\"><img src={row.thumbUrl} style={{width: 50, height: 'auto'}}/></TableCell>\n              <TableCell align=\"center\">{row.name}</TableCell>\n              <TableCell align=\"center\">\n                <Checkbox \n                  disabled\n                  checked={row.active}\n                  color=\"primary\" \n                  inputProps={{ 'aria-label': 'secondary checkbox' }}\n                />\n              </TableCell>\n              <TableCell align=\"center\">{row.description}</TableCell>\n              <TableCell align=\"center\">{row.publicPrice.from}-{row.publicPrice.to}</TableCell>\n              <TableCell align=\"center\">{row.prixerPrice.from}-{row.prixerPrice.to}</TableCell>\n            </TableRow>\n          ))\n        }\n        </TableBody>\n      </Table>\n} \n    </React.Fragment>\n  );\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/productCrud/variants/createVariant.jsx",["369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412"],"import React from 'react';\nimport {useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Title from '../../adminMain/Title';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport clsx from 'clsx';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { nanoid } from 'nanoid';\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: theme.palette.primary.main,\n  },\n}));\n\nexport default function CreateVariant(props) {\n    const classes = useStyles();\n    const [ active, setActive ] = useState(props.variant && props.variant.active || false);\n    const [ attributes, setAttributes ] = useState(props.variant && props.variant.attributes || [{ name:'', value:''}]);\n    const [ buttonAttState, setButtonAttState] = useState();\n    const [ variantName, setVariantName ] = useState(props.variant && props.variant.name || '');\n    const [ description, setDescription ] = useState(props.variant && props.variant.description || '');\n    const [ category, setCategory ] = useState(props.variant && props.variant.category || '');\n    const [ considerations, setConsiderations ] = useState(props.variant && props.variant.considerations || '');\n    const [publicPriceEq, setPublicPriceEq] = useState(props.variant && props.variant.publicPrice.equation || '');\n    const [fromPublicPrice, setFromPublicPrice] = useState(props.variant && props.variant.publicPrice.from || '');\n    const [ toPublicPrice, setToPublicPrice ] = useState(props.variant && props.variant.publicPrice.to || '');\n    const [ prixerPriceEq, setPrixerPriceEq ] = useState(props.variant && props.variant.prixerPrice.equation || '');\n    const [ fromPrixerPrice, setFromPrixerPrice ] = useState(props.variant && props.variant.prixerPrice.from || '');\n    const [ toPrixerPrice, setToPrixerPrice ] = useState(props.variant && props.variant.prixerPrice.to || '');\n    const [loading, setLoading] = useState(false);\n    const [buttonState, setButtonState] = useState(false);\n    const history = useHistory();\n\n    const [ thumbUrl, setThumbUrl ] = useState(props.variant && props.variant.thumbUrl || '');\n\n    //Error states.\n    const [errorMessage, setErrorMessage] = useState();\n    const [snackBarError, setSnackBarError] = useState(false);\n    const [passwordError, setPasswordError] = useState();\n    const [emailError, setEmailError] = useState();\n\n    const insertVariants = (productData, variants)=> {\n        let updatedVariants = productData;\n        updatedVariants.variants = productData.variants.filter((v)=>{ if(v._id != props.variant._id) return v});\n        variants._id = props.variant._id\n        updatedVariants.variants.unshift(variants);\n\n        return updatedVariants;\n    }\n\n\n    const handleSubmit = async (e)=> {\n      e.preventDefault();\n      if(!active && \n        !variantName && \n        !description && \n        !category && \n        !considerations && \n        !publicPriceEq &&\n        !fromPublicPrice &&\n        !toPublicPrice && \n        !prixerPriceEq &&\n        !fromPrixerPrice &&\n        !toPrixerPrice &&\n        !thumbUrl){\n        setErrorMessage('Por favor completa todos los campos requeridos.');\n        setSnackBarError(true);\n        e.preventDefault();\n      } else {\n        setLoading(true);\n        setButtonState(true);\n\n        const productData = props.product;\n\n        const variants = {\n            '_id': props.variant && props.variant._id || nanoid(),\n            'thumbUrl': thumbUrl,\n            'active' : active,\n            'name' : variantName,\n            'description' : description,\n            'category' : category,\n            'considerations' : considerations,\n            publicPrice: {\n                'from': fromPublicPrice,\n                'to': toPublicPrice,\n                'equation': publicPriceEq\n            },\n            prixerPrice: {\n                'from': fromPrixerPrice,\n                'to': toPrixerPrice,\n                'equation': prixerPriceEq\n            }\n        }\n\n        variants.attributes ?\n            variants.attributes.push(...attributes)\n        : variants.attributes = attributes;\n        let updatedWithVariants = {};\n        \n        if(props.variant) {\n            updatedWithVariants = insertVariants(productData, variants);\n        } else {\n            productData.variants.unshift(variants);\n            updatedWithVariants = productData;\n        }\n        \n        const base_url= process.env.REACT_APP_BACKEND_URL + \"/product/update\";\n        const response = await axios.post(base_url,updatedWithVariants)\n\n        if(response.data.success === false){\n          setLoading(false);\n          setButtonState(false);\n          setErrorMessage(response.data.message);\n          setSnackBarError(true);\n          props.setVariant('');\n        } else {\n          setErrorMessage('Actualización de producto exitoso.');\n          setSnackBarError(true);\n          setActive('');\n          setThumbUrl('');\n          setVariantName('');\n          setDescription('');\n          setCategory('');\n          setConsiderations('');\n          setPublicPriceEq('');\n          setFromPublicPrice('');\n          setToPublicPrice('');\n          setPrixerPriceEq('');\n          setFromPrixerPrice('');\n          setToPrixerPrice('');\n          props.setVariant('');\n          setLoading(false);\n          history.push({pathname:\"/admin/product/read\"});\n        }\n      }\n\n    }\n\n  return (\n    <React.Fragment>\n    {\n    <Backdrop className={classes.backdrop} open={loading}>\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n    }\n      <Title>Variantes</Title>\n        <form noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={2}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                    <Grid item xs={12} md={6}>\n                        <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            display=\"inline\"\n                            id=\"thumbUrl\"\n                            label=\"ThumbUrl\"\n                            name=\"thumbUrl\"\n                            product         value={thumbUrl}\n                            onChange={(e) => {setThumbUrl(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                        <Checkbox\n                            checked={active}\n                            color=\"primary\" \n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            onChange={()=>{active?setActive(false):setActive(true)}}\n                        /> Habilitado / Visible\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <FormControl variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            display=\"inline\"\n                            id=\"variantName\"\n                            label=\"Nombre\"\n                            name=\"variantName\"\n                            autoComplete=\"variantName\"\n                            value={variantName}\n                            onChange={(e) => {setVariantName(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            multiline\n                            fullWidth\n                            rows={2}\n                            id=\"description\"\n                            label=\"Descripción\"\n                            name=\"description\"\n                            autoComplete=\"description\"\n                            value={description}\n                            onChange={(e) => {setDescription(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            multiline\n                            rows={2}\n                            id=\"considerations\"\n                            label=\"Consideraciones\"\n                            name=\"considerations\"\n                            autoComplete=\"considerations\"\n                            value={considerations}\n                            onChange={(e) => {setConsiderations(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                </Grid>\n                <Grid container style={{marginTop: 20}}>\n                    <h3>Precios Público</h3>\n                </Grid>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={12}>\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            id=\"publicPriceEquation\"\n                            label=\"Ecuación\"\n                            name=\"publicPriceEquation\"\n                            autoComplete=\"publicPriceEquation\"\n                            value={publicPriceEq}\n                            onChange={(e) => {setPublicPriceEq(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                    <Grid container xs={12} md={12} spacing={2} style={{margin:0}}>\n                        <Grid item xs={6} md={6}>\n                            <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"fromPublicPrice\"\n                                label=\"Desde\"\n                                name=\"fromPublicPrice\"\n                                autoComplete=\"fromPublicPrice\"\n                                value={fromPublicPrice}\n                                onChange={(e) => {setFromPublicPrice(e.target.value);}}\n                            />\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={6} md={6}>\n                            <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"toPublicPrice\"\n                                label=\"Hasta\"\n                                name=\"toPublicPrice\"\n                                autoComplete=\"toPublicPrice\"\n                                value={toPublicPrice}\n                                onChange={(e) => {setToPublicPrice(e.target.value);}}\n                            />\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container style={{marginTop: 20}}>\n                    <h3>Precios Prixers</h3>\n                </Grid>\n                <Grid container spacing={2}>\n                    <Grid item xs={4} md={4}>\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            id=\"prixerPriceEq\"\n                            label=\"Ecuación\"\n                            name=\"prixerPriceEq\"\n                            autoComplete=\"prixerPriceEq\"\n                            value={prixerPriceEq}\n                            onChange={(e) => {setPrixerPriceEq(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={4} md={5}>\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            id=\"fromPrixerPrice\"\n                            label=\"Desde\"\n                            name=\"fromPrixerPrice\"\n                            autoComplete=\"fromPrixerPrice\"\n                            value={fromPrixerPrice}\n                            onChange={(e) => {setFromPrixerPrice(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={4} md={5}>\n                        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            id=\"toPrixerPrice\"\n                            label=\"Hasta\"\n                            name=\"toPrixerPrice\"\n                            autoComplete=\"toPrixerPrice\"\n                            value={toPrixerPrice}\n                            onChange={(e) => {setToPrixerPrice(e.target.value);}}\n                        />\n                        </FormControl>\n                    </Grid>\n                </Grid>\n                <Grid container xs={12} spacing={2}>\n                    <Grid container style={{marginTop: 20}}>\n                        <h3>Atributos</h3>\n                    </Grid>\n                        {   \n                        attributes &&\n                            attributes.map((att, i)=>(\n                            <Grid container spacing={2} xs={12} style={{marginBottom: 10}}>\n                                <Grid item xs={12} md={5}>\n                                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                                    <TextField\n                                        variant=\"outlined\"\n                                        required\n                                        fullWidth\n                                        id=\"attribute\"\n                                        label=\"Nombre\"\n                                        name=\"attribute\"\n                                        autoComplete=\"attribute\"\n                                        value={att.name}\n                                        onChange={(e) => {\n                                            setAttributes(attributes.slice(0,i).concat({'name': e.target.value, 'value': att.value}).concat(attributes.slice(i+1,)));\n                                        }}\n                                    />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} md={5}>\n                                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\" xs={12} fullWidth={true}>\n                                    <TextField\n                                        variant=\"outlined\"\n                                        required\n                                        fullWidth\n                                        id=\"attributeValue\"\n                                        label=\"Valor\"\n                                        name=\"attributeValue\"\n                                        autoComplete=\"attributeValue\"\n                                        value={att.value}\n                                        onChange={(e) => {\n                                            setAttributes(attributes.slice(0,i).concat({'name': att.name, 'value': e.target.value}).concat(attributes.slice(i+1,)));\n                                        }}\n                                    />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={2}>\n                                <Button variant=\"contained\" color=\"primary\" onClick={()=>{ setAttributes(attributes.slice(0, i).concat(attributes.slice(i+1,)))}} disabled={buttonState} style={{ marginTop: 20}}>\n                                    -\n                                </Button>\n                                </Grid>\n                            </Grid>\n                            ))\n                        }\n                    <Grid item xs={12} align=\"center\">\n                    <Button variant=\"contained\" color=\"default\" onClick={()=>{setAttributes(attributes.concat({ name:'', value:'' }))}} disabled={buttonState} style={{ marginTop: 20}}>\n                        +\n                    </Button>\n                    </Grid>\n                </Grid>\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={buttonState} style={{ marginTop: 20}}>\n                    {props.variant && \"Actualizar\" || \"Crear\"}\n                </Button>\n            </Grid>\n        </form>\n        <Snackbar\n          open={snackBarError}\n          autoHideDuration={1000}\n          message={errorMessage}\n          className={classes.snackbar}\n        />\n    </React.Fragment>\n  );\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/artUploader/aspectRatioSelector.jsx",["413","414","415","416","417","418","419","420","421","422"],"import React, { useEffect, useImperativeHandle } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useState, useCallback } from 'react';\nimport EasyCropper from './easyCropper'\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport PhotoLibraryIcon from '@material-ui/icons/PhotoLibrary';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { Typography } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport getCroppedImg from '../../utils/cropImage';\nimport CropIcon from '@material-ui/icons/Crop';\n\nconst useStyles = makeStyles((theme) => ({\n    iconTabs: {\n      flexGrow: 1,\n      width: '100%',\n      margin: 'auto',\n      marginBottom: 50\n    },\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    paper: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'left',\n      // maxWidth: 850,\n      flexGrow: 1,\n      overflow: 'visible'\n    },\n    icon: {\n      marginRight: theme.spacing(2),\n    },\n    cardGrid: {\n        position: 'relative'\n    },\n    img: {\n      maxWidth: '100%',\n      maxHeight: '200px',\n      width: '100%',\n      height: '100%',\n      objectFit: 'contain',\n      objectPosition: '50% 50%'\n    },\n    tab: {\n        minWidth: 100\n    },\n    button: {\n        width: \"10px\",\n    }\n}));\n\n\nexport default function AspectRatioSelector(props) {\n    const { art, croppedArt, setCroppedArt } = props;\n    const classes = useStyles();\n    const [tabValue, setTabValue] = useState(1);\n    const croppedArtTemp = croppedArt;\n    const [croppedAreaPixels, setCroppedAreaPixels] = useState();\n\n    //Error states.\n    const [errorMessage, setErrorMessage] = useState();\n    const [snackBarAction, setSnackBarAction] = useState();\n    const [snackBarError, setSnackBarError] = useState(false);\n\n    useEffect(()=>{\n    });\n\n    const handleChange = (event, newValue) => {\n        setTabValue(newValue);\n    };\n\nconst updateCrop = (i)=> {    \n    croppedArtTemp[i].thumb = '';\n    croppedArtTemp[i].cropped = false;\n    setCroppedArt([...croppedArtTemp]);\n\n}\n\n\n  const handleCrop = useCallback(async (i) => {\n    try {\n      const { croppedImg, croppedImgFile } = await getCroppedImg(art,croppedAreaPixels)\n      croppedArtTemp[i].thumb = croppedImg;\n      croppedArtTemp[i].thumbFile = croppedImgFile;\n      croppedArtTemp[i].cropped = true;\n      croppedArtTemp[i].croppedAreaPixels = croppedAreaPixels;\n      setCroppedArt([...croppedArtTemp]);\n    } catch (e) {\n      console.error(e)\n    }\n  }, [croppedAreaPixels])\n\n\n    return (\n        <div className={classes.root}>\n        {\n            tabValue === 0 ?\n            <Grid item xs={12} sm={12} md={12} style={{position:'relative', height:300, display:'flex', flexDirection:'column', justifyContent:'center'}}>\n                <label htmlFor=\"inputfile\" style={{cursor:\"pointer\"}}>\n                    <Tooltip title={\"Carga tu arte con un mínimo de 1080px tanto de ancho como de alto. Tu Arte debe pesar máximo 5Mb y estar en formato .jpeg o .png\"}>\n                        <img className={classes.img} alt=\"Uploaded\" src={art} />\n                    </Tooltip>\n                </label>\n            </Grid>\n            :\n            croppedArt &&\n            croppedArt.map((ar, index)=>(\n            ar.id === tabValue &&\n            <Grid item xs={12} sm={12} md={12} style={{position:'relative', height: 300, display:'flex', flexDirection:'column', justifyContent:'center'}}>\n                {\n                croppedArt[index].thumb == '' ?\n                        <EasyCropper \n                        art={art}\n                        ar={ar}\n                        croppedArt={croppedArt}\n                        setCroppedArt={setCroppedArt}\n                        index={index}\n                        setCroppedAreaPixels={setCroppedAreaPixels}\n                        />\n                :\n                <Grid item xs={12} sm={12} md={12} style={{position:'relative', height: 300, display:'flex', flexDirection:'column', justifyContent:'center'}}>\n                        <Tooltip title={\"Genera el recorte para recomendar a tus clientes las mejores secciones de tu arte.\"}>\n                            <img className={classes.img} alt=\"Uploaded\" src={croppedArtTemp[index].thumb} />\n                        </Tooltip>\n                </Grid>\n                }\n                {\n                croppedArt[index].cropped ?\n                <Grid item xs={12} sm={12} md={12} style={{position: 'absolute', right: 5, bottom: 5}}>\n                    \n                    <IconButton color=\"secondary\" aria-label=\"add an alarm\" style={{padding: 0}} onClick={()=>{updateCrop(index)}}>\n                        <Typography>Recortar</Typography>\n                        <CropIcon />\n                    </IconButton>\n                </Grid>\n                :\n                <Grid item xs={12} sm={12} md={12} style={{position: 'absolute', right: 5, bottom: 5, zIndex: 20}}>\n                    \n                    <IconButton color=\"secondary\" aria-label=\"add an alarm\" style={{padding: 0}} onClick={()=>{handleCrop(index)}}>\n                        <Typography>Listo</Typography>\n                        <CheckCircleOutlineIcon />\n                    </IconButton>\n                </Grid>\n                }\n            </Grid>\n        ))\n        }\n            {/* <Grid xs={12} sm={12} md={12}><Typography>Selecciona cómo quieres recomendar el arte a tus clientes:</Typography></Grid> */}\n            <Grid xs={12} sm={12} md={12} style={{ maxHeight: 80}}>\n                <Paper square className={classes.iconTabs}>\n                    <Tabs\n                    value={tabValue}\n                    onChange={handleChange}\n                    variant=\"fullWidth\"\n                    indicatorColor=\"primary\"\n                    textColor=\"secondary\"\n                    variant=\"scrollable\"\n                    scrollButtons=\"auto\"\n                    >\n                    \n                    <Tab className={classes.tab} icon={<PhotoLibraryIcon />} label=\"Original\" />\n                    {\n                    croppedArt &&\n                    croppedArt.map((ar)=>(\n                        <Tab className={classes.tab} icon={<PhotoLibraryIcon />} label={ar.name} id={ar.id} />\n                    ))\n                    }\n                    </Tabs>\n                </Paper> \n            </Grid>\n          </div>\n  )\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/simpleDialog/simpleDialog.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/prixerGrid/prixerGrid.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/utils/cropImage.js",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/sharedComponents/artUploader/easyCropper.jsx",["423","424","425","426","427"],"import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useState, useCallback } from 'react';\nimport Cropper from 'react-easy-crop'\n\nconst useStyles = makeStyles((theme) => ({}));\n\n\nexport default function EasyCropper(props) {\n    const  { art, ar, croppedArt, setCroppedArt, index, setCroppedAreaPixels  } = props;\n    const classes = useStyles();\n    const [aspect, setAspect] = useState(croppedArt[index].aspect);\n    const [crop, setCrop] = useState(croppedArt[index].crop);\n    const [zoom, setZoom] = useState(croppedArt[index].zoom);\n    const croppedArtTemp = croppedArt;\n    \n    const onCropComplete = useCallback(async (croppedArea, croppedAreaPixels) => {\n        croppedArtTemp[index].crop.x = croppedAreaPixels.x;\n        croppedArtTemp[index].crop.y = croppedAreaPixels.y;\n        setCroppedAreaPixels(croppedAreaPixels);\n        setCroppedArt(croppedArtTemp);     \n    });\n\n    return (\n        // <div style={{display:'flex', flexDirection:'column', justifyContent:'center'}}>\n            <Cropper\n            image={art}\n            crop={crop}\n            zoom={zoom}\n            aspect={aspect}\n            onCropChange={setCrop}\n            onCropComplete={onCropComplete}\n            onZoomChange={setZoom}\n            />\n        // </div>\n  )\n}","/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/admin/adminMain/listItems.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/prixerOptions/prixerOptions.jsx",[],"/home/tomas/Escritorio/Prixelart_web/prixelart-frontend/src/prixerProfile/userData/userData.jsx",["428","429"],"// Debo hacer los unit y functional tests.\n// Debo migrar los states a Redux.\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { useState, useEffect } from 'react';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { IconButton } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Avatar from '@material-ui/core/Avatar';\nimport AddIcon from '@material-ui/icons/Add';\nimport Backdrop from '@material-ui/core/Backdrop';\n\nconst useStyles = makeStyles((theme) => ({\n  loading: {\n    display: 'flex',\n    '& > * + *': {\n      marginLeft: theme.spacing(2),\n    },\n    marginLeft: \"50vw\",\n    marginTop: \"50vh\"\n  },\n  root: {\n    flexGrow: 1,\n    paddingTop: 73,\n    width: '100%',\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: 'auto',\n    width: '100%',\n  },\n  image: {\n    width: 128,\n    height: 128,\n  },\n  img: {\n    margin: 'auto',\n    display: 'block',\n    maxWidth: '100%',\n    maxHeight: '100%',\n  },\n  avatar: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: \"#fff\",\n    width: '160px',\n    height: '160px'\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: theme.palette.primary.main,\n  },\n}));\n\nexport default function UserData(props) {\n  const classes = useStyles();\n  const [prixerDataState, setPrixerDataState] = useState('read');\n  const [username, setUsername] = useState();\n  const [email, setEmail] = useState();\n  const [firstName, setFirstName] = useState();\n  const [lastName, setLastName] = useState();\n  const [specialty, setSpecialty] = useState();\n  const [instagram, setInstagram] = useState();\n  const [description, setDescription] = useState();\n  const [dateOfBirth, setDateOfBirth] = useState();\n  const [phone, setPhone] = useState();\n  const [country, setCountry] = useState();\n  const [city, setCity] = useState('');\n  const [ready, setReady] = useState(false);\n  const [prixerExists, setPrixerExists] = useState(false);\n  const [avatarObj, setAvatarObj] = useState('');\n  const [profilePic, setProfilePic] = useState('');\n  const [inputChange, setInputChange] = useState(false);\n  const [backdrop, setBackdrop] = useState(true);\n\n  useEffect(()=> {\n    const base_url= process.env.REACT_APP_BACKEND_URL + \"/prixer/read\";\n    const data = {\n      username: props.prixerUsername\n    }\n\n    axios.post(base_url, data)\n    .then(response =>{\n        setUsername(response.data.username);\n        setEmail(response.data.email);\n        setFirstName(response.data.firstName);\n        setLastName(response.data.lastName);\n        setSpecialty(response.data.specialty);\n        setInstagram(response.data.instagram);\n        setDescription(response.data.description);\n        setDateOfBirth(response.data.dateOfBirth);\n        setPhone(response.data.phone);\n        setCountry(response.data.country);\n        setCity(response.data.city);\n        setAvatarObj(response.data.avatar);\n        setProfilePic(response.data.avatar);\n        setReady(true);\n        setBackdrop(false);\n        setPrixerExists(true);\n    })\n    .catch(error =>{\n        console.log(error);\n    })\n}, [props.prixerUsername]);\n \n\n  const handleProfileDataEdit = async ()=> {\n    if(prixerDataState === 'edit') {\n      setBackdrop(true);\n      var formData = new FormData();\n      if(inputChange) { \n        formData.append('avatar', profilePic);\n      }\n      formData.append('username', username);\n      formData.append('firstName', firstName);\n      formData.append('email', email);\n      formData.append('lastName', lastName);\n      formData.append('specialty', specialty);\n      formData.append('instagram', instagram);\n      formData.append('description', description);\n      formData.append('dateOfBirth', dateOfBirth);\n      formData.append('phone', phone);\n      formData.append('country', country);\n      formData.append('city', city);\n      const base_url= process.env.REACT_APP_BACKEND_URL + \"/prixer/update\";\n      const response = await axios.post(base_url, formData, {'Content-Type': 'multipart/form-data'});\n      if (response.data) {\n            setUsername(response.data.username);\n            setEmail(response.data.email);\n            setFirstName(response.data.firstName);\n            setLastName(response.data.lastName);\n            setSpecialty(response.data.specialty);\n            setInstagram(response.data.instagram);\n            setDescription(response.data.description);\n            setDateOfBirth(response.data.dateOfBirth);\n            setPhone(response.data.phone);\n            setCountry(response.data.country);\n            setCity(response.data.city);\n            setAvatarObj(response.data.avatar);\n            setProfilePic(response.data.avatar);\n            setReady(true);\n            setBackdrop(false);\n            setPrixerExists(true);\n            setPrixerDataState('read');\n          } else{\n            setReady(true);\n            setBackdrop(false);\n          }\n        } else {\n          setPrixerDataState('edit');\n        }\n  }\n\n\n  const onImageChange = async(e) => {\n    if (e.target.files && e.target.files[0]) {\n      setInputChange(true);\n      setAvatarObj(URL.createObjectURL(e.target.files[0]));\n      setProfilePic(e.target.files[0] )\n    }\n   }\n\n  return (\n    prixerExists ?\n    <div className={classes.root}>\n      <Backdrop className={classes.backdrop} open={backdrop}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <Paper className={classes.paper}>\n        <Grid container spacing={1}>\n          {\n          JSON.parse(localStorage.getItem('token')) &&\n          JSON.parse(localStorage.getItem('token')).username === username &&\n          <Grid>\n              <IconButton title=\"Profile Edit\" color=\"primary\" component=\"span\" onClick={handleProfileDataEdit}>\n                <EditIcon />\n              </IconButton>\n          </Grid>\n          }\n          { prixerDataState === 'read' &&\n          <Grid item xs={12} container>\n            <Grid item xs container direction=\"column\" spacing={2}>\n              <Grid item xs>\n                <Typography gutterBottom variant=\"subtitle1\"> \n                  {firstName + ' ' + lastName} \n                </Typography>\n                <Typography variant=\"body1\" gutterBottom>\n                  {specialty === 'Ambas'? 'Fotografía y Diseño': specialty}\n                </Typography>\n                <Typography variant=\"body1\" color=\"textSecondary\">\n                  {username} | ig: {instagram}\n                </Typography>\n              </Grid>\n            </Grid>\n            {/* <Typography variant=\"body1\" color=\"textSecondary\" maxWidth=\"60%\">\n                  {description}\n            </Typography> */}\n          <Grid item>\n          {\n            avatarObj ?\n              <Avatar className={classes.avatar}>\n                <label htmlFor=\"file-input\">\n                  <img src={profilePic} alt=\"Prixer profile avatar\" style={{maxHeight: 200}}/>\n                </label>\n              </Avatar>\n            :\n            JSON.parse(localStorage.getItem('token')) &&\n            JSON.parse(localStorage.getItem('token')).username === username &&\n            <Avatar className={classes.avatar}>\n              <label htmlFor=\"file-input\">\n                <img src=\"/PrixLogo.png\" alt=\"Prixer profile avatar\" style={{maxHeight: 200, height: 120 }} onClick={handleProfileDataEdit}/>\n              </label>\n            </Avatar>\n          }\n          </Grid>\n          </Grid>\n          }\n          { prixerDataState === 'edit' &&\n          <Grid item xs={12} container>\n            <Grid item xs container direction=\"column\">\n              <Grid item xs>\n                <Grid item xs={7} style={{marginBottom:10}}>\n                  <TextField id='firstName' variant=\"outlined\" label=\"Nombre\" value={firstName} onChange={(e)=> {setFirstName(e.target.value)}} />\n                </Grid>\n                <Grid item xs={7}>  \n                  <TextField id='lastName' variant=\"outlined\" label=\"Apellido\" value={lastName} onChange={(e)=> {setLastName(e.target.value)}} />\n                </Grid>\n                <Grid item xs={7}>\n                <InputLabel id=\"demo-simple-select-label\" variant=\"outlined\">Especialidad</InputLabel>\n                </Grid>\n                <Grid item xs style={{marginBottom:10}}>\n                <Select\n                labelId=\"Especialidad\"\n                id=\"specialty\"\n                variant=\"outlined\"\n                onChange={(e)=> {setSpecialty(e.target.value)}} value={specialty === 'Ambas'? 'Fotografía y Diseño': specialty}\n                >\n                  <MenuItem value=\"Fotografía\">Fotografía</MenuItem>\n                  <MenuItem value=\"Diseño\">Diseño</MenuItem>\n                  <MenuItem value=\"Fotografía y Diseño\">Fotografía y Diseño</MenuItem>\n                </Select> \n                </Grid>\n                {/* <Grid item xs={7}>\n                <TextField id=\"username\" variant=\"outlined\" label=\"Username\" onChange={handleTest} value={username}/>\n                </Grid> */}\n                <Grid item xs={7}>\n                <TextField id='instagram' variant=\"outlined\" label=\"Instagram\" onChange={(e)=> {setInstagram(e.target.value)}} value={instagram}/>\n                </Grid>\n              </Grid>\n            </Grid>\n            {/* <Grid item xs>\n              <TextField id='description' label=\"Descripción\" onChange={(e)=> {setDescription(e.target.value)}} value={description} multiline/>\n            </Grid> */}\n          <Grid item>\n          {\n            avatarObj ?\n            <Avatar className={classes.avatar}>\n              <label htmlFor=\"file-input\">\n              <img src={avatarObj} alt=\"Prixer profile avatar\" style={{maxHeight: 200}}/>\n              </label>\n              <input style={{display: 'none'}} accept=\"image/*\" id=\"file-input\" type='file' onChange={onImageChange} required/>\n            </Avatar>\n            :\n          <Avatar className={classes.avatar}>\n          <label htmlFor=\"file-input\">\n            <AddIcon  style={{width: 60, height: 60, color: \"#d33f49\"}}/>\n          </label>\n            <input style={{display: 'none'}} accept=\"image/*\" id=\"file-input\" type='file' onChange={onImageChange}/>\n          </Avatar>\n          }\n          </Grid>\n          </Grid>\n          }\n        </Grid>\n      </Paper>\n    </div>\n    :\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n      <Backdrop className={classes.backdrop} open={backdrop}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n        <Grid container spacing={1}>\n          <Grid item xs={12} container>\n            <Grid item xs container direction=\"column\" spacing={2}>\n              <Grid item xs>\n                <Typography gutterBottom variant=\"subtitle1\"> \n                  Increíble, pero cierto \n                </Typography>\n                <Typography variant=\"body1\" gutterBottom>\n                  Este usuario no existe\n                </Typography>\n                <Typography variant=\"body1\" color=\"textSecondary\">\n                  Inténtalo de nuevo | ig: Wrong\n                </Typography>\n              </Grid>\n            </Grid>\n            {/* <Typography variant=\"body1\" color=\"textSecondary\" maxWidth=\"60%\">\n                  {description}\n            </Typography> */}\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n}\n ",{"ruleId":"430","replacedBy":"431"},{"ruleId":"432","replacedBy":"433"},{"ruleId":"434","severity":1,"message":"435","line":8,"column":8,"nodeType":"436","messageId":"437","endLine":8,"endColumn":17},{"ruleId":"434","severity":1,"message":"438","line":63,"column":9,"nodeType":"436","messageId":"437","endLine":63,"endColumn":16},{"ruleId":"439","severity":1,"message":"440","line":251,"column":6,"nodeType":"441","endLine":251,"endColumn":8,"suggestions":"442"},{"ruleId":"439","severity":1,"message":"443","line":292,"column":6,"nodeType":"441","endLine":292,"endColumn":20,"suggestions":"444"},{"ruleId":"445","severity":1,"message":"446","line":375,"column":68,"nodeType":"447","messageId":"448","endLine":375,"endColumn":70},{"ruleId":"439","severity":1,"message":"449","line":130,"column":4,"nodeType":"436","endLine":130,"endColumn":13,"suggestions":"450"},{"ruleId":"434","severity":1,"message":"451","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":14},{"ruleId":"434","severity":1,"message":"452","line":9,"column":8,"nodeType":"436","messageId":"437","endLine":9,"endColumn":15},{"ruleId":"434","severity":1,"message":"453","line":93,"column":10,"nodeType":"436","messageId":"437","endLine":93,"endColumn":16},{"ruleId":"434","severity":1,"message":"454","line":93,"column":18,"nodeType":"436","messageId":"437","endLine":93,"endColumn":27},{"ruleId":"434","severity":1,"message":"455","line":94,"column":10,"nodeType":"436","messageId":"437","endLine":94,"endColumn":19},{"ruleId":"434","severity":1,"message":"456","line":94,"column":21,"nodeType":"436","messageId":"437","endLine":94,"endColumn":33},{"ruleId":"434","severity":1,"message":"457","line":22,"column":8,"nodeType":"436","messageId":"437","endLine":22,"endColumn":18},{"ruleId":"434","severity":1,"message":"458","line":23,"column":8,"nodeType":"436","messageId":"437","endLine":23,"endColumn":21},{"ruleId":"434","severity":1,"message":"459","line":24,"column":8,"nodeType":"436","messageId":"437","endLine":24,"endColumn":18},{"ruleId":"434","severity":1,"message":"460","line":25,"column":8,"nodeType":"436","messageId":"437","endLine":25,"endColumn":22},{"ruleId":"434","severity":1,"message":"461","line":26,"column":8,"nodeType":"436","messageId":"437","endLine":26,"endColumn":19},{"ruleId":"434","severity":1,"message":"462","line":27,"column":8,"nodeType":"436","messageId":"437","endLine":27,"endColumn":18},{"ruleId":"434","severity":1,"message":"463","line":28,"column":8,"nodeType":"436","messageId":"437","endLine":28,"endColumn":21},{"ruleId":"434","severity":1,"message":"464","line":29,"column":8,"nodeType":"436","messageId":"437","endLine":29,"endColumn":12},{"ruleId":"439","severity":1,"message":"465","line":85,"column":3,"nodeType":"436","endLine":85,"endColumn":12,"suggestions":"466"},{"ruleId":"434","severity":1,"message":"467","line":1,"column":27,"nodeType":"436","messageId":"437","endLine":1,"endColumn":35},{"ruleId":"434","severity":1,"message":"468","line":1,"column":37,"nodeType":"436","messageId":"437","endLine":1,"endColumn":46},{"ruleId":"469","severity":1,"message":"470","line":219,"column":12,"nodeType":"471","messageId":"448","endLine":219,"endColumn":22},{"ruleId":"445","severity":1,"message":"472","line":116,"column":89,"nodeType":"447","messageId":"448","endLine":116,"endColumn":91},{"ruleId":"445","severity":1,"message":"472","line":120,"column":89,"nodeType":"447","messageId":"448","endLine":120,"endColumn":91},{"ruleId":"445","severity":1,"message":"472","line":154,"column":68,"nodeType":"447","messageId":"448","endLine":154,"endColumn":70},{"ruleId":"445","severity":1,"message":"472","line":194,"column":68,"nodeType":"447","messageId":"448","endLine":194,"endColumn":70},{"ruleId":"473","severity":1,"message":"474","line":262,"column":39,"nodeType":"475","messageId":"476","endLine":262,"endColumn":41},{"ruleId":"434","severity":1,"message":"477","line":264,"column":27,"nodeType":"436","messageId":"437","endLine":264,"endColumn":31},{"ruleId":"439","severity":1,"message":"478","line":110,"column":6,"nodeType":"441","endLine":110,"endColumn":19,"suggestions":"479"},{"ruleId":"434","severity":1,"message":"480","line":4,"column":8,"nodeType":"436","messageId":"437","endLine":4,"endColumn":13},{"ruleId":"434","severity":1,"message":"481","line":1,"column":28,"nodeType":"436","messageId":"437","endLine":1,"endColumn":39},{"ruleId":"434","severity":1,"message":"482","line":19,"column":8,"nodeType":"436","messageId":"437","endLine":19,"endColumn":15},{"ruleId":"434","severity":1,"message":"483","line":150,"column":10,"nodeType":"436","messageId":"437","endLine":150,"endColumn":22},{"ruleId":"434","severity":1,"message":"484","line":150,"column":24,"nodeType":"436","messageId":"437","endLine":150,"endColumn":39},{"ruleId":"434","severity":1,"message":"485","line":154,"column":20,"nodeType":"436","messageId":"437","endLine":154,"endColumn":31},{"ruleId":"439","severity":1,"message":"486","line":179,"column":6,"nodeType":"441","endLine":179,"endColumn":83,"suggestions":"487"},{"ruleId":"445","severity":1,"message":"446","line":240,"column":12,"nodeType":"447","messageId":"448","endLine":240,"endColumn":14},{"ruleId":"445","severity":1,"message":"446","line":252,"column":25,"nodeType":"447","messageId":"448","endLine":252,"endColumn":27},{"ruleId":"434","severity":1,"message":"488","line":307,"column":12,"nodeType":"436","messageId":"437","endLine":307,"endColumn":22},{"ruleId":"434","severity":1,"message":"489","line":354,"column":9,"nodeType":"436","messageId":"437","endLine":354,"endColumn":20},{"ruleId":"473","severity":1,"message":"474","line":355,"column":23,"nodeType":"475","messageId":"476","endLine":355,"endColumn":25},{"ruleId":"473","severity":1,"message":"474","line":19,"column":23,"nodeType":"475","messageId":"476","endLine":19,"endColumn":25},{"ruleId":"445","severity":1,"message":"446","line":21,"column":23,"nodeType":"447","messageId":"448","endLine":21,"endColumn":25},{"ruleId":"473","severity":1,"message":"490","line":33,"column":39,"nodeType":"475","messageId":"491","endLine":33,"endColumn":41},{"ruleId":"445","severity":1,"message":"446","line":34,"column":25,"nodeType":"447","messageId":"448","endLine":34,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":53,"column":45,"nodeType":"475","messageId":"476","endLine":53,"endColumn":47},{"ruleId":"445","severity":1,"message":"446","line":54,"column":9,"nodeType":"447","messageId":"448","endLine":54,"endColumn":11},{"ruleId":"445","severity":1,"message":"446","line":56,"column":16,"nodeType":"447","messageId":"448","endLine":56,"endColumn":18},{"ruleId":"445","severity":1,"message":"472","line":70,"column":47,"nodeType":"447","messageId":"448","endLine":70,"endColumn":49},{"ruleId":"445","severity":1,"message":"446","line":70,"column":75,"nodeType":"447","messageId":"448","endLine":70,"endColumn":77},{"ruleId":"445","severity":1,"message":"472","line":76,"column":28,"nodeType":"447","messageId":"448","endLine":76,"endColumn":30},{"ruleId":"492","severity":1,"message":"493","line":79,"column":44,"nodeType":"494","messageId":"448","endLine":79,"endColumn":48},{"ruleId":"492","severity":1,"message":"493","line":80,"column":44,"nodeType":"494","messageId":"448","endLine":80,"endColumn":48},{"ruleId":"434","severity":1,"message":"495","line":4,"column":10,"nodeType":"436","messageId":"437","endLine":4,"endColumn":20},{"ruleId":"496","severity":1,"message":"497","line":147,"column":17,"nodeType":"498","endLine":147,"endColumn":50},{"ruleId":"434","severity":1,"message":"499","line":4,"column":8,"nodeType":"436","messageId":"437","endLine":4,"endColumn":12},{"ruleId":"434","severity":1,"message":"500","line":11,"column":8,"nodeType":"436","messageId":"437","endLine":11,"endColumn":13},{"ruleId":"434","severity":1,"message":"501","line":13,"column":8,"nodeType":"436","messageId":"437","endLine":13,"endColumn":24},{"ruleId":"434","severity":1,"message":"502","line":14,"column":8,"nodeType":"436","messageId":"437","endLine":14,"endColumn":16},{"ruleId":"434","severity":1,"message":"503","line":18,"column":8,"nodeType":"436","messageId":"437","endLine":18,"endColumn":14},{"ruleId":"434","severity":1,"message":"504","line":27,"column":11,"nodeType":"436","messageId":"437","endLine":27,"endColumn":18},{"ruleId":"439","severity":1,"message":"505","line":41,"column":3,"nodeType":"441","endLine":41,"endColumn":5,"suggestions":"506"},{"ruleId":"445","severity":1,"message":"446","line":45,"column":12,"nodeType":"447","messageId":"448","endLine":45,"endColumn":14},{"ruleId":"507","severity":1,"message":"508","line":46,"column":34,"nodeType":"447","messageId":"509","endLine":46,"endColumn":35},{"ruleId":"445","severity":1,"message":"446","line":47,"column":12,"nodeType":"447","messageId":"448","endLine":47,"endColumn":14},{"ruleId":"507","severity":1,"message":"508","line":48,"column":34,"nodeType":"447","messageId":"509","endLine":48,"endColumn":35},{"ruleId":"445","severity":1,"message":"446","line":49,"column":12,"nodeType":"447","messageId":"448","endLine":49,"endColumn":14},{"ruleId":"507","severity":1,"message":"508","line":50,"column":34,"nodeType":"447","messageId":"509","endLine":50,"endColumn":35},{"ruleId":"510","severity":1,"message":"511","line":79,"column":41,"nodeType":"498","endLine":79,"endColumn":102},{"ruleId":"434","severity":1,"message":"457","line":13,"column":8,"nodeType":"436","messageId":"437","endLine":13,"endColumn":18},{"ruleId":"434","severity":1,"message":"458","line":14,"column":8,"nodeType":"436","messageId":"437","endLine":14,"endColumn":21},{"ruleId":"434","severity":1,"message":"459","line":15,"column":8,"nodeType":"436","messageId":"437","endLine":15,"endColumn":18},{"ruleId":"434","severity":1,"message":"460","line":16,"column":8,"nodeType":"436","messageId":"437","endLine":16,"endColumn":22},{"ruleId":"434","severity":1,"message":"462","line":18,"column":8,"nodeType":"436","messageId":"437","endLine":18,"endColumn":18},{"ruleId":"434","severity":1,"message":"463","line":19,"column":8,"nodeType":"436","messageId":"437","endLine":19,"endColumn":21},{"ruleId":"512","severity":1,"message":"513","line":36,"column":58,"nodeType":"514","messageId":"515","endLine":36,"endColumn":60},{"ruleId":"512","severity":1,"message":"513","line":36,"column":82,"nodeType":"514","messageId":"515","endLine":36,"endColumn":84},{"ruleId":"512","severity":1,"message":"513","line":37,"column":66,"nodeType":"514","messageId":"515","endLine":37,"endColumn":68},{"ruleId":"512","severity":1,"message":"513","line":37,"column":94,"nodeType":"514","messageId":"515","endLine":37,"endColumn":96},{"ruleId":"434","severity":1,"message":"516","line":38,"column":13,"nodeType":"436","messageId":"437","endLine":38,"endColumn":27},{"ruleId":"434","severity":1,"message":"517","line":38,"column":29,"nodeType":"436","messageId":"437","endLine":38,"endColumn":46},{"ruleId":"512","severity":1,"message":"513","line":39,"column":68,"nodeType":"514","messageId":"515","endLine":39,"endColumn":70},{"ruleId":"512","severity":1,"message":"513","line":39,"column":90,"nodeType":"514","messageId":"515","endLine":39,"endColumn":92},{"ruleId":"512","severity":1,"message":"513","line":40,"column":68,"nodeType":"514","messageId":"515","endLine":40,"endColumn":70},{"ruleId":"512","severity":1,"message":"513","line":40,"column":97,"nodeType":"514","messageId":"515","endLine":40,"endColumn":99},{"ruleId":"512","severity":1,"message":"513","line":41,"column":62,"nodeType":"514","messageId":"515","endLine":41,"endColumn":64},{"ruleId":"512","severity":1,"message":"513","line":41,"column":88,"nodeType":"514","messageId":"515","endLine":41,"endColumn":90},{"ruleId":"512","severity":1,"message":"513","line":42,"column":74,"nodeType":"514","messageId":"515","endLine":42,"endColumn":76},{"ruleId":"512","severity":1,"message":"513","line":42,"column":106,"nodeType":"514","messageId":"515","endLine":42,"endColumn":108},{"ruleId":"512","severity":1,"message":"513","line":43,"column":70,"nodeType":"514","messageId":"515","endLine":43,"endColumn":72},{"ruleId":"512","severity":1,"message":"513","line":43,"column":108,"nodeType":"514","messageId":"515","endLine":43,"endColumn":110},{"ruleId":"512","severity":1,"message":"513","line":44,"column":74,"nodeType":"514","messageId":"515","endLine":44,"endColumn":76},{"ruleId":"512","severity":1,"message":"513","line":44,"column":108,"nodeType":"514","messageId":"515","endLine":44,"endColumn":110},{"ruleId":"512","severity":1,"message":"513","line":45,"column":72,"nodeType":"514","messageId":"515","endLine":45,"endColumn":74},{"ruleId":"512","severity":1,"message":"513","line":45,"column":104,"nodeType":"514","messageId":"515","endLine":45,"endColumn":106},{"ruleId":"512","severity":1,"message":"513","line":46,"column":72,"nodeType":"514","messageId":"515","endLine":46,"endColumn":74},{"ruleId":"512","severity":1,"message":"513","line":46,"column":110,"nodeType":"514","messageId":"515","endLine":46,"endColumn":112},{"ruleId":"512","severity":1,"message":"513","line":47,"column":76,"nodeType":"514","messageId":"515","endLine":47,"endColumn":78},{"ruleId":"512","severity":1,"message":"513","line":47,"column":110,"nodeType":"514","messageId":"515","endLine":47,"endColumn":112},{"ruleId":"512","severity":1,"message":"513","line":48,"column":72,"nodeType":"514","messageId":"515","endLine":48,"endColumn":74},{"ruleId":"512","severity":1,"message":"513","line":48,"column":104,"nodeType":"514","messageId":"515","endLine":48,"endColumn":106},{"ruleId":"512","severity":1,"message":"513","line":53,"column":62,"nodeType":"514","messageId":"515","endLine":53,"endColumn":64},{"ruleId":"512","severity":1,"message":"513","line":53,"column":88,"nodeType":"514","messageId":"515","endLine":53,"endColumn":90},{"ruleId":"434","severity":1,"message":"518","line":58,"column":12,"nodeType":"436","messageId":"437","endLine":58,"endColumn":25},{"ruleId":"434","severity":1,"message":"519","line":58,"column":27,"nodeType":"436","messageId":"437","endLine":58,"endColumn":43},{"ruleId":"434","severity":1,"message":"520","line":59,"column":12,"nodeType":"436","messageId":"437","endLine":59,"endColumn":22},{"ruleId":"434","severity":1,"message":"521","line":59,"column":24,"nodeType":"436","messageId":"437","endLine":59,"endColumn":37},{"ruleId":"473","severity":1,"message":"522","line":63,"column":67,"nodeType":"475","messageId":"491","endLine":63,"endColumn":69},{"ruleId":"445","severity":1,"message":"472","line":63,"column":80,"nodeType":"447","messageId":"448","endLine":63,"endColumn":82},{"ruleId":"512","severity":1,"message":"513","line":95,"column":34,"nodeType":"514","messageId":"515","endLine":95,"endColumn":36},{"ruleId":"512","severity":1,"message":"513","line":95,"column":55,"nodeType":"514","messageId":"515","endLine":95,"endColumn":57},{"ruleId":"512","severity":1,"message":"513","line":401,"column":36,"nodeType":"514","messageId":"515","endLine":401,"endColumn":38},{"ruleId":"512","severity":1,"message":"513","line":401,"column":52,"nodeType":"514","messageId":"515","endLine":401,"endColumn":54},{"ruleId":"434","severity":1,"message":"523","line":1,"column":28,"nodeType":"436","messageId":"437","endLine":1,"endColumn":47},{"ruleId":"434","severity":1,"message":"524","line":70,"column":12,"nodeType":"436","messageId":"437","endLine":70,"endColumn":24},{"ruleId":"434","severity":1,"message":"525","line":70,"column":26,"nodeType":"436","messageId":"437","endLine":70,"endColumn":41},{"ruleId":"434","severity":1,"message":"526","line":71,"column":12,"nodeType":"436","messageId":"437","endLine":71,"endColumn":26},{"ruleId":"434","severity":1,"message":"527","line":71,"column":28,"nodeType":"436","messageId":"437","endLine":71,"endColumn":45},{"ruleId":"434","severity":1,"message":"528","line":72,"column":12,"nodeType":"436","messageId":"437","endLine":72,"endColumn":25},{"ruleId":"434","severity":1,"message":"529","line":72,"column":27,"nodeType":"436","messageId":"437","endLine":72,"endColumn":43},{"ruleId":"439","severity":1,"message":"530","line":100,"column":6,"nodeType":"441","endLine":100,"endColumn":25,"suggestions":"531"},{"ruleId":"445","severity":1,"message":"446","line":120,"column":41,"nodeType":"447","messageId":"448","endLine":120,"endColumn":43},{"ruleId":"532","severity":1,"message":"533","line":166,"column":21,"nodeType":"534","endLine":166,"endColumn":41},{"ruleId":"434","severity":1,"message":"468","line":1,"column":17,"nodeType":"436","messageId":"437","endLine":1,"endColumn":26},{"ruleId":"434","severity":1,"message":"535","line":10,"column":19,"nodeType":"436","messageId":"437","endLine":10,"endColumn":21},{"ruleId":"434","severity":1,"message":"504","line":11,"column":11,"nodeType":"436","messageId":"437","endLine":11,"endColumn":18},{"ruleId":"434","severity":1,"message":"536","line":12,"column":20,"nodeType":"436","messageId":"437","endLine":12,"endColumn":29},{"ruleId":"439","severity":1,"message":"537","line":17,"column":28,"nodeType":"436","endLine":17,"endColumn":39},{"ruleId":"434","severity":1,"message":"538","line":9,"column":8,"nodeType":"436","messageId":"437","endLine":9,"endColumn":18},{"ruleId":"434","severity":1,"message":"539","line":84,"column":10,"nodeType":"436","messageId":"437","endLine":84,"endColumn":15},"no-native-reassign",["540"],"no-negated-in-lhs",["541"],"no-unused-vars","'CardMedia' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.match.params.artId', 'props.match.params.username', and 'tiles'. Either include them or remove the dependency array.","ArrayExpression",["542"],"React Hook useEffect has missing dependencies: 'updatedTile._id', 'updatedTile.artId', 'updatedTile.artLocation', 'updatedTile.artType', 'updatedTile.category', 'updatedTile.description', 'updatedTile.imageUrl', 'updatedTile.license', 'updatedTile.originalPhotoHeight', 'updatedTile.originalPhotoIso', 'updatedTile.originalPhotoPpi', 'updatedTile.originalPhotoWidth', 'updatedTile.prixerUsername', 'updatedTile.publicId', 'updatedTile.status', 'updatedTile.tags', 'updatedTile.thumbnailUrl', 'updatedTile.title', 'updatedTile.use', and 'updatedTile.userId'. Either include them or remove the dependency array.",["543"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect contains a call to 'setButtonState'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [email, username, password] as a second argument to the useEffect Hook.",["544"],"'Avatar' is defined but never used.","'AddIcon' is defined but never used.","'avatar' is assigned a value but never used.","'setAvatar' is assigned a value but never used.","'avatarObj' is assigned a value but never used.","'setAvatarObj' is assigned a value but never used.","'IconButton' is defined but never used.","'OutlinedInput' is defined but never used.","'InputLabel' is defined but never used.","'InputAdornment' is defined but never used.","'FormControl' is defined but never used.","'Visibility' is defined but never used.","'VisibilityOff' is defined but never used.","'clsx' is defined but never used.","React Hook useEffect contains a call to 'setErrorMessage'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [token] as a second argument to the useEffect Hook.",["545"],"'Suspense' is defined but never used.","'useEffect' is defined but never used.","no-dupe-keys","Duplicate key 'marginLeft'.","ObjectExpression","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'test' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'globalParams' and 'props.prixerUsername'. Either include them or remove the dependency array.",["546"],"'axios' is defined but never used.","'useCallback' is defined but never used.","'Cropper' is defined but never used.","'thumbnailUrl' is assigned a value but never used.","'setThumbnailUrl' is assigned a value but never used.","'setPublicId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'artType' and 'handleMaxPrintCalc'. Either include them or remove the dependency array.",["547"],"'blobToFile' is defined but never used.","'removeCrops' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-eval","eval can be harmful.","CallExpression","'makeStyles' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Link' is defined but never used.","'Title' is defined but never used.","'CircularProgress' is defined but never used.","'Backdrop' is defined but never used.","'Button' is defined but never used.","'classes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'base_url' and 'props.product'. Either include them or remove the dependency array.",["548"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'buttonAttState' is assigned a value but never used.","'setButtonAttState' is assigned a value but never used.","'passwordError' is assigned a value but never used.","'setPasswordError' is assigned a value but never used.","'emailError' is assigned a value but never used.","'setEmailError' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'useImperativeHandle' is defined but never used.","'errorMessage' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","'snackBarAction' is assigned a value but never used.","'setSnackBarAction' is assigned a value but never used.","'snackBarError' is assigned a value but never used.","'setSnackBarError' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'art', 'croppedArtTemp', and 'setCroppedArt'. Either include them or remove the dependency array.",["549"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'ar' is assigned a value but never used.","'setAspect' is assigned a value but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'ButtonBase' is defined but never used.","'ready' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},{"desc":"554","fix":"555"},{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},{"desc":"562","fix":"563"},{"desc":"564","fix":"565"},"Update the dependencies array to be: [props.match.params.artId, props.match.params.username, tiles]",{"range":"566","text":"567"},"Update the dependencies array to be: [artDataState, updatedTile._id, updatedTile.artId, updatedTile.artLocation, updatedTile.artType, updatedTile.category, updatedTile.description, updatedTile.imageUrl, updatedTile.license, updatedTile.originalPhotoHeight, updatedTile.originalPhotoIso, updatedTile.originalPhotoPpi, updatedTile.originalPhotoWidth, updatedTile.prixerUsername, updatedTile.publicId, updatedTile.status, updatedTile.tags, updatedTile.thumbnailUrl, updatedTile.title, updatedTile.use, updatedTile.userId]",{"range":"568","text":"569"},"Add dependencies array: [email, username, password]",{"range":"570","text":"571"},"Add dependencies array: [token]",{"range":"572","text":"573"},"Update the dependencies array to be: [globalParams, props.prixerUsername, searchValue]",{"range":"574","text":"575"},"Update the dependencies array to be: [originalPhotoWidth, originalPhotoHeight, originalPhotoPpi, originalPhotoIso, artType, handleMaxPrintCalc]",{"range":"576","text":"577"},"Update the dependencies array to be: [base_url, props.product]",{"range":"578","text":"579"},"Update the dependencies array to be: [art, croppedAreaPixels, croppedArtTemp, setCroppedArt]",{"range":"580","text":"581"},[6861,6863],"[props.match.params.artId, props.match.params.username, tiles]",[8402,8416],"[artDataState, updatedTile._id, updatedTile.artId, updatedTile.artLocation, updatedTile.artType, updatedTile.category, updatedTile.description, updatedTile.imageUrl, updatedTile.license, updatedTile.originalPhotoHeight, updatedTile.originalPhotoIso, updatedTile.originalPhotoPpi, updatedTile.originalPhotoWidth, updatedTile.prixerUsername, updatedTile.publicId, updatedTile.status, updatedTile.tags, updatedTile.thumbnailUrl, updatedTile.title, updatedTile.use, updatedTile.userId]",[4565,4565],", [email, username, password]",[3371,3371],", [token]",[3443,3456],"[globalParams, props.prixerUsername, searchValue]",[5303,5380],"[originalPhotoWidth, originalPhotoHeight, originalPhotoPpi, originalPhotoIso, artType, handleMaxPrintCalc]",[1421,1423],"[base_url, props.product]",[2842,2861],"[art, croppedAreaPixels, croppedArtTemp, setCroppedArt]"]