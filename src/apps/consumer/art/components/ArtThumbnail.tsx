import React from 'react';
import { useNavigate } from 'react-router-dom';
import { CardActionArea, Typography, IconButton, Tooltip, Box } from '@mui/material'; // Added Box for aspect-ratio container
import Img from 'react-cool-img';
import Star from '@mui/icons-material/StarRate';
import AddShoppingCartIcon from '@mui/icons-material/AddShoppingCart';
import { queryCreator } from '@apps/consumer/flow/helpers'; // Assuming this path is correct
import { Art } from '../../../../types/art.types'; // Assuming this path is correct

interface ArtThumbnailProps {
  tile: Art;
  handleFullImageClick: (e: React.MouseEvent<HTMLElement>, tile: Art) => void; // Changed from HTMLImageElement to HTMLElement to be more general for CardActionArea
  onArtSelect?: (art: Art) => void;
  // Added for aspect ratio calculation to reduce layout shift
  originalPhotoWidth?: string;
  originalPhotoHeight?: string;
}

export default function ArtThumbnail({
  tile,
  handleFullImageClick,
  onArtSelect,
  originalPhotoWidth,
  originalPhotoHeight,
}: ArtThumbnailProps) {
  const navigate = useNavigate();

  function handleArtSelection(e: React.MouseEvent<HTMLButtonElement>): void {
    // Prevent click from bubbling to CardActionArea if it's different
    e.stopPropagation();
    const queryString = queryCreator(
      undefined,
      undefined,
      tile.artId?.toString(),
      undefined,
    );
    navigate({ pathname: '/crear-prix', search: queryString });
  }

  const adminToken = localStorage.getItem('adminToken'); // Consider moving to context or a hook if used frequently

  // Determine the best image source, prioritizing smaller thumbnails for faster initial display
  // react-cool-img will handle the placeholder and loading for the chosen src.
  const imageSrc = tile.mediumThumbUrl || tile.largeThumbUrl || tile.squareThumbUrl || tile.imageUrl || '/imgError.svg';
  // Using mediumThumbUrl as a good balance. If you want the absolute fastest initial paint,
  // you could start with tile.smallThumbUrl if available and distinct from mediumThumbUrl.
  // For this example, let's assume mediumThumbUrl is the primary thumbnail.
  // If tile.smallThumbUrl is significantly smaller and you want to use it:
  // const imageSrc = tile.smallThumbUrl || tile.mediumThumbUrl || tile.largeThumbUrl || tile.squareThumbUrl || tile.imageUrl || '/imgError.svg';


  // Calculate aspect ratio for the image container
  let aspectRatioStyle: React.CSSProperties = {
    width: '100%',
    backgroundColor: '#eeeeee', // Fallback background for the container
  };

  if (originalPhotoWidth && originalPhotoHeight && !isNaN(Number(originalPhotoWidth)) && !isNaN(Number(originalPhotoHeight)) && Number(originalPhotoHeight) > 0) {
    aspectRatioStyle.aspectRatio = `${originalPhotoWidth} / ${originalPhotoHeight}`;
    // If using aspect-ratio, height should often be auto for the inner image, and width 100%
  } else {
    // If no aspect ratio, you might want a min-height or let content define height
    // The Img component's style marginBottom: '7px' might be better on the container (Box)
    // or the parent div of CardActionArea if CardActionArea is meant to be the full item boundary
  }

  // The key prop should be on the element generated by the .map() in the parent (ArtsGrid), not here.
  // Removed `key={i}` from the root div.
  return (
    <div style={{ marginBottom: '7px', borderRadius: '4px', overflow: 'hidden' }}> {/* Moved marginBottom and borderRadius here */}
      {adminToken && JSON.parse(adminToken) && tile.visible && (
        <Typography
          style={{
            opacity: 0.5,
            fontSize: '0.8rem',
            fontWeight: 100,
            backgroundColor: '#fff',
            padding: '2px 4px', // Added some padding
            textAlign: 'right', // Or as desired
          }}
        >
          Puntos: {tile.points}
        </Typography>
      )}

      {/* The CardActionArea itself will handle the main click */}
      <CardActionArea
        onClick={(e) => handleFullImageClick(e, tile)}
        // Accessibility: CardActionArea usually handles role and keyboard interaction well.
        // You can add aria-label or aria-labelledby if the content isn't descriptive enough.
        aria-label={`Ver detalles de ${tile.title}`}
        sx={{ position: 'relative' }} // Needed for absolute positioning of icons
      >
        {/* Container for the image to enforce aspect ratio */}
        <Box sx={aspectRatioStyle}>
          <Img
            draggable={false}
            // onClick is handled by CardActionArea now
            placeholder="/imgLoading.svg" // Default placeholder from react-cool-img
            style={{
              display: 'block', // Important for aspect ratio box to work correctly
              width: '100%',
              height: '100%', // Make image fill the aspect ratio box
              objectFit: 'cover', // or 'contain', depending on desired behavior
              // marginBottom: '7px', // Moved to parent div
              // borderRadius: '4px', // Moved to parent div
            }}
            src={imageSrc}
            debounce={300} // Reduced debounce slightly, adjust 
            cache // Enables caching, good.
            error="/imgError.svg" // Default error image
            alt={tile.title || 'Obra de arte'} // Ensure meaningful alt text
          // id={tile.artId} // id can be useful but ensure it's unique if multiple grids are on a page
          // key={tile.artId} // key here is not needed as Img is not part of a list inside this component
          />
        </Box>

        {/* Overlaid Icons */}
        <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', p: 0.5 }}> {/* Container for icons */}
          {!onArtSelect && (
            <Tooltip title='Agregar al carrito'>
              <IconButton
                size="small"
                color="primary"
                onClick={handleArtSelection}
                aria-label="Agregar al carrito"
                sx={{
                  backgroundColor: 'rgba(255,255,255,0.7)',
                  '&:hover': { backgroundColor: 'rgba(255,255,255,0.9)' },
                  // position: 'absolute', top: '8px', left: '8px' // No longer needed with Box container
                }}
              >
                <AddShoppingCartIcon />
              </IconButton>
            </Tooltip>
          )}

          {tile.exclusive === 'exclusive' && (
            <Tooltip title="Arte exclusivo">
              <IconButton
                size="small"
                color="primary"
                aria-label="Arte exclusivo"
                sx={{
                  position: 'absolute', // Position relative to CardActionArea
                  top: '4px', // Adjust 
                  right: '4px', // Adjust 
                  backgroundColor: 'rgba(255,255,255,0.7)', // Optional background for better visibility
                  '&:hover': { backgroundColor: 'rgba(255,255,255,0.9)' },
                  padding: '4px', // Ensure consistent padding
                }}
              >
                <Star color="primary" fontSize="medium" />
              </IconButton>
            </Tooltip>
          )}
        </Box>
      </CardActionArea>
    </div>
  );
}